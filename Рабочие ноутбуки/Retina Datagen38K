{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"17nFfNAIKvrqAKwUpJxMAAaPKmUeEdROY","timestamp":1713204633717},{"file_id":"1nEMSYtJ1Wvfi_LL7PX4zxxdfWhgQDAho","timestamp":1713202752337},{"file_id":"1JjzAdcF5v5uscw4zO2oaf6IM-BzaGARp","timestamp":1634055019330},{"file_id":"1v-FZDVx4wNfsIYCjAw-gwYkqt1oF6z3A","timestamp":1633537154615},{"file_id":"1oABfcq3LYB3jljLuPnDAHo_zrmSpeWy4","timestamp":1633534756941}],"gpuType":"L4","machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"9-a4yxhXQ9fU"},"source":["import cv2, numpy as np\n","\n","# Генератор аугментированных изображений\n","from tensorflow import keras\n","import tensorflow as tf\n","# Матрица ошибок классификатора\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","\n","from tensorflow.keras.layers import Layer, Input, Dense, Flatten, Lambda, Conv2D, MaxPooling2D\n","from tensorflow.keras import applications, losses, optimizers, metrics, Model\n","from tensorflow.keras.applications.resnet_v2 import preprocess_input\n","import os\n","from PIL import Image\n","import random\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","!unzip -q '/content/drive/MyDrive/Диплом/728.zip' -d '/content'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KtnYzkio2QmK","executionInfo":{"status":"ok","timestamp":1715107351703,"user_tz":-180,"elapsed":289126,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"e5633fc4-91d1-4de9-db40-56744db65656"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"aWBl9q2sQry-"},"source":["TRAIN_PATH = '/content/preprocessed/'       # Папка для обучающего набора данных\n","TEST_PATH = '/content/Test/'  # Папка для тестового набора данных\n","IMAGE_PATH = '/content/preprocessed/'\n","# Определение списка имен классов\n","CLASS_LIST = sorted(os.listdir(TRAIN_PATH))\n","# Определение количества классов\n","CLASS_COUNT = len(CLASS_LIST)\n","# Проверка результата\n","print(f'Количество классов: {CLASS_COUNT}, метки классов: {CLASS_LIST}')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YwR7IUa2ROaF","executionInfo":{"status":"ok","timestamp":1715108217444,"user_tz":-180,"elapsed":5,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"c7e4759d-0811-4642-e962-0aab33eb68cf"},"source":["# Определение списка имен классов\n","CLASS_LIST = sorted(os.listdir(TRAIN_PATH))\n","\n","# Определение количества классов\n","CLASS_COUNT = len(CLASS_LIST)\n","\n","# Проверка результата\n","print(f'Количество классов: {CLASS_COUNT}, метки классов: {CLASS_LIST}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Количество классов: 5, метки классов: ['0', '1', '2', '3', '4']\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qzpi1MfvRhLN","executionInfo":{"status":"ok","timestamp":1715108218557,"user_tz":-180,"elapsed":6,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"98bba68b-aa80-4501-a920-8e85b813ce7a"},"source":["data_files = []                           # Cписок путей к файлам картинок\n","data_labels = []                          # Список меток классов, соответствующих файлам\n","\n","for class_label in range(CLASS_COUNT):    # Для всех классов по порядку номеров (их меток)\n","    class_name = CLASS_LIST[class_label]  # Выборка имени класса из списка имен\n","    class_path = IMAGE_PATH + class_name  # Формирование полного пути к папке с изображениями класса\n","    class_files = os.listdir(class_path)  # Получение списка имен файлов с изображениями текущего класса\n","    print(f'Размер класса {class_name} составляет {len(class_files)} фотографий')\n","\n","    # Добавление к общему списку всех файлов класса с добавлением родительского пути\n","    data_files += [f'{class_path}/{file_name}' for file_name in class_files]\n","\n","    # Добавление к общему списку меток текущего класса - их ровно столько, сколько файлов в классе\n","    data_labels += [class_label] * len(class_files)\n","\n","print('Общий размер базы для обучения:', len(data_labels))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размер класса 0 составляет 22369 фотографий\n","Размер класса 1 составляет 2279 фотографий\n","Размер класса 2 составляет 5096 фотографий\n","Размер класса 3 составляет 864 фотографий\n","Размер класса 4 составляет 813 фотографий\n","Общий размер базы для обучения: 31421\n"]}]},{"cell_type":"code","source":["TEST_SPLIT =0.1"],"metadata":{"id":"ANhk_PfASDFZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!rm -rf Test"],"metadata":{"id":"BFYVdA7ZSNLA"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lm5wd8mSR5O3","executionInfo":{"status":"ok","timestamp":1715108218558,"user_tz":-180,"elapsed":5,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"31f90a94-0f46-4a7a-b832-03e38dad43d9"},"source":["# Перенос файлов для теста в отдельное дерево папок, расчет размеров наборов данных\n","\n","os.mkdir(TEST_PATH)                                        # Создание папки для тестовых данных\n","train_count = 0\n","test_count = 0\n","\n","for class_name in CLASS_LIST:                              # Для всех классов по порядку номеров (их меток)\n","    class_path = f'{TRAIN_PATH}/{class_name}'              # Формирование полного пути к папке с изображениями класса\n","    test_path = f'{TEST_PATH}/{class_name}'                # Полный путь для тестовых данных класса\n","    class_files = os.listdir(class_path)                   # Получение списка имен файлов с изображениями текущего класса\n","    class_file_count = len(class_files)                    # Получение общего числа файлов класса\n","    os.mkdir(test_path)                                    # Создание подпапки класса для тестовых данных\n","    test_file_count = int(class_file_count * TEST_SPLIT)   # Определение числа тестовых файлов для класса\n","    test_files = class_files[-test_file_count:]            # Выделение файлов для теста от конца списка\n","    for f in test_files:                                   # Перемещение тестовых файлов в папку для теста\n","        os.rename(f'{class_path}/{f}', f'{test_path}/{f}')\n","    train_count += class_file_count                        # Увеличение общего счетчика файлов обучающего набора\n","    test_count += test_file_count                          # Увеличение общего счетчика файлов тестового набора\n","\n","    print(f'Размер класса {class_name}: {class_file_count} глаз, для теста выделено файлов: {test_file_count}')\n","\n","print(f'Общий размер базы: {train_count}, выделено для обучения: {train_count - test_count}, для теста: {test_count}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размер класса 0: 22369 глаз, для теста выделено файлов: 2236\n","Размер класса 1: 2279 глаз, для теста выделено файлов: 227\n","Размер класса 2: 5096 глаз, для теста выделено файлов: 509\n","Размер класса 3: 864 глаз, для теста выделено файлов: 86\n","Размер класса 4: 813 глаз, для теста выделено файлов: 81\n","Общий размер базы: 31421, выделено для обучения: 28282, для теста: 3139\n"]}]},{"cell_type":"code","source":["data_dir = '/content/preprocessed'\n","batch_size = 32\n","image_size = (512,512)"],"metadata":{"id":"i7uLZ1g69VNY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.5,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"training\",       # Помечаем, что выборка обучающая (90%)\n","  shuffle = True,\n","  seed = 115,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","\n","val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.5,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"validation\",     # Помечаем, что выборка проверочная (10%)\n","  seed = 115,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  shuffle = True,\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","\n","                             # Определяем имена классов:\n","class_names = train_ds.class_names\n","print(class_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cYmPa6wU9VQ5","executionInfo":{"status":"ok","timestamp":1715108221945,"user_tz":-180,"elapsed":3390,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"a0884e68-4320-4706-ac57-800d17c5f984"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 28282 files belonging to 5 classes.\n","Using 14141 files for training.\n","Found 28282 files belonging to 5 classes.\n","Using 14141 files for validation.\n","['0', '1', '2', '3', '4']\n"]}]},{"cell_type":"code","source":["AUTOTUNE = tf.data.AUTOTUNE\n","\n","train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE) # Предварительная обучающая выборка\n","val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)     # Предварительная тестовая выборка\n","\n","print(train_ds)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HdsjIa_p9eu4","executionInfo":{"status":"ok","timestamp":1715108221945,"user_tz":-180,"elapsed":3,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"775f1567-349c-4889-ff89-e427241c4ada"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<_PrefetchDataset element_spec=(TensorSpec(shape=(None, 512, 512, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None,), dtype=tf.int32, name=None))>\n"]}]},{"cell_type":"code","source":["data_augmentation = tf.keras.Sequential([\n","  tf.keras.layers.Normalization(mean=[0.3199, 0.2240, 0.1609], variance=[0.3020, 0.2183, 0.1741]),\n","  tf.keras.layers.RandomZoom((-0.05, 0.05)), # Произвольное увеличение и уменьшение на 10%\n","  tf.keras.layers.RandomContrast(0.15),\n","  tf.keras.layers.RandomRotation(0.15),\n","  tf.keras.layers.RandomFlip(\"horizontal\")])"],"metadata":{"id":"vMzzJvR1EjrR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Resnet = tf.keras.applications.ResNet50V2(\n","    include_top=False,\n","    weights='imagenet',\n","    input_shape=(512, 512, 3),\n",")\n","\n","Input = tf.keras.Input(shape=(512, 512, 3))\n","x = preprocess_input(Input)\n","x = data_augmentation(x)\n","x = Resnet(x,training=True)\n","out_conv = tf.keras.layers.Conv2D(filters=5, kernel_size=1, strides=(1, 1), activation='selu', padding='same', name='out_conv')(x)\n","#gmp = tf.keras.layers.GlobalMaxPool2D()(out_conv)\n","out = Flatten()(out_conv)\n","out = Dense(1,activation='sigmoid')(out)\n","Resnet_model = Model(inputs=Input, outputs=[out], name='4Classes')\n"],"metadata":{"id":"enVXYGld9gul"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Resnet_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iCPE5yJJ9mx-","executionInfo":{"status":"ok","timestamp":1715108539562,"user_tz":-180,"elapsed":5,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"9dee6716-f62c-4a0d-fc90-6a952436286f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"4Classes\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_6 (InputLayer)        [(None, 512, 512, 3)]     0         \n","                                                                 \n"," tf.math.truediv_2 (TFOpLam  (None, 512, 512, 3)       0         \n"," bda)                                                            \n","                                                                 \n"," tf.math.subtract_2 (TFOpLa  (None, 512, 512, 3)       0         \n"," mbda)                                                           \n","                                                                 \n"," sequential (Sequential)     (None, 512, 512, 3)       0         \n","                                                                 \n"," resnet50v2 (Functional)     (None, 16, 16, 2048)      23564800  \n","                                                                 \n"," out_conv (Conv2D)           (None, 16, 16, 5)         10245     \n","                                                                 \n"," flatten_2 (Flatten)         (None, 1280)              0         \n","                                                                 \n"," dense_2 (Dense)             (None, 1)                 1281      \n","                                                                 \n","=================================================================\n","Total params: 23576326 (89.94 MB)\n","Trainable params: 23530886 (89.76 MB)\n","Non-trainable params: 45440 (177.50 KB)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["def plot_graph(train_acc, val_acc, train_loss, val_loss):\n","  '''\n","  Функция выведет на экран графики точности и ошибки на проверочной и обучающей выборках.\n","  '''\n","  sns.set(style='darkgrid', palette='dark')\n","  plt.figure(figsize=(16, 10))\n","  plt.subplot(2, 2, 1)\n","  plt.title('Точность', fontweight='bold')\n","  plt.plot(train_acc, label='Точность на обучащей выборке')\n","  plt.plot(val_acc, label='Точность на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Доля верных ответов')\n","  plt.legend()\n","\n","  plt.subplot(2, 2, 2)\n","  plt.title('Ошибка', fontweight='bold')\n","  plt.plot(train_loss, label='Ошибка на обучающей выборке')\n","  plt.plot(val_loss, label='Ошибка на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Ошибка')\n","  plt.legend()\n","\n","  plt.show()"],"metadata":{"id":"atjicbrn98VX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class QuadraticWeightedKappa(tf.keras.metrics.Metric):\n","    def __init__(self, maxClassesCount=5, name='Kappa', **kwargs):\n","        super(QuadraticWeightedKappa, self).__init__(name=name, **kwargs)\n","        self.M = maxClassesCount\n","\n","        self.O = self.add_weight(name='O', initializer='zeros',shape=(self.M,self.M,), dtype=tf.int64)\n","        self.W = self.add_weight(name='W', initializer='zeros',shape=(self.M,self.M,), dtype=tf.float32)\n","        self.actualHist = self.add_weight(name='actHist', initializer='zeros',shape=(self.M,), dtype=tf.int64)\n","        self.predictedHist = self.add_weight(name='predHist', initializer='zeros',shape=(self.M,), dtype=tf.int64)\n","\n","        # filling up the content of W once\n","        w = np.zeros((self.M,self.M),dtype=np.float32)\n","        for i in range(0,self.M):\n","            for j in range(0,self.M):\n","                w[i,j] = (i-j)*(i-j) / ((self.M - 1)*(self.M - 1))\n","        self.W.assign(w)\n","\n","    def reset_state(self):\n","        \"\"\"Resets all of the metric state variables.\n","        This function is called between epochs/steps,\n","        when a metric is evaluated during training.\n","        \"\"\"\n","        # value should be a Numpy array\n","        zeros1D = np.zeros(self.M)\n","        zeros2D = np.zeros((self.M,self.M))\n","        tf.keras.backend.batch_set_value([\n","            (self.O, zeros2D),\n","            (self.actualHist, zeros1D),\n","            (self.predictedHist,zeros1D)\n","        ])\n","\n","\n","\n","    def update_state(self, y_true, y_pred, sample_weight=None):\n","        # shape is: Batch x 1\n","        y_true = tf.reshape(y_true, [-1])\n","        y_pred = tf.reshape(y_pred, [-1])\n","\n","        y_true_int = tf.cast(tf.math.round(y_true), dtype=tf.int64)\n","        y_pred_int = tf.cast(tf.math.round(y_pred), dtype=tf.int64)\n","\n","        confM = tf.math.confusion_matrix(y_true_int, y_pred_int, dtype=tf.int64, num_classes=self.M)\n","\n","        # incremeting confusion matrix and standalone histograms\n","        self.O.assign_add(confM)\n","\n","        cur_act_hist = tf.math.reduce_sum(confM, 0)\n","        self.actualHist.assign_add(cur_act_hist)\n","\n","        cur_pred_hist = tf.math.reduce_sum(confM, 1)\n","        self.predictedHist.assign_add(cur_pred_hist)\n","\n","    def result(self):\n","        EFloat = tf.cast(tf.tensordot(self.actualHist,self.predictedHist, axes=0),dtype=tf.float32)\n","        OFloat = tf.cast(self.O,dtype=tf.float32)\n","\n","        # E must be normalized \"such that E and O have the same sum\"\n","        ENormalizedFloat = EFloat / tf.math.reduce_sum(EFloat) * tf.math.reduce_sum(OFloat)\n","\n","\n","        return 1.0 - tf.math.reduce_sum(tf.math.multiply(self.W, OFloat))/tf.math.reduce_sum(tf.multiply(self.W, ENormalizedFloat))"],"metadata":{"id":"cHMiJWW-J6tD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_learning_rate = 0.0001\n","# Компилируем модель:\n","Resnet_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),  # Оптимизатор Adam c заданным ранее шагом обучения\n","              loss=tf.keras.losses.MSE,  # Ошибка SparseCategoricalCrossentropy\n","              #loss=lossMetric,\n","              metrics=[QuadraticWeightedKappa(),'accuracy'],\n","                     run_eagerly=True)                                                  # Метрика Accuracy"],"metadata":{"id":"SxKKsztF9-dg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, CSVLogger"],"metadata":{"id":"TuDfh2cj9-fq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import gc\n","gc.collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ECIR2ejl9-h0","executionInfo":{"status":"ok","timestamp":1715108546298,"user_tz":-180,"elapsed":388,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"d2ab38b7-bf3f-453a-dd6e-f0300cd6528b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9912"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["epochs = 20\n","\n","#Задаем коллбеки\n","history_path = '/content/model_history_log2.csv'\n","weights_path = '/content/ResNetV1.h5'\n","\n","csv_logger = CSVLogger(history_path, append=True)\n","# уменьшение lr\n","reduceLROnPlateau = ReduceLROnPlateau(monitor='QuadraticWeightedKappa', factor=0.7, patience=3, verbose=1)\n","# сохранение весов\n","model_checkpoint = ModelCheckpoint(weights_path, monitor='QuadraticWeightedKappa', save_best_only=True, verbose=1)\n","\n","\n","Retina_Resnet = Resnet_model.fit(train_ds,                 # Обучающая выборка\n","                        epochs=epochs,\n","                        shuffle = True,# Количество эпох обучения, заданное ранее\n","                        #validation_data=val_ds,\n","                        callbacks=[csv_logger,\n","                                   reduceLROnPlateau,\n","                                   model_checkpoint])   # Проверочная выборка\n","\n","                                                    # После того, как пройдет обучение, выведем графики точности и ошибки:\n","plot_graph(Retina_Resnet.history['accuracy'],\n","           Retina_Resnet.history['val_accuracy'],\n","           Retina_Resnet.history['loss'],\n","           Retina_Resnet.history['val_loss'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"LxlX0NFO-CgX","outputId":"b18a12d6-4df1-42f8-8a14-3913df2808ff","executionInfo":{"status":"error","timestamp":1715112466691,"user_tz":-180,"elapsed":3920068,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","442/442 [==============================] - ETA: 0s - loss: 1.0864 - Kappa: 0.0503 - accuracy: 0.2967"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 480s 1s/step - loss: 1.0864 - Kappa: 0.0503 - accuracy: 0.2967 - lr: 1.0000e-04\n","Epoch 2/20\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:2723: UserWarning: Metric QuadraticWeightedKappa implements a `reset_states()` method; rename it to `reset_state()` (without the final \"s\"). The name `reset_states()` has been deprecated to improve API consistency.\n","  m.reset_state()\n"]},{"output_type":"stream","name":"stdout","text":["442/442 [==============================] - ETA: 0s - loss: 0.9886 - Kappa: 0.1290 - accuracy: 0.3780"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 451s 1s/step - loss: 0.9886 - Kappa: 0.1290 - accuracy: 0.3780 - lr: 1.0000e-04\n","Epoch 3/20\n","442/442 [==============================] - ETA: 0s - loss: 0.9675 - Kappa: 0.1561 - accuracy: 0.3925"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 451s 1s/step - loss: 0.9675 - Kappa: 0.1561 - accuracy: 0.3925 - lr: 1.0000e-04\n","Epoch 4/20\n","442/442 [==============================] - ETA: 0s - loss: 0.9644 - Kappa: 0.1667 - accuracy: 0.4145"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 451s 1s/step - loss: 0.9644 - Kappa: 0.1667 - accuracy: 0.4145 - lr: 1.0000e-04\n","Epoch 5/20\n","442/442 [==============================] - ETA: 0s - loss: 0.9528 - Kappa: 0.1833 - accuracy: 0.4343"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 451s 1s/step - loss: 0.9528 - Kappa: 0.1833 - accuracy: 0.4343 - lr: 1.0000e-04\n","Epoch 6/20\n","442/442 [==============================] - ETA: 0s - loss: 0.9448 - Kappa: 0.1888 - accuracy: 0.4398"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 450s 1s/step - loss: 0.9448 - Kappa: 0.1888 - accuracy: 0.4398 - lr: 1.0000e-04\n","Epoch 7/20\n","442/442 [==============================] - ETA: 0s - loss: 0.9455 - Kappa: 0.1933 - accuracy: 0.4411"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 451s 1s/step - loss: 0.9455 - Kappa: 0.1933 - accuracy: 0.4411 - lr: 1.0000e-04\n","Epoch 8/20\n","442/442 [==============================] - ETA: 0s - loss: 0.9376 - Kappa: 0.2102 - accuracy: 0.4530"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Learning rate reduction is conditioned on metric `QuadraticWeightedKappa` which is not available. Available metrics are: loss,Kappa,accuracy,lr\n","WARNING:tensorflow:Can save best model only with QuadraticWeightedKappa available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r442/442 [==============================] - 451s 1s/step - loss: 0.9376 - Kappa: 0.2102 - accuracy: 0.4530 - lr: 1.0000e-04\n","Epoch 9/20\n","279/442 [=================>............] - ETA: 2:46 - loss: 0.9303 - Kappa: 0.2022 - accuracy: 0.4535"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-bb85783b045b>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m Retina_Resnet = Resnet_model.fit(train_ds,                 # Обучающая выборка\n\u001b[0m\u001b[1;32m     15\u001b[0m                         \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m                         \u001b[0mshuffle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;31m# Количество эпох обучения, заданное ранее\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1805\u001b[0m                         ):\n\u001b[1;32m   1806\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1807\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1808\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtrain_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m   1399\u001b[0m             \u001b[0;32mdef\u001b[0m \u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1400\u001b[0m                 \u001b[0;34m\"\"\"Runs a training execution with a single step.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1401\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mstep_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1402\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1403\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_eagerly\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mstep_function\u001b[0;34m(model, iterator)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 )\n\u001b[1;32m   1383\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistribute_strategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m             outputs = reduce_per_replica(\n\u001b[1;32m   1386\u001b[0m                 \u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m   1679\u001b[0m       fn = autograph.tf_convert(\n\u001b[1;32m   1680\u001b[0m           fn, autograph_ctx.control_status_ctx(), convert_by_default=False)\n\u001b[0;32m-> 1681\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extended\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1682\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1683\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36mcall_for_each_replica\u001b[0;34m(self, fn, args, kwargs)\u001b[0m\n\u001b[1;32m   3269\u001b[0m       \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3270\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_container_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3271\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3272\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3273\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/distribute/distribute_lib.py\u001b[0m in \u001b[0;36m_call_for_each_replica\u001b[0;34m(self, fn, args, kwargs)\u001b[0m\n\u001b[1;32m   4067\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_for_each_replica\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4068\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mReplicaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_container_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplica_id_in_sync_group\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4069\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4070\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4071\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_reduce_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdestinations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/impl/api.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    594\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    595\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mControlStatusCtx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstatus\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mag_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mStatus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUNSPECIFIED\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 596\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    597\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    598\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mismethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mrun_step\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   1371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mdef\u001b[0m \u001b[0mrun_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m                 \u001b[0;31m# Ensure counter is updated only if `train_step` succeeds.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1375\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_dependencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_minimum_control_deps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtrain_step\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m   1149\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGradientTape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m             \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m             \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_target_and_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m         \u001b[0;31m# Run backwards pass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mcompute_loss\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m   1207\u001b[0m         \"\"\"\n\u001b[1;32m   1208\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mx\u001b[0m  \u001b[0;31m# The default implementation does not use `x`.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1209\u001b[0;31m         return self.compiled_loss(\n\u001b[0m\u001b[1;32m   1210\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mregularization_losses\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlosses\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1211\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/compile_utils.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, y_true, y_pred, sample_weight, regularization_losses)\u001b[0m\n\u001b[1;32m    275\u001b[0m             \u001b[0my_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmatch_dtype_and_rank\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    276\u001b[0m             \u001b[0msw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlosses_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_mask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlosses_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_mask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_p\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 277\u001b[0;31m             \u001b[0mloss_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_obj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_p\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m             \u001b[0mtotal_loss_mean_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, y_true, y_pred, sample_weight)\u001b[0m\n\u001b[1;32m    141\u001b[0m                 )\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m             \u001b[0mlosses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcall_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m             \u001b[0min_mask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlosses_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_mask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, y_true, y_pred)\u001b[0m\n\u001b[1;32m    268\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__internal__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontrol_status_ctx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    269\u001b[0m         )\n\u001b[0;32m--> 270\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mag_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fn_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    271\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    272\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_config\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/dispatch.py\u001b[0m in \u001b[0;36mop_dispatch_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1258\u001b[0m       \u001b[0;31m# Fallback dispatch system (dispatch v1):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1260\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mdispatch_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1261\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1262\u001b[0m         \u001b[0;31m# Note: convert_to_eager_tensor currently raises a ValueError, not a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\u001b[0m in \u001b[0;36mmean_squared_error\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m   1703\u001b[0m     \"\"\"\n\u001b[1;32m   1704\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert_to_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1705\u001b[0;31m     \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1706\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msquared_difference\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1707\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/dispatch.py\u001b[0m in \u001b[0;36mop_dispatch_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1258\u001b[0m       \u001b[0;31m# Fallback dispatch system (dispatch v1):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1260\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mdispatch_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1261\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1262\u001b[0m         \u001b[0;31m# Note: convert_to_eager_tensor currently raises a ValueError, not a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/math_ops.py\u001b[0m in \u001b[0;36mcast\u001b[0;34m(x, dtype, name)\u001b[0m\n\u001b[1;32m   1022\u001b[0m         )\n\u001b[1;32m   1023\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mbase_type\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1024\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgen_math_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1025\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1026\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/gen_math_ops.py\u001b[0m in \u001b[0;36mcast\u001b[0;34m(x, DstT, Truncate, name)\u001b[0m\n\u001b[1;32m   2054\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_eager\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2055\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2056\u001b[0;31m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0m\u001b[1;32m   2057\u001b[0m         _ctx, \"Cast\", name, x, \"DstT\", DstT, \"Truncate\", Truncate)\n\u001b[1;32m   2058\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["Resnet_model.save('/content/drive/MyDrive/Диплом/Models/ResNet38k50%.keras')"],"metadata":{"id":"9IQo-ijhZ1M8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"MPPcpXURq5Ka"},"execution_count":null,"outputs":[]}]}