{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Продвинутый блок | Генеративно-состязательные сети | ДЗ Pro | УИИ","provenance":[{"file_id":"1Tvc4gWThI5Vu4b1BP0BV4v6XWce7y16j","timestamp":1638979180476}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"L0FXhiuS3hNE"},"source":["\n","1. Сделайте ConditionalGAN (Генеративно-состязательная сеть с условием) для генерации изображений Fashion Mnist, но вместо индекса изображения на label подавайте рукописную цифру из Mnist картинкой 28 на 28.\n","2. Добейтесь максимальной детализации изображений, насколько получится.\n","3. Попробуйте сгенерировать образ по рукописным цифрам, нарисованным в paint.\n","\n","\n","\n","Третий пункт не выполняется, т.к работа идет за базой предметов одежды, и нарисовать свою картинку в паинте будет намного сложнее"]},{"cell_type":"code","metadata":{"id":"v0h5XYNk6nqu","executionInfo":{"status":"ok","timestamp":1638989328291,"user_tz":-180,"elapsed":2486,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["# Загрузка библиотек\n","\n","# Базовые слои keras\n","from keras.layers import Input, Dense, Reshape, Flatten, Dropout\n","\n","# Еще базовые слои\n","from keras.layers import BatchNormalization, Activation, MaxPooling2D, concatenate, Embedding, multiply, Conv2DTranspose, Concatenate\n","\n","# Активационная функция\n","from keras.layers.advanced_activations import LeakyReLU\n","\n","from tensorflow.keras.utils import plot_model\n","\n","# Загрузим сверточные слои\n","from keras.layers.convolutional import UpSampling2D, Conv2D \n","\n","# Загрузим форматы моделей\n","from keras.models import Sequential, Model \n","\n","# Загрузим оптимизатор\n","from tensorflow.keras.optimizers import Adam\n","\n","# Загрузим модули с датасетами\n","from keras.datasets import mnist, cifar10, fashion_mnist\n","\n","# Библиотека для отрисовки графиков\n","import matplotlib.pyplot as plt \n","\n","# Импортируем библиотеку для работы с системой\n","import sys\n","\n","# Numpy массивы\n","import numpy as np\n","\n","# Модуль отрисовки изображений\n","from PIL import Image \n","\n","# Модуль для загрузки уже готовых моделей\n","from tensorflow.keras.models import load_model\n","\n","# Библиотека для работы с файловой системой виртуальной машины\n","import os\n","\n","import random"],"execution_count":1,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"J2otQr4RdRht"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[""],"metadata":{"id":"Tkhrz5mmdRzs"}},{"cell_type":"code","metadata":{"id":"KZg83xRhUZRi","executionInfo":{"status":"ok","timestamp":1638989328293,"user_tz":-180,"elapsed":13,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["# загрузим базу MNIST\n","\n","(xTrainMnist, yTrainMnist), (xTestMnist, yTestMnist) = mnist.load_data()"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"4V_vogkCyayd","executionInfo":{"status":"ok","timestamp":1638989329032,"user_tz":-180,"elapsed":748,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["# загрузим базу Fashion MNIST\n","\n","(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()"],"execution_count":3,"outputs":[]},{"cell_type":"code","source":["print(x_train.shape)\n","\n","# масштабируем данные от -1 до 1\n","x_train = x_train / 127.5 - 1. # Нормализуем изображение от [-1,1]\n","x_train = np.expand_dims(x_train, axis=3) # Добавляем размерность для x_train ((28,28) => (28,28,1))\n","print(x_train.shape)"],"metadata":{"id":"_Bspb6BoxIGq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638989329033,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"872a4863-1ccc-4aa2-98e4-d889013905cb"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["(60000, 28, 28)\n","(60000, 28, 28, 1)\n"]}]},{"cell_type":"code","source":["# Определяем параметры\n","\n","img_hieght = 28     # высота изображения\n","img_width = 28      # ширина изображения\n","channels = 1        # канал 1 (картинка черно белая)\n","img_shape = (img_hieght, img_width, channels)\n","\n","random_vec = 100    # Задаем размер N-мерного вектора\n","dropout_rait = 0.1  # Задаем размер Dropout\n","\n","batch_size = 128\n","n_classes = 10"],"metadata":{"id":"bs5UoI-zxIXN","executionInfo":{"status":"ok","timestamp":1638989329034,"user_tz":-180,"elapsed":12,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def create_cc_generator(random_vec, \n","                        n_classes):\n","\n","  noise = Input(shape=(random_vec,)) # Создаем вход размером random_vec - вектор со случайным номрмальным распределением - шум\n","  labels_in = Input(shape=(28,28,1)) # Создаем вход для лейблов\n","  n_neurons = 7 * 7 # Основание для картинки 7х7\n","  labels = Conv2D(1,3, strides=4,activation='relu')(labels_in)\n","  labels = Reshape((7,7,1))(labels) # Преобразуем вектора лейблов в тезоры для подачи в качестве дополнительного канала\n","\n","  n_neurons = 128 * 7 * 7 # Указываем количество нейронов во входном слое 6272 --> 128 * 7 * 7 \n","  gen = Dense(n_neurons)(noise) # Подаем шум на полносвязный слой, размер слоя выбран так, что бы его можно было преобразовать в удобный для нас размер\n","  gen = LeakyReLU(alpha=0.2) (gen) # Применяем активационную ф-ю LeakyReLU с параметром наклона 0.2\n","  #gen = BatchNormalization()(gen) # Добавляем слой нормализации\n","  gen = Reshape((7,7,128))(gen) # Преобразуем входящий вектор в тензор 6272 --> 128 * 7 * 7 \n","\n","  # Оъединяем изображение и его лейбл\n","  merge = multiply([gen, labels])\n","\n","  gen = Conv2DTranspose(128,(4,4), strides=(2,2), padding='same')(merge) # Увеличиваем размерность до 14х14х128\n","  gen = LeakyReLU(alpha=0.2) (gen)\n","  #gen = BatchNormalization()(gen)  \n","  gen = Conv2DTranspose(128,(4,4), strides=(2,2), padding='same')(gen)  # Увеличиваем размерность до 28х28х128\n","  gen = LeakyReLU(alpha=0.2) (gen)\n","  #gen = BatchNormalization()(gen) \n","  img = Conv2D(1,(7,7), activation = 'tanh', padding='same')(gen) # Преобразуем тензвор в картинку 28х28х1\n","\n","  model = Model([noise,labels_in],img)\n","  return model\n","\n","cc_gen = create_cc_generator(random_vec, n_classes) # создаем дискриминатор\n","cc_gen.summary() # выводем информацию о нейронной сети  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NIrSAmnHxl0R","executionInfo":{"status":"ok","timestamp":1638989330254,"user_tz":-180,"elapsed":1231,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"2fe16e4b-6f6d-42aa-85c3-9667e77eda7c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 100)]        0           []                               \n","                                                                                                  \n"," dense (Dense)                  (None, 6272)         633472      ['input_1[0][0]']                \n","                                                                                                  \n"," input_2 (InputLayer)           [(None, 28, 28, 1)]  0           []                               \n","                                                                                                  \n"," leaky_re_lu (LeakyReLU)        (None, 6272)         0           ['dense[0][0]']                  \n","                                                                                                  \n"," conv2d (Conv2D)                (None, 7, 7, 1)      10          ['input_2[0][0]']                \n","                                                                                                  \n"," reshape_1 (Reshape)            (None, 7, 7, 128)    0           ['leaky_re_lu[0][0]']            \n","                                                                                                  \n"," reshape (Reshape)              (None, 7, 7, 1)      0           ['conv2d[0][0]']                 \n","                                                                                                  \n"," multiply (Multiply)            (None, 7, 7, 128)    0           ['reshape_1[0][0]',              \n","                                                                  'reshape[0][0]']                \n","                                                                                                  \n"," conv2d_transpose (Conv2DTransp  (None, 14, 14, 128)  262272     ['multiply[0][0]']               \n"," ose)                                                                                             \n","                                                                                                  \n"," leaky_re_lu_1 (LeakyReLU)      (None, 14, 14, 128)  0           ['conv2d_transpose[0][0]']       \n","                                                                                                  \n"," conv2d_transpose_1 (Conv2DTran  (None, 28, 28, 128)  262272     ['leaky_re_lu_1[0][0]']          \n"," spose)                                                                                           \n","                                                                                                  \n"," leaky_re_lu_2 (LeakyReLU)      (None, 28, 28, 128)  0           ['conv2d_transpose_1[0][0]']     \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 28, 28, 1)    6273        ['leaky_re_lu_2[0][0]']          \n","                                                                                                  \n","==================================================================================================\n","Total params: 1,164,299\n","Trainable params: 1,164,299\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["def create_cc_discriminator(): # Функция создания сверточного дискрминатора  \n","  \n","  img = Input(shape=img_shape) # Создаем вход на который поступает изоражение размером img_shape 28х28х1\n","\n","  labels = Input(shape=(28,28,1)) # Создаем вход для лейблов\n"," # Преобразуем вектора лейблов в тезоры для подачи в качестве дополнительного канала\n","\n","  # Объединяем картинку и ее лейбл через функцию конкатенации\n","  merge = multiply([img, labels])\n","  \n","  dis = Conv2D(128, (3,3), strides=(2,2), padding='same')(merge) # Создаем слой  Conv2D, кол-во фильтров = 128, окно свертки = (3,3), шаг (2,2)\n","                                                               # на этом слое уменьшаем размерность 28х28х1 --> 14х14х128\n","  dis = LeakyReLU(alpha=0.2) (dis) # Применяем активационную ф-ю LeakyReLU с параметром наклона 0.2\n","  #dis = BatchNormalization()(dis) # Добавляем нормализацию\n","  dis = Conv2D(128, (3,3), strides=(2,2), padding='same')(dis) # Создаем слой  Conv2D, кол-во фильтров = 128, окно свертки = (3,3), шаг (2,2)\n","                                                               # на этом слое уменьшаем размерность 14х14х128 --> 7х7х128\n","  dis = LeakyReLU(alpha=0.2) (dis)\n","  #dis = BatchNormalization()(dis)   \n","  dis = Flatten()(dis) # Вытягиваем тезор 7х7х128 в вектор длиной 6272\n","  dis = Dropout(0.4)(dis) # Добавляем слой Dropout с отсечкой в 40%\n","  classifier_layer = Dense(1, activation='sigmoid')(dis) # Выходной классифицирующий слой с активацией sigmoid \n","\n","  cc_discriminator = Model([img, labels],classifier_layer)\n"," \n"," # Компилируем модель дискриманотра\n","  cc_discriminator.compile(loss='binary_crossentropy', # Компилируем модель, выбираем ф-ю ошибки бинраная кроссэнтропия\n","              optimizer=Adam(0.0002, 0.5), # Выбираем оптимизатор Адам с рекомендованными параметрами lr=0.0002, уменьшаем импульс β1 с 0.9 (по умолчанию)\n","                                           # до 0.5 что бы уменьшить колебания и увеличить стабильность обучения\n","              metrics=['accuracy'])\n"," \n","  cc_discriminator.trainable = False  # Замораживаем обучение дискриматора \n"," \n","  return cc_discriminator # Функция возвращает скомпилированный Дискриминатор\n","\n","cc_discriminator = create_cc_discriminator()\n","cc_discriminator.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z77xPIm1xl3G","executionInfo":{"status":"ok","timestamp":1638989330255,"user_tz":-180,"elapsed":16,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"10281414-5ad6-4802-97da-b39c0c24a803"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_3 (InputLayer)           [(None, 28, 28, 1)]  0           []                               \n","                                                                                                  \n"," input_4 (InputLayer)           [(None, 28, 28, 1)]  0           []                               \n","                                                                                                  \n"," multiply_1 (Multiply)          (None, 28, 28, 1)    0           ['input_3[0][0]',                \n","                                                                  'input_4[0][0]']                \n","                                                                                                  \n"," conv2d_2 (Conv2D)              (None, 14, 14, 128)  1280        ['multiply_1[0][0]']             \n","                                                                                                  \n"," leaky_re_lu_3 (LeakyReLU)      (None, 14, 14, 128)  0           ['conv2d_2[0][0]']               \n","                                                                                                  \n"," conv2d_3 (Conv2D)              (None, 7, 7, 128)    147584      ['leaky_re_lu_3[0][0]']          \n","                                                                                                  \n"," leaky_re_lu_4 (LeakyReLU)      (None, 7, 7, 128)    0           ['conv2d_3[0][0]']               \n","                                                                                                  \n"," flatten (Flatten)              (None, 6272)         0           ['leaky_re_lu_4[0][0]']          \n","                                                                                                  \n"," dropout (Dropout)              (None, 6272)         0           ['flatten[0][0]']                \n","                                                                                                  \n"," dense_1 (Dense)                (None, 1)            6273        ['dropout[0][0]']                \n","                                                                                                  \n","==================================================================================================\n","Total params: 155,137\n","Trainable params: 0\n","Non-trainable params: 155,137\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["plot_model(cc_discriminator, dpi = 60, show_shapes=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":616},"id":"X9bIzBP9z11b","executionInfo":{"status":"ok","timestamp":1638989330256,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"2d62ef52-1666-4f98-848c-a6bf84041458"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["def show_learning_proggress(gen):    \n","  noise = np.random.normal(size=(1,random_vec)) # Генерируем случайный вектор с нормальным распределением\n","  sampled_labels = np.array(random.choices(x_train, k=10)) # Создаем массив меток от 0 до 10 и решейпим его в размерность (10, 1)\n","  fig = plt.figure(figsize=(15, 4)) # Задаем размер фигуры\n","  for i in range (10): # Перебираем по очереди все лейблы\n","    predict_gen = cc_gen.predict([noise,np.expand_dims(sampled_labels[i],axis=0)]) #генерируем изображение из шума по заданному лейблу\n","    plt.subplot(2,10,i+1)\n","    plt.imshow(sampled_labels[i].squeeze(), cmap='gray')\n","    if i == 5: plt.title('Исходные изображения-лейблы')\n","    plt.axis('off')\n","    plt.subplot(2,10,11+i)\n","    plt.imshow(predict_gen[0].reshape(28, 28), cmap='gray') # Выводим картинку на полотно\n","    if i == 5: plt.title('Сгенерированные изображения')\n","    plt.axis('off') # Отключаем оси\n","  plt.show() # Выводим все полотно на экран"],"metadata":{"id":"PKrbDX3b0NOI","executionInfo":{"status":"ok","timestamp":1638989330257,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["batch_size = 128\n","\n","def CGAN_algoritm (generator, \n","                   discriminator, \n","                   epochs=30000, \n","                   batch_size=128):\n","   \n","   ''' Функция ...\n","       Args:\n","\n","       Return:\n","   \n","   '''\n","\n","   #создаем yTrain \n","   true_labels_img = np.ones((batch_size, 1)) # Создаем массив лэйблов с единицаами для истинного распределения (датасета с картинками)\n","   generated_labels_img = np.zeros((batch_size, 1)) # Сооздаем массив лэйблов с нулями для сгенерированного распределения (сгенерированные картинки)\n","\n","   #Модель GAN собираем с помощью функционального программирования\n","   noise = Input (shape=(random_vec,))  # Создаем слой Input (Записываем входные данные рамерностью random_vec в noise)\n","   label = Input(shape=(28,28,1)) # Создаем слой Input (Записываем входные данные рамерностью (1) в label)\n","   img = generator([noise, label]) # # Записываем в переменную img значение, возвращаемое generator'ом  с входным параметром noise\n","   checkup = discriminator([img, label]) # Записываем в переменную checkup значение, возвращаемое discriminator'ом с входным параметром img\n","                                # Дискриминатор возвращает вероятность того, что изображение поступившее к нему на вход отностися к одному из 2-х классов\n","   # Обратине внимание! В модели GAN generator и discriminator используются, так же как стандартные слои в моделях keras\n","\n","   CGAN = Model([noise,label],checkup) # Собираем модель CGAN в которой обе модели G и D  входят как слои. На вход CGAN подаем вектор nois и лэйл, на выходе оценка вероятности\n","   CGAN.compile(loss='binary_crossentropy', optimizer = Adam(0.0002, 0.5))\n","\n","   view_interval = 150 # интервал через который будем смотреть что получается\n","  \n","   d_loss_list = [] # лист значений ошибки дискриминатора\n","   g_loss_list = [] # лист значений ошибки генератора\n","   d_acc_list = [] # лист значений ошибки точность модели\n","  \n","   for epoch in range(epochs):\n","\n","      # Формируем пакеты данных - Batch для Дискриминатора и Генератора\n","      \n","      # Для Дискриминатора batch формируется из истинного распределения вероятности (базы настоящих картинок)\n","      index = np.random.randint(0, x_train.shape[0], batch_size ) # генерируем случайные индексы в диапазоне x_train в количестве batch_size\n","      imgs, labels = x_train[index], x_train[index]  # записываем случайные картинки с индексами полученными выше из x_train в imgs, а в labels записываем их лейблы\n","\n","      # Обратите внимание! y_train был сформирован выше\n","      \n","      # Для Генератора batch формируется из случайного нормального распределения - N-мерный вектор\n","      noise = np.random.normal(0, 1, (batch_size, random_vec)) # записываем в переменную noise вектора, длинной random_vec в количестве batch_size\n","\n","      gen_imgs = generator.predict([noise, labels]) # Генерируем изображения соответствующее лэйблу с помощью генератора, записываем в переменную gen_imgs пакет сгенерированных изображений\n","\n","      # Обучаем Дискриминатор\n","      d_loss_real = discriminator.train_on_batch([imgs, labels], true_labels_img) # тренируем дискриминатор на реальнрых картинках в y_train подаем значения true_labels, т.е. 1\n","      d_loss_gen = discriminator.train_on_batch([gen_imgs, labels], generated_labels_img) # тренируем дискриминатор на картинках из генераторав \n","                                                                            # в y_train подаем значения generated_labels, т.е. 0\n","      # Вычисляем среднюю ошибку дискриминатора на истинных и сгенерированных данных\n","      d_loss = 0.5* np.add(d_loss_real,d_loss_gen) # получаем массив ошибок дискриминатора\n","\n","      # Обучаем генератор обращаю внимание - дискриминатор заморожен\n","      g_loss = CGAN.train_on_batch([noise, labels],true_labels_img) # На вход генератору подаем случайное распределение шум (noise) и в качестве y_true единицы (true_labels)\n","\n","      #Код ниже можно включить для вывода инфомрации в каждой эпохе  \n","      #print ('%d [D loss: %f, acc.: %.2f%%] [G loss: %f]' % (epoch, d_loss[0], 100*d_loss[1], g_loss)) # выводим номер эпохи и значения ошибок\n","\n","      d_loss_list.append(d_loss[0]) #Добавляем текущую ошибку дискриминатора в лист\n","      g_loss_list.append(g_loss) #Добавляем текущую ошибку генератора в лист\n","      d_acc_list.append(100*d_loss[1]) # Добавляем метрику дискриминатора в процентах в лист\n","    \n","      # Проверка эпох для вывода картинок\n","      if ((epoch % view_interval == 0) | (epoch == epochs-1)):\n","         show_learning_proggress( generator)\n","         print ('%d [D loss: %f, acc.: %.2f%%] [G loss: %f]' % (epoch, d_loss[0], 100*d_loss[1], g_loss)) # выводим номер эпохи и значения ошибок\n","\n","\n","   plt.plot(d_loss_list, label=\"Ошибка дискриминатора\")\n","   plt.plot(g_loss_list, label=\"Ошибка генератора\")\n","   plt.legend()\n","   plt.show()\n","   plt.plot(d_acc_list, label=\"Точность распознавания дискриминатора\")\n","   plt.legend()\n","   plt.show()\n","\n","    "],"metadata":{"id":"Bp803TFB0Qq9","executionInfo":{"status":"ok","timestamp":1638989330259,"user_tz":-180,"elapsed":15,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["CGAN_algoritm(cc_gen, cc_discriminator, 10000)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"13k-hRoA2nb-1iPMPxRDsHgwCXTaiZajg"},"id":"jHJUkeSf055V","executionInfo":{"status":"ok","timestamp":1638990355966,"user_tz":-180,"elapsed":1025722,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"c58f6357-634f-4472-9d14-1644c03e9032"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["Точность ,конечно, не ахти, скорее всего ее можно увеличить, если немного покопаться в архитектуре модели"],"metadata":{"id":"4uAs0LWaWMrf"}}]}