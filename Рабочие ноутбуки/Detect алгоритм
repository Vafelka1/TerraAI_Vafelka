{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1NN7kGUOAQw8AWVZvI2qCYLk1LffJ0i8f","timestamp":1671290906724},{"file_id":"1lHd2JXaUghwYRCLKMyPmWMBB4A17zMpq","timestamp":1671270281442},{"file_id":"1kxvPwjoWl0Z8tIcMBmmmufuXOvjV5B2Z","timestamp":1671009076068},{"file_id":"1tOG5bRunDTAAIzqc61QyINIDXyjVqJGX","timestamp":1670923255946},{"file_id":"1Rq9U1iwO-GudpcbHtti7FPaPPPixqu5Y","timestamp":1670639795031},{"file_id":"1FJKi2ztW-LnSppMqgbiSw03UQiz7nM36","timestamp":1670584763888},{"file_id":"1BiCtPweM3Z37xQ2dhsRzP0EtVPMmvGYo","timestamp":1629887041892},{"file_id":"1lMqTdtsA9U0WBTwtzZoXr5SJw9qo6tbz","timestamp":1629886424331}],"machine_shape":"hm","collapsed_sections":["NCcRmAr7B6Yn","8MnRkCLuB6Yp","Dv661SfRB6Ys","1uiTQdY9pwPV","K0f3hi5-B6Y1","w92UEihYB6Y3","lo4Pbc6CB6Yw"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"UbELY0XuFGQ0"},"source":["# **Подключение библиотек**"]},{"cell_type":"code","metadata":{"id":"bbx9ujcwmNUc"},"source":["import numpy as np\n","import tensorflow as tf          # Библиотека TensorFlow\n","from tensorflow.keras import layers\n","from keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LambdaCallback, CSVLogger\n","# метод для отрисовки модели \n","from keras.utils.vis_utils import plot_model\n","import gc                        # Модуль Garbage Collector - для помощи в освобождении памяти (Удаляет лишние/неиспользуемые данные)\n","import os                        # Модуль для работы с файлами операционной системы\n","import time                      # Модуль для работы со временем\n","import gdown                     # Модуль для загрузки больших файлов\n","import random                    # Модуль для генерации случайных значений\n","import seaborn as sns            # Модуль для работы с графиками и стилями\n","import matplotlib.pyplot as plt  # Модуль для работы с графиками и изображениями\n","from PIL import Image            # Методы для работы с изображениями"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1Y6CTa8MFHdZ"},"source":["# **Загрузка датасета**"]},{"cell_type":"markdown","source":["Функция для проверки на некоректные файлы"],"metadata":{"id":"nWQaYuoTl0ZL"}},{"cell_type":"code","source":["import os\n","import imghdr\n","path = \"/content/train/04\"\n","dir_ = os.listdir(path)\n","\n","for image in dir_:\n","    file = os.path.join(path,image)\n","    if not imghdr.what(file):\n","        print(file)\n","        os.remove(file) "],"metadata":{"id":"ARTRXu_5ly7H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671291284729,"user_tz":-180,"elapsed":4,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"9f6b78b3-e193-4b02-9c9a-77d6d0541e02"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/train/04/IMG_20221119_161130.jpg\n"]}]},{"cell_type":"markdown","metadata":{"id":"9-01MX0XFI4P"},"source":["Загрузим датасет изображений, который будем использовать для демонстрации работы моделей из модуля TensorFlow Applications"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kmzmy-so5uAx","executionInfo":{"status":"ok","timestamp":1677183162499,"user_tz":-180,"elapsed":21334,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"8e8782bb-80ef-43a1-9aa5-b5249cde6f62"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Разархивирование базы в папку bus:\n","!unzip -q '/content/drive/MyDrive/Стажировка/dataset.zip' -d '/content/train/'\n"],"metadata":{"id":"SZSQ5ooq6Xxu"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xG0Wvatl6vCy"},"source":["data_dir = '/content/train/'  # Присваиваем путь к базе в переменную data_dir\n","batch_size = 48             # Определяем batch size\n","image_size = (224, 224)     # Определяем размер изображений"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Создадим папку для тестовых файлов\n","!mkdir /content/test\n","!mkdir /content/test/01\n","!mkdir /content/test/02\n","!mkdir /content/test/03\n","!mkdir /content/test/04\n","!mkdir /content/test/05\n","!mkdir /content/test/06\n","!mkdir /content/test/07\n"],"metadata":{"id":"vzj3diMjXdOJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Перекинем 10% картинок из train в test \n","path01 = os.listdir(data_dir + '/01')    \n","path02 = os.listdir(data_dir + '/02')    \n","path03 = os.listdir(data_dir + '/03')     \n","path04 = os.listdir(data_dir + '/04')\n","path01 = os.listdir(data_dir + '/05')    \n","path02 = os.listdir(data_dir + '/06')    \n","path03 = os.listdir(data_dir + '/07')\n","\n","test_samle_size = int(len(path01)*0.1)\n","\n","source= '/content/train/01'\n","destination='/content/test/01'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/02'\n","destination='/content/test/02'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/03'\n","destination='/content/test/03'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/04'\n","destination='/content/test/04'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/05'\n","destination='/content/test/05'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/06'\n","destination='/content/test/06'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/07'\n","destination='/content/test/07'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n"],"metadata":{"id":"d7MVqShyYFRP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(7):\n","  train_paths = f'/content/train/0{i+1}'\n","  test_paths = f'/content/test/0{i+1}'\n","  print(len(os.listdir(train_paths)), f'images for training in class {i+1}')\n","  print(len(os.listdir(test_paths)), f' images for testing in class {i+1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"InNdw29tc74I","executionInfo":{"status":"ok","timestamp":1677183330909,"user_tz":-180,"elapsed":336,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"3767ed66-c793-45e0-a50e-a68feffe69b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["360 images for training in class 1\n","40  images for testing in class 1\n","360 images for training in class 2\n","40  images for testing in class 2\n","360 images for training in class 3\n","40  images for testing in class 3\n","360 images for training in class 4\n","40  images for testing in class 4\n","360 images for training in class 5\n","40  images for testing in class 5\n","242 images for training in class 6\n","40  images for testing in class 6\n","196 images for training in class 7\n","40  images for testing in class 7\n"]}]},{"cell_type":"markdown","source":["#Обрезка"],"metadata":{"id":"Un5-OVxR8M1b"}},{"cell_type":"code","source":["from keras.models import load_model\n","crop_model=load_model('drive/MyDrive/Стажировка/crop_model.h5')"],"metadata":{"id":"M3cxgapD8NWC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from PIL import Image\n","def load_image_np(path,target_size=(480,480)):\n","  image = Image.open(path)\n","  image = image.resize(target_size)\n","    \n","  return image"],"metadata":{"id":"vf4Yyo-B9cHk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["paths = ['test', 'train']\n","for i in paths:\n","  for j in os.listdir(i):\n","    for l in os.listdir(f'{i}/{j}'):\n","      img = load_image_np(f'{i}/{j}/{l}',target_size=(480,480))\n","      img.save(f'{i}/{j}/{l}')\n"],"metadata":{"id":"wkyMmmJn8arj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def crop_img(model, img, scale_coeff):\n","  pred = model.predict(tf.expand_dims(img, axis=0))[0]\n","  img = img * 255\n","  img = img.astype('int32')\n","  box = pred*scale_coeff\n","  box = box.astype('int32')\n","  #box.ymin, box.xmin, box.ymax, box.xmax\n","  x1, y1, x2, y2 = box[0], box[1], box[2], box[3]\n","  # считаем ширину и высоту рамки\n","  left = x1\n","  top = 480-y2\n","  right = 480-x2\n","  bottom = y1\n","\n","\n","  return left,top,right,bottom\n","\n"],"metadata":{"id":"jzD4df5FB5Tj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["paths = ['test', 'train']\n","for i in paths:\n","  for j in os.listdir(i):\n","    for l in os.listdir(f'{i}/{j}'):\n","      img = load_image_np(f'{i}/{j}/{l}',target_size=(480,480))\n","      img_np = np.array(img)/255\n","      \n","      pred = crop_model.predict(tf.expand_dims(img_np, axis=0))[0]\n","      box = pred*480\n","      box = box.astype('int32')\n","      x1, y1, x2, y2 = box[0], box[1], box[2], box[3]\n","      # считаем ширину и высоту рамки\n","      left = x1\n","      top = 480-y2\n","      right = 480-x2\n","      bottom = y1\n","\n","      cr_img = img.crop((left,top,right,bottom))\n","      cr_img = cr_img.resize((224,224))\n","      img.save(f'{i}/{j}/{l}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"pYdXZN4gBlD0","executionInfo":{"status":"error","timestamp":1677186689021,"user_tz":-180,"elapsed":40970,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"65547ba5-f018-49d7-b4f3-05a12166986e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 23ms/step\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-54-7e7a8644da3d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     18\u001b[0m       \u001b[0mcr_img\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbottom\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m       \u001b[0mcr_img\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcr_img\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m224\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m224\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m       \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{i}/{j}/{l}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, fp, format, **params)\u001b[0m\n\u001b[1;32m   2132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2133\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2134\u001b[0;31m             \u001b[0msave_handler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2135\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2136\u001b[0m             \u001b[0;31m# do what we can to clean up\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/PIL/JpegImagePlugin.py\u001b[0m in \u001b[0;36m_save\u001b[0;34m(im, fp, filename)\u001b[0m\n\u001b[1;32m    761\u001b[0m     \u001b[0mbufsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mImageFile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMAXBLOCK\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbufsize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexif\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mextra\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    762\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 763\u001b[0;31m     \u001b[0mImageFile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"jpeg\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrawmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbufsize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/PIL/ImageFile.py\u001b[0m in \u001b[0;36m_save\u001b[0;34m(im, fp, tile, bufsize)\u001b[0m\n\u001b[1;32m    526\u001b[0m                 \u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode_to_pyfd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 528\u001b[0;31m                 \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode_to_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfh\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbufsize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    529\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoder error %d when writing image file\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["#Обрезка"],"metadata":{"id":"MBi8TV1E8N9T"}},{"cell_type":"code","source":[],"metadata":{"id":"OwAJKfrzG1wV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"EqDLMMFKG1y8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"VuL3TEHLG11d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"92tqZfvRG14B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1UoqLXSdG16q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"10xnmMYVG19F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"v4kDuvIKG2AC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"U38bjTTtG2Cv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"IPclW-oiG2Ey"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hcD-KnBPMneg"},"source":["С помощью метода `image_dataset_from_directory` создадим обучающий и проверочный датасеты:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KX1Xc4atB6Yi","executionInfo":{"status":"ok","timestamp":1677183386362,"user_tz":-180,"elapsed":3648,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"97063dd3-11f0-4974-b35d-bd7e5db95e4f"},"source":["train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.2,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"training\",       # Помечаем, что выборка обучающая (90%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","\n","val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.2,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"validation\",     # Помечаем, что выборка проверочная (10%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","  \n","                             # Определяем имена классов:\n","class_names = train_ds.class_names\n","print(class_names)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2238 files belonging to 7 classes.\n","Using 1791 files for training.\n","Found 2238 files belonging to 7 classes.\n","Using 447 files for validation.\n","['01', '02', '03', '04', '05', '06', '07']\n"]}]},{"cell_type":"code","metadata":{"id":"uuR1CibAB6Yj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677183399901,"user_tz":-180,"elapsed":477,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"5ae288fa-8d2c-456f-a504-aff1b3dc8dd3"},"source":["# Предварительная подгрузка датасета для ускорения обучения и стабилизации\n","AUTOTUNE = tf.data.AUTOTUNE\n","\n","train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE) # Предварительная обучающая выборка\n","val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)     # Предварительная тестовая выборка\n","\n","print(train_ds)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<PrefetchDataset element_spec=(TensorSpec(shape=(None, 224, 224, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None,), dtype=tf.int32, name=None))>\n"]}]},{"cell_type":"markdown","metadata":{"id":"Y8mUUDsFB6Yk"},"source":["**Дополнительные слои** для модели, с помощью которых можно провести дополнительную аугментацию"]},{"cell_type":"code","metadata":{"id":"1PSraPY_B6Yk"},"source":["# Дополнительная аугментация в виде слоя для модели (для увеличения базы изображений)\n","data_augmentation = tf.keras.Sequential([\n","  tf.keras.layers.experimental.preprocessing.RandomZoom((-0.05, 0.05)), # Произвольное увеличение и уменьшение на 10%\n","  tf.keras.layers.experimental.preprocessing.RandomContrast(0.15),\n","  tf.keras.layers.experimental.preprocessing.RandomFlip(mode=\"horizontal_and_vertical\")])     # Изменение контраста изображений "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9-irE_TfQ0yM"},"source":["Дополнительная функция для отрисовки графиков обучения"]},{"cell_type":"code","metadata":{"id":"CL2rrjNzZsu_"},"source":["def plot_graph(train_acc, val_acc, train_loss, val_loss):\n","  '''\n","  Функция выведет на экран графики точности и ошибки на проверочной и обучающей выборках.\n","  '''\n","  sns.set(style='darkgrid', palette='dark') \n","  plt.figure(figsize=(16, 10))\n","  plt.subplot(2, 2, 1)\n","  plt.title('Точность', fontweight='bold')\n","  plt.plot(train_acc, label='Точность на обучащей выборке')\n","  plt.plot(val_acc, label='Точность на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Доля верных ответов')\n","  plt.legend()\n","\n","  plt.subplot(2, 2, 2)\n","  plt.title('Ошибка', fontweight='bold')\n","  plt.plot(train_loss, label='Ошибка на обучающей выборке')\n","  plt.plot(val_loss, label='Ошибка на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Ошибка')\n","  plt.legend()\n","\n","  plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YATKEZ4LB6Yk"},"source":["#MobileNetV1"]},{"cell_type":"code","metadata":{"id":"sIPvMAe3B6Yl"},"source":["preprocess_input = tf.keras.applications.mobilenet.preprocess_input # Нормализация данных на вход в соответствии требованиям модели\n","gc.collect()                                                     # Сборка мусора для освобождения памяти\n","image_shape = image_size + (3,)                                  # Определяем входную размерность в соответствии требованиям модели\n","global_average_layer = tf.keras.layers.GlobalAveragePooling2D()  # Задаем слой GlobalAveragePooling2D\n","prediction_layer = tf.keras.layers.Dense(len(class_names))       # Задаем выходной слой на нужное нам количество классов\n","\n","\n","                                                                 # Создаем базовую модель NASNetMobile:\n","base_model = tf.keras.applications.MobileNetV2(input_shape=image_shape,\n","                         include_top=False,                      # Не включаем верхнюю часть модели, чтобы можно было использовать свои входные размерности\n","                         weights='imagenet')                     # Используем веса уже предобученной модели на базе Imagenet\n","\n","\n","                                                                 # Собираем полную модель, состоящую из всех наших определенных слоев и базовой модели NASNetMobile:\n","inputs = tf.keras.Input(shape=(image_shape))\n","x = data_augmentation(inputs)\n","x = preprocess_input(x)\n","x = base_model(x, training=False)\n","x = global_average_layer(x)\n","x = tf.keras.layers.Dropout(0.2)(x)\n","outputs = prediction_layer(x)\n","model = tf.keras.Model(inputs, outputs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_learning_rate = 0.0001                                                                        \n","# Компилируем модель:\n","model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),  # Оптимизатор Adam c заданным ранее шагом обучения\n","              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),  # Ошибка SparseCategoricalCrossentropy\n","              metrics=['accuracy'])                                                  # Метрика Accuracy"],"metadata":{"id":"yxe8XmieUQVR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!mkdir /content/drive/MyDrive/Стажировка/MobilenetV2"],"metadata":{"id":"BYkAQkqsukKE"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"xaCmdfTPB6Yl","executionInfo":{"status":"error","timestamp":1677183564424,"user_tz":-180,"elapsed":139432,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"79681823-103c-4404-f16f-52db42f6740d"},"source":["epochs = 15    \n","\n","#Задаем коллбеки  \n","history_path = '/content/drive/MyDrive/Стажировка/MobilenetV2/model_history_log2.csv'\n","weights_path = '/content/drive/MyDrive/Стажировка/MobilenetV2/MobileNetV2.h5'\n","\n","csv_logger = CSVLogger(history_path, append=True)\n","# уменьшение lr\n","reduceLROnPlateau = ReduceLROnPlateau(monitor='val_loss', factor=0.7, patience=3, verbose=1)\n","# сохранение весов\n","model_checkpoint = ModelCheckpoint(weights_path, monitor='val_loss', save_best_only=True, verbose=1)\n","\n","\n","MobileNetV2 = model.fit(train_ds,                 # Обучающая выборка\n","                        epochs=epochs,            # Количество эпох обучения, заданное ранее\n","                        validation_data=val_ds,\n","                        callbacks=[csv_logger,\n","                                   reduceLROnPlateau,\n","                                   model_checkpoint])   # Проверочная выборка\n","\n","                                                    # После того, как пройдет обучение, выведем графики точности и ошибки:\n","plot_graph(MobileNetV2.history['accuracy'],\n","           MobileNetV2.history['val_accuracy'],\n","           MobileNetV2.history['loss'],\n","           MobileNetV2.history['val_loss'])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Using a while_loop for converting RngReadAndSkip cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomUniformV2 cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting ImageProjectiveTransformV3 cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting RngReadAndSkip cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomUniformFullIntV2 cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomGetKeyCounter cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomUniformV2 cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting RngReadAndSkip cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomUniformV2 cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting ImageProjectiveTransformV3 cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting RngReadAndSkip cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting Bitcast cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomUniformFullIntV2 cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomGetKeyCounter cause there is no registered converter for this op.\n","WARNING:tensorflow:Using a while_loop for converting StatelessRandomUniformV2 cause there is no registered converter for this op.\n"]},{"output_type":"stream","name":"stdout","text":["38/38 [==============================] - ETA: 0s - loss: 0.6552 - accuracy: 0.7739\n","Epoch 1: val_loss improved from inf to 0.84442, saving model to /content/drive/MyDrive/Стажировка/MobilenetV2/MobileNetV2.h5\n","38/38 [==============================] - 57s 602ms/step - loss: 0.6552 - accuracy: 0.7739 - val_loss: 0.8444 - val_accuracy: 0.7114 - lr: 1.0000e-04\n","Epoch 2/15\n","38/38 [==============================] - ETA: 0s - loss: 0.0597 - accuracy: 0.9832\n","Epoch 2: val_loss did not improve from 0.84442\n","38/38 [==============================] - 18s 478ms/step - loss: 0.0597 - accuracy: 0.9832 - val_loss: 0.8800 - val_accuracy: 0.6421 - lr: 1.0000e-04\n","Epoch 3/15\n","38/38 [==============================] - ETA: 0s - loss: 0.0063 - accuracy: 1.0000\n","Epoch 3: val_loss did not improve from 0.84442\n","38/38 [==============================] - 18s 474ms/step - loss: 0.0063 - accuracy: 1.0000 - val_loss: 1.0774 - val_accuracy: 0.6376 - lr: 1.0000e-04\n","Epoch 4/15\n","38/38 [==============================] - ETA: 0s - loss: 0.0034 - accuracy: 1.0000\n","Epoch 4: ReduceLROnPlateau reducing learning rate to 6.999999823165126e-05.\n","\n","Epoch 4: val_loss did not improve from 0.84442\n","38/38 [==============================] - 18s 472ms/step - loss: 0.0034 - accuracy: 1.0000 - val_loss: 1.2612 - val_accuracy: 0.6443 - lr: 1.0000e-04\n","Epoch 5/15\n","38/38 [==============================] - ETA: 0s - loss: 0.0018 - accuracy: 1.0000\n","Epoch 5: val_loss did not improve from 0.84442\n","38/38 [==============================] - 18s 475ms/step - loss: 0.0018 - accuracy: 1.0000 - val_loss: 1.2086 - val_accuracy: 0.6644 - lr: 7.0000e-05\n","Epoch 6/15\n","19/38 [==============>...............] - ETA: 8s - loss: 0.0011 - accuracy: 1.0000"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-283ab7ed9f10>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m MobileNetV2 = model.fit(train_ds,                 # Обучающая выборка\n\u001b[0m\u001b[1;32m     15\u001b[0m                         \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m            \u001b[0;31m# Количество эпох обучения, заданное ранее\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m                         \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_ds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1648\u001b[0m                         ):\n\u001b[1;32m   1649\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1650\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1651\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1652\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    878\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    879\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 880\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    910\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 912\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    913\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    132\u001b[0m       (concrete_function,\n\u001b[1;32m    133\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m--> 134\u001b[0;31m     return concrete_function._call_flat(\n\u001b[0m\u001b[1;32m    135\u001b[0m         filtered_flat_args, captured_inputs=concrete_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m    136\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1743\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1744\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1745\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1746\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1747\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    376\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    379\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     53\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["ПРОВЕРКА НА ТЕСТОВОМ ДАТАСЕТЕ"],"metadata":{"id":"WAbHwmF0hvQa"}},{"cell_type":"code","metadata":{"id":"h-tCthljhsUp"},"source":["test_dir = '/content/test/'  # Присваиваем путь к базе в переменную data_dir"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  test_dir,                  # Путь к изображениям\n","  validation_split = 0.9999,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"training\",       # Помечаем, что выборка обучающая (90%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZA3dZiF0iWNf","executionInfo":{"status":"ok","timestamp":1671292738905,"user_tz":-180,"elapsed":10,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"874b751e-de91-43e5-c1d5-b6f3a22d4711"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 160 files belonging to 4 classes.\n","Using 1 files for training.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671292748869,"user_tz":-180,"elapsed":559,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"4cf199b7-8f29-470e-a50d-3307d42ca3fb","id":"0TEDqTMChsUr"},"source":["val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  test_dir,                  # Путь к изображениям\n","  validation_split = 0.9999,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"validation\",     # Помечаем, что выборка проверочная (10%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","  \n","                             # Определяем имена классов:\n","class_names = train_ds.class_names\n","print(class_names)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 160 files belonging to 4 classes.\n","Using 159 files for validation.\n","['01', '02', '03', '04']\n"]}]},{"cell_type":"code","metadata":{"id":"vfpfkEEZhsUs"},"source":["val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)     # Предварительная тестовая выборка"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Проверка модели на тестовых картинках не участвовавших в обучении\n","scores = model.evaluate(val_ds, verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TxyXQ122zGzq","executionInfo":{"status":"ok","timestamp":1671292752559,"user_tz":-180,"elapsed":468,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"ea4a6db8-1048-4059-a3e1-3e7bc5b1f946"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 0s 62ms/step - loss: 0.0018 - accuracy: 1.0000\n"]}]},{"cell_type":"code","source":["print('Accuracy on test data:', round(scores[1],4) * 100, '%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ChJLPfimzXAj","executionInfo":{"status":"ok","timestamp":1671292754428,"user_tz":-180,"elapsed":4,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"25db28b0-8ded-406f-f917-e26f7affb775"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy on test data: 100.0 %\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"-lMJA8CWw33m"},"execution_count":null,"outputs":[]}]}