{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Обработка текстов с помощью bag of words сетей | ДЗ ","provenance":[{"file_id":"1KMLe5j6dgq0kTg1kC9ytcpsc7CRzo7pT","timestamp":1634657976010},{"file_id":"1XnZ0jGYerRTX2laoipoC4m8v19SgMmy6","timestamp":1634561486636}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"3hahJ-ONkfmR"},"source":["Дорогой студент!\n","\n","В домашнем задании Ultra Pro занятия по обработке тектсов с помощью НС мы ставим задачу распознать уже не 6, как ранее, а целых 20 русских писателей! Это подразумевает и больший размер базы для обучения соответственно. Ячейка для скачивания базы уже включена в ноутбук задания.\n","\n","\n"," В задании необходимо выполнить следующие пункты:\n","\n","  1. Загрузить саму базу по ссылке и подговить файлы базы для обработки.\n","  2. Создать обучающую и проверочную выборки, обратив особое внимание на балансировку базы: количество примеров каждого класса должно быть примерно одного порядка. При этом для разбивки необходимо применить цикл.\n","  3. Подготовьте выборки для обучения и обучите сеть. Добейтесь результата точности сети не менее 95% на проверочной выборке модели Bag of Words и 75-80% - для модели Embedding.\n","   \n"]},{"cell_type":"markdown","metadata":{"id":"QolTxRtFWm3r"},"source":["## Загрузка данных"]},{"cell_type":"code","metadata":{"id":"pBys9ajOW43u","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1634659478810,"user_tz":-180,"elapsed":1170,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"4e65490a-c3e8-44ae-cd6d-a2ab9f607119"},"source":["import gdown                                      # Подключим функцию gdown\n","file_id = '1TeJxgfr2ZEY5Elil7XgM8WW7njI9Toqj'     # Обозначим ID файла в рамках ссылки\n","file_name = 'writers.zip'                         # Обозначим имя архива с базой\n","path = 'https://drive.google.com/uc?id='+file_id  # Укажем директорию для скачивания: ссылка на гугл-диск + ID файла\n","gdown.download(path, file_name, quiet=False)      # Скачивание файла"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://drive.google.com/uc?id=1TeJxgfr2ZEY5Elil7XgM8WW7njI9Toqj\n","To: /content/writers.zip\n","100%|██████████| 28.5M/28.5M [00:00<00:00, 219MB/s]\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'writers.zip'"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aB1K6RMKdgNa","executionInfo":{"status":"ok","timestamp":1634659479900,"user_tz":-180,"elapsed":1099,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"338beb5f-10a8-4a1f-af51-c8ccf93993f5"},"source":["wrt_path = '/content/writers'\n","!rm -rf {wrt_path}\n","!unzip -qo writers.zip -d writers/ "],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["writers/Русские писатели/:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Беляев.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨С╨╡╨╗╤П╨╡╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Булгаков.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨С╤Г╨╗╨│╨░╨║╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Васильев.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Т╨░╤Б╨╕╨╗╤М╨╡╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Гоголь.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨У╨╛╨│╨╛╨╗╤М.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Гончаров.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨У╨╛╨╜╤З╨░╤А╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Горький.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨У╨╛╤А╤М╨║╨╕╨╣.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Грибоедов.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨У╤А╨╕╨▒╨╛╨╡╨┤╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Достоевский.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Ф╨╛╤Б╤В╨╛╨╡╨▓╤Б╨║╨╕╨╣.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Каверин.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Ъ╨░╨▓╨╡╤А╨╕╨╜.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Катаев.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Ъ╨░╤В╨░╨╡╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Куприн.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Ъ╤Г╨┐╤А╨╕╨╜.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Лермонтов.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Ы╨╡╤А╨╝╨╛╨╜╤В╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Лесков.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Ы╨╡╤Б╨║╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Носов.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Э╨╛╤Б╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Пастернак.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Я╨░╤Б╤В╨╡╤А╨╜╨░╨║.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Пушкин.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨Я╤Г╤И╨║╨╕╨╜.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Толстой.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨в╨╛╨╗╤Б╤В╨╛╨╣.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Тургенев.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨в╤Г╤А╨│╨╡╨╜╨╡╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Чехов.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨з╨╡╤Е╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n","writers/Русские писатели/Шолохов.txt:  mismatching \"local\" filename (writers/╨а╤Г╤Б╤Б╨║╨╕╨╡ ╨┐╨╕╤Б╨░╤В╨╡╨╗╨╕/╨и╨╛╨╗╨╛╤Е╨╛╨▓.txt),\n","         continuing with \"central\" filename version\n"]}]},{"cell_type":"code","metadata":{"id":"yPVlJl82gwdy","executionInfo":{"status":"ok","timestamp":1634659483119,"user_tz":-180,"elapsed":3224,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["# Работа с массивами данных\n","import numpy as np \n","\n","# Функции-утилиты для работы с категориальными данными\n","from tensorflow.keras import utils\n","\n","from tensorflow import keras\n","\n","# Класс для конструирования последовательной модели нейронной сети\n","from tensorflow.keras.models import Sequential\n","\n","# Основные слои\n","from tensorflow.keras.layers import Dense, Dropout, SpatialDropout1D, BatchNormalization, Embedding, Flatten, Activation, LSTM \n","\n","# Токенизатор для преобразование текстов в последовательности\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","\n","# Матрица ошибок классификатора\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","\n","# Загрузка датасетов из облака google\n","import gdown\n","\n","# Функции операционной системы\n","import os\n","\n","# Работа со временем\n","import time\n","\n","# Регулярные выражения\n","import re\n","\n","# Запись в файлы и чтение из файлов структур данных Python\n","import pickle\n","\n","# Отрисовка графиков\n","import matplotlib.pyplot as plt\n","\n","%matplotlib inline"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"r5a69YD7gnaL","executionInfo":{"status":"ok","timestamp":1634659483126,"user_tz":-180,"elapsed":11,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["FILE_DIR  = 'writers/writers/Русские писатели'                     # Папка с текстовыми файлами\n","SIG_TRAIN = 'обучающая'                   # Признак обучающей выборки в имени файла\n","SIG_TEST  = 'тестовая'"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"pypBE9Ljgqsh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634659484306,"user_tz":-180,"elapsed":1189,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"f307c2d2-8aea-4518-d7b8-16fcf1fe8fdb"},"source":["# Загрузка датасета. Добавляются имена классов и соответствующие тексты.\n","# Все тексты преобразуются в строку и объединяются для каждого класса и выборки\n","CLASS_LIST = []\n","text_train = []\n","text_test = []\n","\n","for file_name in os.listdir(FILE_DIR):\n","    # Выделение имени класса и типа выборки из имени файла\n","    m = re.match('[a-я]+', file_name)\n","    if m:\n","      class_name = m[0]\n","      if class_name not in CLASS_LIST:\n","            print(f'Добавление класса \"{class_name}\"')\n","            CLASS_LIST.append(class_name)\n","            # Инициализация соответствующих классу строк текста\n","            text_train.append('')\n","            text_test.append('')\n","\n","            # Поиск индекса класса для добавления содержимого файла в выборку\n","            cls = CLASS_LIST.index(class_name)\n","            print(f'Добавление файла \"{file_name}\" в класс \"{CLASS_LIST[cls]}\".')\n","            with open(f'{FILE_DIR}/{file_name}', 'r') as f:\n","                # Загрузка содержимого файла в строку\n","                text = f.read()\n","            # Добавление текста к соответствующей выборке класса. Концы строк заменяются на пробел\n","            text_train[cls] += ' ' + text.replace('\\n', ' ')\n","            text_test[cls] += ' ' + text.replace('\\n', ' ')\n","# Определение количества классов\n","CLASS_COUNT = len(CLASS_LIST)\n"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Добавление класса \"Тургенев\"\n","Добавление файла \"Тургенев.txt\" в класс \"Тургенев\".\n","Добавление класса \"Беляев\"\n","Добавление файла \"Беляев.txt\" в класс \"Беляев\".\n","Добавление класса \"Каверин\"\n","Добавление файла \"Каверин.txt\" в класс \"Каверин\".\n","Добавление класса \"Шолохов\"\n","Добавление файла \"Шолохов.txt\" в класс \"Шолохов\".\n","Добавление класса \"Грибоедов\"\n","Добавление файла \"Грибоедов.txt\" в класс \"Грибоедов\".\n","Добавление класса \"Пушкин\"\n","Добавление файла \"Пушкин.txt\" в класс \"Пушкин\".\n","Добавление класса \"Лесков\"\n","Добавление файла \"Лесков.txt\" в класс \"Лесков\".\n","Добавление класса \"Гоголь\"\n","Добавление файла \"Гоголь.txt\" в класс \"Гоголь\".\n","Добавление класса \"Булгаков\"\n","Добавление файла \"Булгаков.txt\" в класс \"Булгаков\".\n","Добавление класса \"Пастернак\"\n","Добавление файла \"Пастернак.txt\" в класс \"Пастернак\".\n","Добавление класса \"Чехов\"\n","Добавление файла \"Чехов.txt\" в класс \"Чехов\".\n","Добавление класса \"Лермонтов\"\n","Добавление файла \"Лермонтов.txt\" в класс \"Лермонтов\".\n","Добавление класса \"Достоевский\"\n","Добавление файла \"Достоевский.txt\" в класс \"Достоевский\".\n","Добавление класса \"Васильев\"\n","Добавление файла \"Васильев.txt\" в класс \"Васильев\".\n","Добавление класса \"Носов\"\n","Добавление файла \"Носов.txt\" в класс \"Носов\".\n","Добавление класса \"Куприн\"\n","Добавление файла \"Куприн.txt\" в класс \"Куприн\".\n","Добавление класса \"Горький\"\n","Добавление файла \"Горький.txt\" в класс \"Горький\".\n","Добавление класса \"Катаев\"\n","Добавление файла \"Катаев.txt\" в класс \"Катаев\".\n","Добавление класса \"Гончаров\"\n","Добавление файла \"Гончаров.txt\" в класс \"Гончаров\".\n","Добавление класса \"Толстой\"\n","Добавление файла \"Толстой.txt\" в класс \"Толстой\".\n"]}]},{"cell_type":"code","metadata":{"id":"T0UKF59usvRl","executionInfo":{"status":"ok","timestamp":1634659484307,"user_tz":-180,"elapsed":16,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["train_data =[]\n","for text_tr in text_train:\n","  length = int(len(text_tr) * 0.7)\n","  #print(len(text_tr))\n","  text_tr = text_tr[:length]\n","  #print(len(text_tr))\n","  #print()\n","  train_data.append(text_tr)\n","\n","test_data =[]\n","for text_ts in text_test:\n","  length = int(len(text_ts) * 0.7)\n","  #print(len(text_ts))\n","  text = text_ts[length:]\n","  #print(len(text_ts))\n","  #print()\n","  test_data.append(text)\n","\n","\n","#for i in range(len(train_data)):\n","  #print(len(train_data[i]))\n","  #print(len(test_data[i]))\n","  #print()\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"dOisy-0QlmPT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634659484309,"user_tz":-180,"elapsed":17,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"48d919e9-0200-42b8-89f2-839e3d7ce5d9"},"source":["# Прочитанные классы текстов\n","print(CLASS_LIST)\n","\n","# Количество текстов в обучающей выборке\n","print(len(train_data))\n","\n","# Количество символов в одном из текстов обучающей выборки\n","print(len(train_data[0]))\n","print(len(test_data[0]))"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["['Тургенев', 'Беляев', 'Каверин', 'Шолохов', 'Грибоедов', 'Пушкин', 'Лесков', 'Гоголь', 'Булгаков', 'Пастернак', 'Чехов', 'Лермонтов', 'Достоевский', 'Васильев', 'Носов', 'Куприн', 'Горький', 'Катаев', 'Гончаров', 'Толстой']\n","20\n","1386124\n","594054\n"]}]},{"cell_type":"code","metadata":{"id":"7UZgaD5Kl5Lx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634659484310,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"66514cc4-202c-4d3f-d6d4-8452d4d1bf1c"},"source":["for cls in range(CLASS_COUNT):\n","    print(f'Класс: {CLASS_LIST[cls]}')\n","    print(f'  train: {train_data[cls][:200]}')\n","    print(f'  test: {test_data[cls][:200]}')\n","    print()"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Класс: Тургенев\n","  train:  Дворянское гнездо Весенний, светлый день клонился к вечеру; небольшие розовые тучки стояли высоко в ясном небе и, казалось, не плыли мимо, а уходили в самую глубь лазури.  Перед раскрытым окном краси\n","  test: ученными и заплетенными хвостами. Аркадий глядел на дорогу и улыбался, сам не зная чему.  — Поздравь меня, — воскликнул вдруг Базаров, — сегодня 22 июня, день моего ангела. Посмотрим, как-то он обо мн\n","\n","Класс: Беляев\n","  train:  Часть первая  I. На палубе   Большой трансатлантический пароход «Вениамин Франклин» стоял в генуэзской гавани, готовый к отплытию. На берегу была обычная суета, слышались крики разноязычной, пестрой \n","  test: а ужаснулась, увидев «холосую девуску» в объятиях отвратительного спрута. Пунь хотела броситься на помощь своей любимице, но не могла этого сделать: гребной винт пришлось остановить, и давление воды б\n","\n","Класс: Каверин\n","  train:  Снегурочка и космополитизм Рассказ  Задумывались ли вы когда-нибудь о том, какой сложный путь проходит в литературе замысел до его воплощения?  В 1949 году на советскую театральную критику свалилось \n","  test:  военкором писать пьесы и сценарии, следить за их постановкой, писать рассказы, собирать материал, обдумывать и писать новые главы второго тома романа «Два капитана», работать на радио и выступать с л\n","\n","Класс: Шолохов\n","  train:    Собрание сочинений в восьми томах  Том 1. Рассказы   I  На столе гильзы патронные, пахнущие сгоревшим порохом, баранья кость, полевая карта, сводка, уздечка наборная с душком лошадиного пота, краюх\n","  test: ? Я проснулась — первые кочета кричали, а тебя ишо все не было… — Кудинов приезжал. Ходил к нему по своим военным делам совет держать. Это — не твоего бабьего ума дело. — А чего же он к нам не заехал \n","\n","Класс: Грибоедов\n","  train:  ГОРЕ ОТ УМА* ДЕЙСТВУЮЩИЕ: 33 Павел Афанасьевич Фамусов, управляющий в казенном месте. София Павловна, дочь его. Лиза, служанка. Алексей Степанович Молчалин, секретарь Фамусова, живущий у него в доме.\n","  test:  в великолепном убранстве, цветной тишлай сверх панциря, кинжал, шашка, богатые седло и за плечами лук с колчаном. 524 Спешились, вошли в приемную, тут объявлена им воля главнокомандующего. Здесь арес\n","\n","Класс: Пушкин\n","  train:   В одной из отдаленных наших губерний находилось имение Ивана Петровича Берестова. В молодости своей служил он в гвардии, вышел в отставку в начале 1797 года, уехал в свою деревню и с тех пор он отту\n","  test: ь какое-то чутье, которое заменяет ему недостаток развития и которое заставляет его окончательно становиться на стороне только истинно прекрасного и великого. «Вечеров на хуторе» разошлось два издания\n","\n","Класс: Лесков\n","  train:  РАЗБОЙНИК Ехали мы к Макарью на ярмарку*. Тарантас был огромный, тамбовский. Сидело нас пятеро: я, купец из Нижнего Ломова*, приказчик одного астраханского торгового дома, два молодца, состоящие при \n","  test: осную соломинку. Перед нею стоял Брюхачев и Мареичка. Брюхачев доказывал, что студенты поступают глупо, а маркиза слушала: она никак не могла определить, какую роль в подобном деле приняла бы madame Р\n","\n","Класс: Гоголь\n","  train:  Гоголь Николай Васильевич. Мертвые души. Поэма.  We may guess that it was a pretty apt expression, since long after the man had become lost to view Chichikov was still laughing in his britchka. And, \n","  test: жды (взять, к примеру, хотя бы описание бекеши Ивана Ивановича в начале повести). Так же поэтична и лирична природа: «…тень от дерев ложится чернее, цветы и умолкнувшая трава душистее, и сверчки, неуг\n","\n","Класс: Булгаков\n","  train:  Черновики романа. Тетрадь 1 1928 - 1929 гг. РАЗГОВОР ПО ДУШАМ - Значит, гражданин Поротый, две тысячи рублей вы уплатили гражданину Иванову за дом в Серпухове? - Да, так. Так точно, - уплатил я. Толь\n","  test: очему не могут желтые мозги? Впрочем, они в костяном ящике и прикрыты волосами и фуражкой с белым верхом. Лежат внутри красивые полушария с извилинами и молчат.   А копейки - брень-брень.   У самого к\n","\n","Класс: Пастернак\n","  train:   Доктор Живаго    И ДЫШАТ ПОЧВА И СУДЬБА            Спустя два года после завершения романа \"Доктор Живаго\" Борис Пастернак писал:            \"Я думаю, несмотря на привычность всего того, что продолж\n","  test: торопливо стаскивал сапоги и одежду, проводник уже скинул все и в одних холщовых подштанниках спустился к воде. Попробовал ее корявой ступней:  — Холодна купель.  — Куда собрался, борода? — строго окл\n","\n","Класс: Чехов\n","  train:   Письмо к ученому соседу Дорогой Соседушка.  Максим… (забыл как по батюшке, извените великодушно!) Извените и простите меня старого старикашку и нелепую душу человеческую за то, что осмеливаюсь Вас б\n","  test: там задвигались какие-то тени.  «Не ждали!» — подумал я.  Вернувшись к себе в номер, я разделся, выпил сантуринского, закусил свежей зернистой икрой, которую купил днем на базаре, не спеша лег в посте\n","\n","Класс: Лермонтов\n","  train:  Герой нашего времени   Во всякой книге предисловие есть первая и вместе с тем последняя вещь; оно или служит объяснением цели сочинения, или оправданием и ответом на критики. Но обыкновенно читателям\n","  test: ости). \t\tА там голодный аппетит \t\tХвалить вас будет с восхищеньем; \t\tА там желудок вас сварит, \t\tА там — но с вашим позволеньем \t\tЯ здесь окончу мой рассказ; \t\tИ этого довольно с вас.  — Adieu…. je ne\n","\n","Класс: Достоевский\n","  train:  СКАЗАНИЕ ОТЦА НАШЕГО АГАПИЯ,  ЗАЧЕМ ОСТАВЛЯЮТ СВОИ СЕМЬИ, И ДОМА,  И ЖЕН, И ДЕТЕЙ И, ВЗЯВ КРЕСТ, СЛЕДУЮТ  ЗА ГОСПОДОМ, КАК ВЕЛИТ ЕВАНГЕЛИЕ  Господи, благослови, отче!  Отец наш Агапий с детства привы\n","  test:  таких работников несколько. Где-нибудь вне острога существует такой человек – из солдат, из мещан, иногда даже девка, – который на деньги антрепренера и за известную премию, сравнительно очень немалу\n","\n","Класс: Васильев\n","  train:  А зори здесь тихие…1  В списках не значилсяЧасть первая1   На 171-м разъезде уцелело двенадцать дворов, пожарный сарай да приземистый, длинный пакгауз, выстроенный в начале века из подогнанных валуно\n","  test: степей. И православный князь Михаил Черниговский уже дал согласие участвовать во вселенском Лионском соборе.  Гость, не обозначив дня отъезда, вежливо поучаствовал в предложенной Сбыславом охоте, ловк\n","\n","Класс: Носов\n","  train:  КАК ВИНТИК И ШПУНТИК СДЕЛАЛИ ПЫЛЕСОС   Кто читал книгу «Приключение Незнайки», тот знает, что у Незнайки было много друзей — таких же, как он, маленьких человечков.  Среди них было два механика — Вин\n","  test: сать нас в одну бригаду. Мы ещё в городе условились, что будем работать вместе и рыбу ловить вместе. Всё у нас было общее: и лопаты и удочки.  — Ребята,— сказал Вадик Зайцев,— я предлагаю сделать крас\n","\n","Класс: Куприн\n","  train:  Яма  Знаю, что многие найдут эту повесть безнравственной и неприличной, тем не менее от всего сердца посвящаю ее матерям и юношеству.      А. К.    Часть первая    I  Давным-давно, задолго до железны\n","  test: росто одна буква «К». Не было никакого сомнения, что дневник Лапшина и письма Кэт писаны приблизительно в одно и то же время и относятся к одним и тем же событиям, происходившим лет за двадцать пять д\n","\n","Класс: Горький\n","  train:  МАКАР ЧУДРА* С моря дул влажный, холодный ветер, разнося по степи задумчивую мелодию плеска набегавшей на берег волны и шелеста прибрежных кустов. Изредка его порывы приносили с собой сморщенные, жёл\n","  test: бок, как будто она смотрела внутрь себя. И походка у нее была странная – Наталья двигалась по просторным комнатам дома медленно и осторожно, как будто что-то невидимое стесняло свободу ее движений. До\n","\n","Класс: Катаев\n","  train:  Критико-биографический очерк   РАССКАЗЫ     ВЕСЕННИЙ ЗВОН    I   - Господи, как он вырос, совсем молодым человеком стал. Я тебя помню еще во-от таким малюсеньким. - При этом жест рукой, показывающий \n","  test: . Установить контроль над населением. Проверить боеспособность дальнобойных групп и машины обратного тока. Все суда, принадлежащие острову, подтянуть к берегу и установить по диспозиции семьсот одинна\n","\n","Класс: Гончаров\n","  train:  Обломов ЧАСТЬ ПЕРВАЯ I В Гороховой улице, в одном из больших домов, народонаселения которого стало бы на целый уездный город, лежал утром в постели, на своей квартире, Илья Ильич Обломов.  Это был че\n","  test: вы, что такое грот-мачта и что ведет за собой ее падение?  Грот-мачта – это бревно, фут во сто длины и до 800 пуд весом, которое держится протянутыми с вершины ее к сеткам толстыми смолеными канатами,\n","\n","Класс: Толстой\n","  train:   ГЛАВА I. ПОЕЗДКА НА ДОЛГИХ.  Снова поданы два экипажа к крыльцу Петровского дома; один – карета, в которую садятся Мими, Катенька, Любочка, горничная и сам приказчик Яков, на козлах; другой – бричка\n","  test: с чем-то рублей. Она не помнила именно сколько, но, кажется, немец высчитал до четверти копейки.  Помещик при упоминании о выгодах хозяйства Свияжского улыбнулся, очевидно, зная, какой мог быть барыш \n","\n"]}]},{"cell_type":"code","metadata":{"id":"9hhlEtxS3yxE","executionInfo":{"status":"ok","timestamp":1634659484313,"user_tz":-180,"elapsed":13,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["VOCAB_SIZE = 20000                        # Объем словаря для токенизатора\n","WIN_SIZE   = 1000                         # Длина отрезка текста (окна) в словах\n","WIN_HOP    = 100"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"vvjGkeCW33up","executionInfo":{"status":"ok","timestamp":1634659484642,"user_tz":-180,"elapsed":341,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["class timex:\n","    def __enter__(self):\n","        # Фиксация времени старта процесса\n","        self.t = time.time()\n","        return self\n","\n","    def __exit__(self, type, value, traceback):\n","        # Вывод времени работы\n","        print('Время обработки: {:.2f} с'.format(time.time() - self.t))"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ht3gktPu3-Jh","executionInfo":{"status":"ok","timestamp":1634659494208,"user_tz":-180,"elapsed":9568,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"6161ee7a-9cc9-4df7-bd76-64217baf897a"},"source":["# Токенизация и построение частотного словаря по обучающим текстам\n","with timex():\n","    # Используется встроенный в Keras токенизатор для разбиения текста и построения частотного словаря\n","    tokenizer = Tokenizer(num_words=VOCAB_SIZE, filters='!\"#$%&()*+,-–—./…:;<=>?@[\\\\]^_`{|}~«»\\t\\n\\xa0\\ufeff', \n","                          lower=True, split=' ', oov_token='неизвестное_слово', char_level=False)\n","\n","    # Использованы параметры:\n","    # num_words   - объем словаря\n","    # filters     - убираемые из текста ненужные символы\n","    # lower       - приведение слов к нижнему регистру\n","    # split       - разделитель слов\n","    # char_level  - указание разделять по словам, а не по единичным символам\n","    # oov_token   - токен для слов, которые не вошли в словарь\n","\n","    # Построение частотного словаря по обучающим текстам\n","    tokenizer.fit_on_texts(train_data)\n","    \n","    # Построение словаря в виде пар слово - индекс\n","    items = list(tokenizer.word_index.items())"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Время обработки: 10.02 с\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WTx8CuBB4kgs","executionInfo":{"status":"ok","timestamp":1634659506327,"user_tz":-180,"elapsed":12137,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"174a970a-5ba8-4df4-97b0-05d0f1351df1"},"source":["# Преобразование обучающих и проверочных текстов в последовательность индексов согласно частотному словарю\n","with timex():\n","    seq_train = tokenizer.texts_to_sequences(train_data)\n","    seq_test = tokenizer.texts_to_sequences(test_data)\n","\n","    print(\"Фрагмент обучающего текста:\")\n","    print(\"В виде оригинального текста:              \", train_data[1][:101])\n","    print(\"Он же в виде последовательности индексов: \", seq_train[1][:20])"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Фрагмент обучающего текста:\n","В виде оригинального текста:                Часть первая  I. На палубе   Большой трансатлантический пароход «Вениамин Франклин» стоял в генуэзск\n","Он же в виде последовательности индексов:  [731, 1241, 1610, 5, 5428, 405, 1, 2472, 1, 1, 272, 3, 1, 9742, 7935, 14, 1, 5, 811, 59]\n","Время обработки: 11.98 с\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ulwzdZSH4_Di","executionInfo":{"status":"ok","timestamp":1634659506328,"user_tz":-180,"elapsed":26,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"60bcab1f-e50f-4957-f9ad-f64604724f7d"},"source":["def print_text_stats(title, texts, sequences, class_labels=CLASS_LIST):\n","    # Суммарное количество символов и слов в тексте\n","    chars = 0\n","    words = 0\n","\n","    print(f'Статистика по {title} текстам:')\n","\n","    # Вывод итогов по всем классам данного набора текстов и их последовательностей индексов\n","    for cls in range(len(class_labels)):\n","        print('{:<15} {:9} символов,{:8} слов'.format(class_labels[cls],\n","                                                      len(texts[cls]),\n","                                                      len(sequences[cls])))\n","        chars += len(texts[cls])\n","        words += len(sequences[cls])\n","\n","    print('----')\n","    print('{:<15} {:9} символов,{:8} слов\\n'.format('В сумме', chars, words))\n","\n","# Вывод итогов по текстам\n","print_text_stats('обучающим', train_data, seq_train)\n","print_text_stats('тестовым', test_data, seq_test)"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Статистика по обучающим текстам:\n","Тургенев          1386124 символов,  214852 слов\n","Беляев            1578677 символов,  236199 слов\n","Каверин           1394981 символов,  213254 слов\n","Шолохов           2370387 символов,  348629 слов\n","Грибоедов          678374 символов,  108026 слов\n","Пушкин            2385819 символов,  363823 слов\n","Лесков            1506549 символов,  239229 слов\n","Гоголь            1375580 символов,  212784 слов\n","Булгаков          1400744 символов,  208719 слов\n","Пастернак         2162598 символов,  321433 слов\n","Чехов             4628138 символов,  726008 слов\n","Лермонтов         1380778 символов,  214689 слов\n","Достоевский       3625265 символов,  568113 слов\n","Васильев          2066954 символов,  312364 слов\n","Носов             1679589 символов,  257886 слов\n","Куприн            1630227 символов,  246949 слов\n","Горький           1766366 символов,  286438 слов\n","Катаев            1805472 символов,  266507 слов\n","Гончаров          2173297 символов,  344765 слов\n","Толстой           2349942 символов,  365170 слов\n","----\n","В сумме          39345861 символов, 6055837 слов\n","\n","Статистика по тестовым текстам:\n","Тургенев           594054 символов,   92423 слов\n","Беляев             676577 символов,  100827 слов\n","Каверин            597849 символов,   91107 слов\n","Шолохов           1015881 символов,  154759 слов\n","Грибоедов          290733 символов,   44966 слов\n","Пушкин            1022494 символов,  152460 слов\n","Лесков             645664 символов,   97642 слов\n","Гоголь             589535 символов,   91613 слов\n","Булгаков           600320 символов,   88986 слов\n","Пастернак          926828 символов,  134229 слов\n","Чехов             1983489 символов,  320461 слов\n","Лермонтов          591763 символов,   95246 слов\n","Достоевский       1553686 символов,  250001 слов\n","Васильев           885838 символов,  132844 слов\n","Носов              719824 символов,  117467 слов\n","Куприн             698670 символов,  106828 слов\n","Горький            757015 символов,  121250 слов\n","Катаев             773774 символов,  113081 слов\n","Гончаров           931414 символов,  146780 слов\n","Толстой           1007118 символов,  159957 слов\n","----\n","В сумме          16862526 символов, 2612927 слов\n","\n"]}]},{"cell_type":"code","metadata":{"id":"GmFKBZMVOvYE","executionInfo":{"status":"ok","timestamp":1634659506330,"user_tz":-180,"elapsed":23,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["# Функция разбиения последовательности на отрезки скользящим окном\n","# На входе - последовательность индексов, размер окна, шаг окна\n","def split_sequence(sequence, win_size, hop):\n","    # Последовательность разбивается на части до последнего полного окна\n","    return [sequence[i:i + win_size] for i in range(0, len(sequence) - win_size + 1, hop)]\n","\n","\n","# Функция формирования выборок из последовательностей индексов\n","# формирует выборку отрезков и соответствующих им меток классов в виде one hot encoding\n","def vectorize_sequence(seq_list, win_size, hop):\n","    # В списке последовательности следуют в порядке их классов\n","    # Всего последовательностей в списке ровно столько, сколько классов\n","    class_count = len(seq_list)\n","\n","    # Списки для исходных векторов и категориальных меток класса\n","    x, y = [], []\n","\n","    # Для каждого класса:\n","    for cls in range(class_count):\n","        # Разбиение последовательности класса cls на отрезки\n","        vectors = split_sequence(seq_list[cls], win_size, hop)\n","        # Добавление отрезков в выборку\n","        x += vectors\n","        # Для всех отрезков класса cls добавление меток класса в виде OHE\n","        y += [utils.to_categorical(cls, class_count)] * len(vectors)\n","\n","    # Возврат результатов как numpy-массивов\n","    return np.array(x), np.array(y)"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P_DtCOPbPEMq","executionInfo":{"status":"ok","timestamp":1634659512756,"user_tz":-180,"elapsed":6448,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"7cca20fe-9e55-40e8-f209-cc44be79fb8f"},"source":["with timex():\n","    # Формирование обучающей выборки\n","    x_train, y_train = vectorize_sequence(seq_train, WIN_SIZE, WIN_HOP) \n","    print(x_train.shape, y_train.shape)\n"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["(60369, 1000) (60369, 20)\n","Время обработки: 6.46 с\n"]}]},{"cell_type":"code","metadata":{"id":"koQsnFrBPSjB","executionInfo":{"status":"ok","timestamp":1634659514656,"user_tz":-180,"elapsed":1919,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["seq_train= None #обнуляем ненужные данные, т.к в ноутбуке не хватает памяти\n","train_data = None\n","test_data = None\n"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6tRTi2hx5kjd","executionInfo":{"status":"ok","timestamp":1634659556288,"user_tz":-180,"elapsed":41389,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"053f3ea1-34d4-4e1a-e707-009efbb97b1c"},"source":["# Формирование выборок текстов в виде разреженных матриц (bag of words)\n","with timex():\n","    # На входе .sequences_to_matrix() ожидает список, .tolist() выполняет преобразование типа\n","    x_train_01 = tokenizer.sequences_to_matrix(x_train.tolist())\n","    print(x_train_01.shape)       \n"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["(60369, 20000)\n","Время обработки: 43.37 с\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3phZqWamSBA3","executionInfo":{"status":"ok","timestamp":1634659558849,"user_tz":-180,"elapsed":2580,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"c11cdc0c-4b59-4bcb-8eb8-c09cc04867e1"},"source":["with timex():\n","\n","    x_test, y_test = vectorize_sequence(seq_test, WIN_SIZE, WIN_HOP)\n","    print(x_test.shape, y_test.shape)"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["(25940, 1000) (25940, 20)\n","Время обработки: 2.69 с\n"]}]},{"cell_type":"code","metadata":{"id":"KDVRSpK2TBT0","executionInfo":{"status":"ok","timestamp":1634659558851,"user_tz":-180,"elapsed":8,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}}},"source":["seq_test = None\n","x_train = None"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"4OD_4lUlSCjM"},"source":["\n","# Формирование выборок текстов в виде разреженных матриц (bag of words)\n","with timex():\n","    # На входе .sequences_to_matrix() ожидает список, .tolist() выполняет преобразование типа\n","    x_test_01 = tokenizer.sequences_to_matrix(x_test.tolist())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-LtgjTrO6QDs"},"source":["# Функция компиляции и обучения модели нейронной сети\n","def compile_train_model(model, \n","                        x_train,\n","                        y_train,\n","                        x_val,\n","                        y_val,\n","                        optimizer='adam',\n","                        epochs=50,\n","                        batch_size=128,\n","                        figsize=(20, 5)):\n","\n","    # Компиляция модели\n","    model.compile(optimizer=optimizer, \n","                  loss='categorical_crossentropy', \n","                  metrics=['accuracy'])\n","\n","    # Вывод сводки\n","    model.summary()\n","\n","    train_callbacks = [keras.callbacks.EarlyStopping(monitor=\"val_accuracy\", patience=7, restore_best_weights=True)]\n","\n","    # Обучение модели с заданными параметрами\n","    history = model.fit(x_train,\n","                        y_train,\n","                        epochs=epochs,\n","                        batch_size=batch_size,\n","                        validation_data=(x_val, y_val),\n","                        callbacks = train_callbacks)\n","\n","    # Вывод графиков точности и ошибки\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n","    fig.suptitle('График процесса обучения модели')\n","    ax1.plot(history.history['accuracy'], \n","               label='Доля верных ответов на обучающем наборе')\n","    ax1.plot(history.history['val_accuracy'], \n","               label='Доля верных ответов на проверочном наборе')\n","    ax1.xaxis.get_major_locator().set_params(integer=True)\n","    ax1.set_xlabel('Эпоха обучения')\n","    ax1.set_ylabel('Доля верных ответов')\n","    ax1.legend()\n","\n","    ax2.plot(history.history['loss'], \n","               label='Ошибка на обучающем наборе')\n","    ax2.plot(history.history['val_loss'], \n","               label='Ошибка на проверочном наборе')\n","    ax2.xaxis.get_major_locator().set_params(integer=True)\n","    ax2.set_xlabel('Эпоха обучения')\n","    ax2.set_ylabel('Ошибка')\n","    ax2.legend()\n","    plt.show()\n","\n","\n","# Функция вывода результатов оценки модели на заданных данных\n","def eval_model(model, x, y_true,\n","               class_labels=[],\n","               cm_round=3,\n","               title='',\n","               figsize=(10, 10)):\n","    # Вычисление предсказания сети\n","    y_pred = model.predict(x)\n","    # Построение матрицы ошибок\n","    cm = confusion_matrix(np.argmax(y_true, axis=1),\n","                          np.argmax(y_pred, axis=1),\n","                          normalize='true')\n","    # Округление значений матрицы ошибок\n","    cm = np.around(cm, cm_round)\n","\n","    # Отрисовка матрицы ошибок\n","    fig, ax = plt.subplots(figsize=figsize)\n","    ax.set_title(f'Нейросеть {title}: матрица ошибок нормализованная', fontsize=18)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_labels)\n","    disp.plot(ax=ax)\n","    plt.gca().images[-1].colorbar.remove()  # Стирание ненужной цветовой шкалы\n","    plt.xlabel('Предсказанные классы', fontsize=16)\n","    plt.ylabel('Верные классы', fontsize=16)\n","    fig.autofmt_xdate(rotation=45)          # Наклон меток горизонтальной оси при необходимости\n","    plt.show()    \n","\n","    print('-'*100)\n","    print(f'Нейросеть: {title}')\n","\n","    # Для каждого класса:\n","    for cls in range(len(class_labels)):\n","        # Определяется индекс класса с максимальным значением предсказания (уверенности)\n","        cls_pred = np.argmax(cm[cls])\n","        # Формируется сообщение о верности или неверности предсказания\n","        msg = 'ВЕРНО :-)' if cls_pred == cls else 'НЕВЕРНО :-('\n","        # Выводится текстовая информация о предсказанном классе и значении уверенности\n","        print('Класс: {:<20} {:3.0f}% сеть отнесла к классу {:<20} - {}'.format(class_labels[cls],\n","                                                                               100. * cm[cls, cls_pred],\n","                                                                               class_labels[cls_pred],\n","                                                                               msg))\n","\n","    # Средняя точность распознавания определяется как среднее диагональных элементов матрицы ошибок\n","    print('\\nСредняя точность распознавания: {:3.0f}%'.format(100. * cm.diagonal().mean()))\n","\n","\n","# Совместная функция обучения и оценки модели нейронной сети\n","def compile_train_eval_model(model, \n","                             x_train,\n","                             y_train,\n","                             x_test,\n","                             y_test,\n","                             class_labels=CLASS_LIST,\n","                             title='',\n","                             optimizer='adam',\n","                             epochs=5,\n","                             batch_size=128,\n","                             graph_size=(20, 5),\n","                             cm_size=(10, 10)):\n","\n","    # Компиляция и обучение модели на заданных параметрах\n","    # В качестве проверочных используются тестовые данные\n","    compile_train_model(model, \n","                        x_train, y_train,\n","                        x_test, y_test,\n","                        optimizer=optimizer,\n","                        epochs=epochs,\n","                        batch_size=batch_size,\n","                        figsize=graph_size)\n","\n","    # Вывод результатов оценки работы модели на тестовых данных\n","    eval_model(model, x_test, y_test, \n","               class_labels=class_labels, \n","               title=title,\n","               figsize=cm_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fuiWsxTm8Mcb"},"source":["# Создание последовательной модели нейросети\n","model_text_bow_sig = Sequential()\n","# Первый полносвязный слой\n","model_text_bow_sig.add(Dense(200, input_dim=VOCAB_SIZE, activation=\"relu\"))\n","# Слой регуляризации Dropout\n","model_text_bow_sig.add(Dropout(0.25))\n","# Слой пакетной нормализации\n","model_text_bow_sig.add(BatchNormalization())\n","# Выходной полносвязный слой\n","model_text_bow_sig.add(Dense(CLASS_COUNT, activation='sigmoid'))\n","\n","# Входные данные подаются в виде векторов bag of words\n","compile_train_eval_model(model_text_bow_sig,\n","                         x_train_01, y_train,\n","                         x_test_01, y_test,\n","                         class_labels=CLASS_LIST,\n","                         title='BoW + sigmoid')"],"execution_count":null,"outputs":[]}]}