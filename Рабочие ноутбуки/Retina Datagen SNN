{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1nEMSYtJ1Wvfi_LL7PX4zxxdfWhgQDAho","timestamp":1713202752337},{"file_id":"1JjzAdcF5v5uscw4zO2oaf6IM-BzaGARp","timestamp":1634055019330},{"file_id":"1v-FZDVx4wNfsIYCjAw-gwYkqt1oF6z3A","timestamp":1633537154615},{"file_id":"1oABfcq3LYB3jljLuPnDAHo_zrmSpeWy4","timestamp":1633534756941}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"9-a4yxhXQ9fU"},"source":["import cv2, numpy as np\n","\n","# Генератор аугментированных изображений\n","from tensorflow import keras\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout, BatchNormalization, SpatialDropout2D\n","from tensorflow.keras.optimizers.legacy import Adam\n","# Матрица ошибок классификатора\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import os\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","!unzip -q '/content/drive/MyDrive/Диплом/DiabRetinaTrain.zip' -d '/content'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KtnYzkio2QmK","executionInfo":{"status":"ok","timestamp":1713202906412,"user_tz":-180,"elapsed":26776,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"26ab0642-b9ac-430b-d7f5-9fcdf5772048"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"Zk85FM5JRK4v"},"source":["# Задание гиперпараметров\n","\n","TRAIN_PATH          = '/content/Train'       # Папка для обучающего набора данных\n","TEST_PATH           = '/content/Test'  # Папка для тестового набора данных\n","\n","TEST_SPLIT          = 0.1                   # Доля тестовых данных в общем наборе\n","VAL_SPLIT           = 0.1                   # Доля проверочной выборки в обучающем наборе\n","\n","IMG_WIDTH           = 224                  # Ширина изображения для нейросети\n","IMG_HEIGHT          = 224                    # Высота изображения для нейросети\n","IMG_CHANNELS        = 3                     # Количество каналов (для RGB равно 3, для Grey равно 1)\n","\n","# Параметры аугментации\n","ROTATION_RANGE      = 0                    # Пределы поворота\n","WIDTH_SHIFT_RANGE   = 0.07                 # Пределы сдвига по горизонтали\n","HEIGHT_SHIFT_RANGE  = 0.07                # Пределы сдвига по вертикали\n","ZOOM_RANGE          = 0.1                   # Пределы увеличения/уменьшения\n","BRIGHTNESS_RANGE    = (0.7, 1.3)            # Пределы изменения яркости\n","HORIZONTAL_FLIP     = True                  # Горизонтальное отражение разрешено\n","\n","EPOCHS              = 50                  # Число эпох обучения\n","BATCH_SIZE          = 38               # Размер батча для обучения модели\n","OPTIMIZER = Adam(learning_rate=0.0001)\n","#OPTIMIZER = SGD(learning_rate=0.0001, nesterov = True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aWBl9q2sQry-"},"source":["# Папка с папками картинок, рассортированных по категориям\n","IMAGE_PATH = '/content/Train/'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YwR7IUa2ROaF","executionInfo":{"status":"ok","timestamp":1713202970693,"user_tz":-180,"elapsed":6,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"64f0851b-92b7-40a6-afed-280fde398cba"},"source":["# Определение списка имен классов\n","CLASS_LIST = sorted(os.listdir(TRAIN_PATH))\n","\n","# Определение количества классов\n","CLASS_COUNT = len(CLASS_LIST)\n","\n","# Проверка результата\n","print(f'Количество классов: {CLASS_COUNT}, метки классов: {CLASS_LIST}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Количество классов: 5, метки классов: ['0', '1', '2', '3', '4']\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qzpi1MfvRhLN","executionInfo":{"status":"ok","timestamp":1713203009042,"user_tz":-180,"elapsed":381,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"3e517573-2d50-4ec0-dd86-556068ac977e"},"source":["data_files = []                           # Cписок путей к файлам картинок\n","data_labels = []                          # Список меток классов, соответствующих файлам\n","\n","for class_label in range(CLASS_COUNT):    # Для всех классов по порядку номеров (их меток)\n","    class_name = CLASS_LIST[class_label]  # Выборка имени класса из списка имен\n","    class_path = IMAGE_PATH + class_name  # Формирование полного пути к папке с изображениями класса\n","    class_files = os.listdir(class_path)  # Получение списка имен файлов с изображениями текущего класса\n","    print(f'Размер класса {class_name} составляет {len(class_files)} фотографий')\n","\n","    # Добавление к общему списку всех файлов класса с добавлением родительского пути\n","    data_files += [f'{class_path}/{file_name}' for file_name in class_files]\n","\n","    # Добавление к общему списку меток текущего класса - их ровно столько, сколько файлов в классе\n","    data_labels += [class_label] * len(class_files)\n","\n","print('Общий размер базы для обучения:', len(data_labels))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размер класса 0 составляет 1615 фотографий\n","Размер класса 1 составляет 1513 фотографий\n","Размер класса 2 составляет 1491 фотографий\n","Размер класса 3 составляет 1066 фотографий\n","Размер класса 4 составляет 1003 фотографий\n","Общий размер базы для обучения: 6688\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lm5wd8mSR5O3","executionInfo":{"status":"ok","timestamp":1713203093239,"user_tz":-180,"elapsed":406,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"c9a8f81d-fae0-49f7-aebc-904765fe9f0e"},"source":["# Перенос файлов для теста в отдельное дерево папок, расчет размеров наборов данных\n","\n","os.mkdir(TEST_PATH)                                        # Создание папки для тестовых данных\n","train_count = 0\n","test_count = 0\n","\n","for class_name in CLASS_LIST:                              # Для всех классов по порядку номеров (их меток)\n","    class_path = f'{TRAIN_PATH}/{class_name}'              # Формирование полного пути к папке с изображениями класса\n","    test_path = f'{TEST_PATH}/{class_name}'                # Полный путь для тестовых данных класса\n","    class_files = os.listdir(class_path)                   # Получение списка имен файлов с изображениями текущего класса\n","    class_file_count = len(class_files)                    # Получение общего числа файлов класса\n","    os.mkdir(test_path)                                    # Создание подпапки класса для тестовых данных\n","    test_file_count = int(class_file_count * TEST_SPLIT)   # Определение числа тестовых файлов для класса\n","    test_files = class_files[-test_file_count:]            # Выделение файлов для теста от конца списка\n","    for f in test_files:                                   # Перемещение тестовых файлов в папку для теста\n","        os.rename(f'{class_path}/{f}', f'{test_path}/{f}')\n","    train_count += class_file_count                        # Увеличение общего счетчика файлов обучающего набора\n","    test_count += test_file_count                          # Увеличение общего счетчика файлов тестового набора\n","\n","    print(f'Размер класса {class_name}: {class_file_count} машин, для теста выделено файлов: {test_file_count}')\n","\n","print(f'Общий размер базы: {train_count}, выделено для обучения: {train_count - test_count}, для теста: {test_count}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Размер класса 0: 1615 машин, для теста выделено файлов: 161\n","Размер класса 1: 1513 машин, для теста выделено файлов: 151\n","Размер класса 2: 1491 машин, для теста выделено файлов: 149\n","Размер класса 3: 1066 машин, для теста выделено файлов: 106\n","Размер класса 4: 1003 машин, для теста выделено файлов: 100\n","Общий размер базы: 6688, выделено для обучения: 6021, для теста: 667\n"]}]},{"cell_type":"code","metadata":{"id":"BvR00uygSFrl"},"source":["# Генераторы изображений\n","\n","# Изображения для обучающего набора нормализуются и аугментируются согласно заданным гиперпараметрам\n","# Далее набор будет разделен на обучающую и проверочную выборку в соотношении VAL_SPLIT\n","train_datagen = ImageDataGenerator(\n","                    rescale=1. / 255.,\n","                    rotation_range=ROTATION_RANGE,\n","                    width_shift_range=WIDTH_SHIFT_RANGE,\n","                    height_shift_range=HEIGHT_SHIFT_RANGE,\n","                    zoom_range=ZOOM_RANGE,\n","                    brightness_range=BRIGHTNESS_RANGE,\n","                    horizontal_flip=HORIZONTAL_FLIP,\n","                    validation_split=VAL_SPLIT\n","                )\n","\n","# Изображения для тестового набора только нормализуются\n","test_datagen = ImageDataGenerator(\n","                   rescale=1. / 255.\n","                )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VvLhjGtTSnal","executionInfo":{"status":"ok","timestamp":1713203106797,"user_tz":-180,"elapsed":326,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"255dd760-e9a7-486f-b0d1-f13477a4caf2"},"source":["# Обучающая выборка генерируется из папки обучающего набора\n","train_generator = train_datagen.flow_from_directory(\n","    # Путь к обучающим изображениям\n","    TRAIN_PATH,\n","    # Параметры требуемого размера изображения\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    # Размер батча\n","    batch_size=BATCH_SIZE,\n","    class_mode='categorical',\n","    shuffle=True,\n","    # Указание сгенерировать обучающую выборку\n","    subset='training'\n",")\n","\n","# Проверочная выборка также генерируется из папки обучающего набора\n","validation_generator = train_datagen.flow_from_directory(\n","    TRAIN_PATH,\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    batch_size=BATCH_SIZE,\n","    class_mode='categorical',\n","    shuffle=True,\n","    # Указание сгенерировать проверочную выборку\n","    subset='validation'\n",")\n","\n","# Тестовая выборка генерируется из папки тестового набора\n","test_generator = test_datagen.flow_from_directory(\n","    TEST_PATH,\n","    target_size=(IMG_HEIGHT, IMG_WIDTH),\n","    batch_size=test_count,\n","    class_mode='categorical',\n","    shuffle=True,\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 5420 images belonging to 5 classes.\n","Found 601 images belonging to 5 classes.\n","Found 667 images belonging to 5 classes.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V4kC9phSSvi1","executionInfo":{"status":"ok","timestamp":1713203125754,"user_tz":-180,"elapsed":4160,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"2f0d458a-d321-4875-d91a-a5b508b20282"},"source":["# Проверка формы данных\n","print(f'Формы данных тренировочной выборки: {train_generator[0][0].shape}, {train_generator[0][1].shape}, батчей: {len(train_generator)}')\n","print(f'Формы данных   проверочной выборки: {validation_generator[0][0].shape}, {validation_generator[0][1].shape}, батчей: {len(validation_generator)}')\n","print(f'Формы данных      тестовой выборки: {test_generator[0][0].shape}, {test_generator[0][1].shape}, батчей: {len(test_generator)}')\n","\n","print()\n","\n","# Проверка назначения меток классов\n","print(f'Метки классов тренировочной выборки: {train_generator.class_indices}')\n","print(f'Метки классов   проверочной выборки: {validation_generator.class_indices}')\n","print(f'Метки классов      тестовой выборки: {test_generator.class_indices}')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Формы данных тренировочной выборки: (38, 224, 224, 3), (38, 5), батчей: 143\n","Формы данных   проверочной выборки: (38, 224, 224, 3), (38, 5), батчей: 16\n","Формы данных      тестовой выборки: (667, 224, 224, 3), (667, 5), батчей: 1\n","\n","Метки классов тренировочной выборки: {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4}\n","Метки классов   проверочной выборки: {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4}\n","Метки классов      тестовой выборки: {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4}\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":434},"id":"Ok77eChkS6A2","executionInfo":{"status":"ok","timestamp":1713203143778,"user_tz":-180,"elapsed":1305,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"d22a24f8-44da-45a5-9944-9a55ac450f47"},"source":["# Проверка одного изображения из выборки\n","plt.imshow(train_generator[2][0][23])\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"Rd5xbhNcTgsP"},"source":["# Функция компиляции и обучения модели нейронной сети\n","# По окончанию выводит графики обучения\n","\n","def compile_train_model(model,                  # модель нейронной сети\n","                        train_data,             # обучающие данные\n","                        val_data,               # проверочные данные\n","                        optimizer=OPTIMIZER,    # оптимизатор\n","                        epochs=EPOCHS,          # количество эпох обучения\n","                        batch_size=BATCH_SIZE,  # размер батча\n","                        figsize=(20, 5)):       # размер полотна для графиков\n","\n","    # Компиляция модели\n","    model.compile(optimizer=optimizer,\n","                  loss='categorical_crossentropy',\n","                  metrics=['accuracy'])\n","\n","    # Вывод сводки\n","    model.summary()\n","\n","    train_callbacks = [keras.callbacks.EarlyStopping(monitor=\"val_accuracy\", patience=10, restore_best_weights=True)]\n","\n","    # Обучение модели с заданными параметрами\n","    history = model.fit(train_data,\n","                        epochs=epochs,\n","                        batch_size=batch_size,\n","                        validation_data=val_data,\n","                        callbacks = train_callbacks,\n","                        shuffle = True)\n","\n","    # Вывод графиков точности и ошибки\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n","    fig.suptitle('График процесса обучения модели')\n","    ax1.plot(history.history['accuracy'],\n","               label='Доля верных ответов на обучающем наборе')\n","    ax1.plot(history.history['val_accuracy'],\n","               label='Доля верных ответов на проверочном наборе')\n","    ax1.xaxis.get_major_locator().set_params(integer=True)\n","    ax1.set_xlabel('Эпоха обучения')\n","    ax1.set_ylabel('Доля верных ответов')\n","    ax1.legend()\n","\n","    ax2.plot(history.history['loss'],\n","               label='Ошибка на обучающем наборе')\n","    ax2.plot(history.history['val_loss'],\n","               label='Ошибка на проверочном наборе')\n","    ax2.xaxis.get_major_locator().set_params(integer=True)\n","    ax2.set_xlabel('Эпоха обучения')\n","    ax2.set_ylabel('Ошибка')\n","    ax2.legend()\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Eo7RsO8cTvPP"},"source":["# Функция вывода результатов оценки модели на заданных данных\n","\n","def eval_model(model,\n","               x,                # данные для предсказания модели (вход)\n","               y_true,           # верные метки классов в формате OHE (выход)\n","               class_labels=[],  # список меток классов\n","               cm_round=3,       # число знаков после запятой для матрицы ошибок\n","               title='',         # название модели\n","               figsize=(10, 10)  # размер полотна для матрицы ошибок\n","               ):\n","    # Вычисление предсказания сети\n","    y_pred = model.predict(x)\n","    # Построение матрицы ошибок\n","    cm = confusion_matrix(np.argmax(y_true, axis=1),\n","                          np.argmax(y_pred, axis=1),\n","                          normalize='true')\n","    # Округление значений матрицы ошибок\n","    cm = np.around(cm, cm_round)\n","\n","    # Отрисовка матрицы ошибок\n","    fig, ax = plt.subplots(figsize=figsize)\n","    ax.set_title(f'Нейросеть {title}: матрица ошибок нормализованная', fontsize=18)\n","    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_labels)\n","    disp.plot(ax=ax)\n","    ax.images[-1].colorbar.remove()       # Стирание ненужной цветовой шкалы\n","    fig.autofmt_xdate(rotation=45)        # Наклон меток горизонтальной оси\n","    plt.xlabel('Предсказанные классы', fontsize=16)\n","    plt.ylabel('Верные классы', fontsize=16)\n","    plt.show()\n","\n","    print('-'*100)\n","    print(f'Нейросеть: {title}')\n","\n","    # Для каждого класса:\n","    for cls in range(len(class_labels)):\n","        # Определяется индекс класса с максимальным значением предсказания (уверенности)\n","        cls_pred = np.argmax(cm[cls])\n","        # Формируется сообщение о верности или неверности предсказания\n","        msg = 'ВЕРНО :-)' if cls_pred == cls else 'НЕВЕРНО :-('\n","        # Выводится текстовая информация о предсказанном классе и значении уверенности\n","        print('Класс: {:<20} {:3.0f}% сеть отнесла к классу {:<20} - {}'.format(class_labels[cls],\n","                                                                               100. * cm[cls, cls_pred],\n","                                                                               class_labels[cls_pred],\n","                                                                               msg))\n","\n","    # Средняя точность распознавания определяется как среднее диагональных элементов матрицы ошибок\n","    print('\\nСредняя точность распознавания: {:3.0f}%'.format(100. * cm.diagonal().mean()))"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["OPTIMIZER=tf.keras.optimizers.legacy.Adam(learning_rate=0.0001)"],"metadata":{"id":"FSkmUeLe5ady"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hm03ihBtT1vU"},"source":["# Совместная функция обучения и оценки модели нейронной сети\n","\n","def compile_train_eval_model(model,                    # модель нейронной сети\n","                             train_data,               # обучающие данные\n","                             val_data,                 # проверочные данные\n","                             test_data,                # тестовые данные\n","                             class_labels=CLASS_LIST,  # список меток классов\n","                             title='',                 # название модели\n","                             optimizer=OPTIMIZER,      # оптимизатор\n","                             epochs=EPOCHS,            # количество эпох обучения\n","                             batch_size=BATCH_SIZE,    # размер батча\n","                             graph_size=(20, 5),       # размер полотна для графиков обучения\n","                             cm_size=(10, 10)          # размер полотна для матрицы ошибок\n","                             ):\n","\n","    # Компиляция и обучение модели на заданных параметрах\n","    # В качестве проверочных используются тестовые данные\n","    compile_train_model(model,\n","                        train_data,\n","                        val_data,\n","                        optimizer=optimizer,\n","                        epochs=epochs,\n","                        batch_size=batch_size,\n","                        figsize=graph_size)\n","\n","    # Вывод результатов оценки работы модели на тестовых данных\n","    eval_model(model, test_data[0][0], test_data[0][1],\n","               class_labels=class_labels,\n","               title=title,\n","               figsize=cm_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NXImIOyCD_Xd"},"source":["model = Sequential()\n","\n","#1\n","model.add(BatchNormalization(input_shape=( IMG_HEIGHT,IMG_WIDTH ,IMG_CHANNELS)))\n","model.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\n","model.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(3, 3)))\n","model.add(Dropout(0.3))\n","#2\n","model.add(BatchNormalization())\n","model.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\n","model.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(3, 3)))\n","model.add(Dropout(0.3))\n","#3\n","model.add(BatchNormalization())\n","model.add(Conv2D(512, (3, 3), padding='same', activation='relu'))\n","model.add(Conv2D(512, (3, 3), padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(3, 3)))\n","model.add(Dropout(0.3))\n","#4\n","#model.add(BatchNormalization())\n","#model.add(Conv2D(512, (3, 3), padding='same', activation='relu'))\n","#model.add(Conv2D(512, (3, 3), padding='same', activation='relu'))\n","#model.add(MaxPooling2D(pool_size=(2, 2)))\n","#model.add(Dropout(0.3))\n","#5\n","model.add(BatchNormalization())\n","model.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\n","model.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.3))\n","\n","model.add(Flatten())\n","model.add(Dense(1024, activation='elu'))\n","model.add(Dense(1546, activation='elu'))\n","model.add(Dense(5, activation='softmax'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"GmkkBJUSE1Q8","executionInfo":{"status":"error","timestamp":1713204603205,"user_tz":-180,"elapsed":855294,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"6120f4a5-1da3-4982-97e2-4dda3bbb9cbd"},"source":["compile_train_eval_model(model,\n","                         train_generator,\n","                         validation_generator,\n","                         test_generator,\n","                         epochs = 100,\n","                         class_labels=CLASS_LIST,\n","                         title='Сверточный классификатор')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," batch_normalization_8 (Bat  (None, 224, 224, 3)       12        \n"," chNormalization)                                                \n","                                                                 \n"," conv2d_16 (Conv2D)          (None, 224, 224, 128)     3584      \n","                                                                 \n"," conv2d_17 (Conv2D)          (None, 224, 224, 128)     147584    \n","                                                                 \n"," max_pooling2d_8 (MaxPoolin  (None, 74, 74, 128)       0         \n"," g2D)                                                            \n","                                                                 \n"," dropout_8 (Dropout)         (None, 74, 74, 128)       0         \n","                                                                 \n"," batch_normalization_9 (Bat  (None, 74, 74, 128)       512       \n"," chNormalization)                                                \n","                                                                 \n"," conv2d_18 (Conv2D)          (None, 74, 74, 256)       295168    \n","                                                                 \n"," conv2d_19 (Conv2D)          (None, 74, 74, 256)       590080    \n","                                                                 \n"," max_pooling2d_9 (MaxPoolin  (None, 24, 24, 256)       0         \n"," g2D)                                                            \n","                                                                 \n"," dropout_9 (Dropout)         (None, 24, 24, 256)       0         \n","                                                                 \n"," batch_normalization_10 (Ba  (None, 24, 24, 256)       1024      \n"," tchNormalization)                                               \n","                                                                 \n"," conv2d_20 (Conv2D)          (None, 24, 24, 512)       1180160   \n","                                                                 \n"," conv2d_21 (Conv2D)          (None, 24, 24, 512)       2359808   \n","                                                                 \n"," max_pooling2d_10 (MaxPooli  (None, 8, 8, 512)         0         \n"," ng2D)                                                           \n","                                                                 \n"," dropout_10 (Dropout)        (None, 8, 8, 512)         0         \n","                                                                 \n"," batch_normalization_11 (Ba  (None, 8, 8, 512)         2048      \n"," tchNormalization)                                               \n","                                                                 \n"," conv2d_22 (Conv2D)          (None, 8, 8, 256)         1179904   \n","                                                                 \n"," conv2d_23 (Conv2D)          (None, 8, 8, 256)         590080    \n","                                                                 \n"," max_pooling2d_11 (MaxPooli  (None, 4, 4, 256)         0         \n"," ng2D)                                                           \n","                                                                 \n"," dropout_11 (Dropout)        (None, 4, 4, 256)         0         \n","                                                                 \n"," flatten_2 (Flatten)         (None, 4096)              0         \n","                                                                 \n"," dense_6 (Dense)             (None, 1024)              4195328   \n","                                                                 \n"," dense_7 (Dense)             (None, 1546)              1584650   \n","                                                                 \n"," dense_8 (Dense)             (None, 5)                 7735      \n","                                                                 \n","=================================================================\n","Total params: 12137677 (46.30 MB)\n","Trainable params: 12135879 (46.29 MB)\n","Non-trainable params: 1798 (7.02 KB)\n","_________________________________________________________________\n","Epoch 1/100\n","143/143 [==============================] - 177s 1s/step - loss: 1.7574 - accuracy: 0.2454 - val_loss: 1.6439 - val_accuracy: 0.2230\n","Epoch 2/100\n","143/143 [==============================] - 127s 886ms/step - loss: 1.6115 - accuracy: 0.2483 - val_loss: 1.6451 - val_accuracy: 0.1947\n","Epoch 3/100\n","143/143 [==============================] - 125s 872ms/step - loss: 1.5903 - accuracy: 0.2594 - val_loss: 1.6313 - val_accuracy: 0.1531\n","Epoch 4/100\n","143/143 [==============================] - 128s 890ms/step - loss: 1.5754 - accuracy: 0.2546 - val_loss: 1.6201 - val_accuracy: 0.2030\n","Epoch 5/100\n","143/143 [==============================] - 125s 871ms/step - loss: 1.5712 - accuracy: 0.2729 - val_loss: 1.6569 - val_accuracy: 0.1714\n","Epoch 6/100\n","143/143 [==============================] - 128s 888ms/step - loss: 1.5687 - accuracy: 0.2672 - val_loss: 1.6964 - val_accuracy: 0.1564\n","Epoch 7/100\n"," 16/143 [==>...........................] - ETA: 1:42 - loss: 1.5582 - accuracy: 0.2780"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-df07534daf9a>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m compile_train_eval_model(model,\n\u001b[0m\u001b[1;32m      2\u001b[0m                          \u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m                          \u001b[0mvalidation_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                          \u001b[0mtest_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                          \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-26-14c1af3eb212>\u001b[0m in \u001b[0;36mcompile_train_eval_model\u001b[0;34m(model, train_data, val_data, test_data, class_labels, title, optimizer, epochs, batch_size, graph_size, cm_size)\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0;31m# Компиляция и обучение модели на заданных параметрах\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;31m# В качестве проверочных используются тестовые данные\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     compile_train_model(model,\n\u001b[0m\u001b[1;32m     19\u001b[0m                         \u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m                         \u001b[0mval_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-13-c127f59a3378>\u001b[0m in \u001b[0;36mcompile_train_model\u001b[0;34m(model, train_data, val_data, optimizer, epochs, batch_size, figsize)\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;31m# Обучение модели с заданными параметрами\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m     history = model.fit(train_data,\n\u001b[0m\u001b[1;32m     24\u001b[0m                         \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m                         \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1805\u001b[0m                         ):\n\u001b[1;32m   1806\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1807\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1808\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    866\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    867\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 868\u001b[0;31m       return tracing_compilation.call_function(\n\u001b[0m\u001b[1;32m    869\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m       )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m   \u001b[0mbound_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m   \u001b[0mflat_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbound_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m   return function._call_flat(  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m    140\u001b[0m       \u001b[0mflat_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m   )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1321\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1322\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1323\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inference_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1324\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1325\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSequence\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m     \u001b[0mflat_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflat_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mrecord\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_recording\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bound_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m             outputs = self._bound_context.call_function(\n\u001b[0m\u001b[1;32m    252\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m                 \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/context.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1484\u001b[0m     \u001b[0mcancellation_context\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcancellation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1485\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcancellation_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1486\u001b[0;31m       outputs = execute.execute(\n\u001b[0m\u001b[1;32m   1487\u001b[0m           \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1488\u001b[0m           \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}