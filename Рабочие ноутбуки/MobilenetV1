{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1lHd2JXaUghwYRCLKMyPmWMBB4A17zMpq","timestamp":1671270281442},{"file_id":"1kxvPwjoWl0Z8tIcMBmmmufuXOvjV5B2Z","timestamp":1671009076068},{"file_id":"1tOG5bRunDTAAIzqc61QyINIDXyjVqJGX","timestamp":1670923255946},{"file_id":"1Rq9U1iwO-GudpcbHtti7FPaPPPixqu5Y","timestamp":1670639795031},{"file_id":"1FJKi2ztW-LnSppMqgbiSw03UQiz7nM36","timestamp":1670584763888},{"file_id":"1BiCtPweM3Z37xQ2dhsRzP0EtVPMmvGYo","timestamp":1629887041892},{"file_id":"1lMqTdtsA9U0WBTwtzZoXr5SJw9qo6tbz","timestamp":1629886424331}],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"UbELY0XuFGQ0"},"source":["# **Подключение библиотек**"]},{"cell_type":"code","metadata":{"id":"bbx9ujcwmNUc","executionInfo":{"status":"ok","timestamp":1677432810324,"user_tz":-180,"elapsed":4312,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["import tensorflow as tf          # Библиотека TensorFlow\n","from tensorflow.keras import layers\n","from keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LambdaCallback, CSVLogger\n","# метод для отрисовки модели \n","from keras.utils.vis_utils import plot_model\n","import gc                        # Модуль Garbage Collector - для помощи в освобождении памяти (Удаляет лишние/неиспользуемые данные)\n","import os                        # Модуль для работы с файлами операционной системы\n","import time                      # Модуль для работы со временем\n","import gdown                     # Модуль для загрузки больших файлов\n","import random                    # Модуль для генерации случайных значений\n","import seaborn as sns            # Модуль для работы с графиками и стилями\n","import matplotlib.pyplot as plt  # Модуль для работы с графиками и изображениями\n","from PIL import Image            # Методы для работы с изображениями"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1Y6CTa8MFHdZ"},"source":["# **Загрузка датасета**"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kmzmy-so5uAx","executionInfo":{"status":"ok","timestamp":1677432895973,"user_tz":-180,"elapsed":80738,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"6e168769-cc88-420d-d59b-4c70c55df10a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Разархивирование базы в папку bus:\n","!unzip -q '/content/drive/MyDrive/Стажировка/data_mob_set.zip' -d '/content/'\n"],"metadata":{"id":"SZSQ5ooq6Xxu","executionInfo":{"status":"ok","timestamp":1677432901704,"user_tz":-180,"elapsed":5743,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"xG0Wvatl6vCy","executionInfo":{"status":"ok","timestamp":1677432904438,"user_tz":-180,"elapsed":260,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["data_dir = '/content/train/'  # Присваиваем путь к базе в переменную data_dir\n","batch_size = 48             # Определяем batch size\n","image_size = (224, 224)     # Определяем размер изображений"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hcD-KnBPMneg"},"source":["С помощью метода `image_dataset_from_directory` создадим обучающий и проверочный датасеты:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KX1Xc4atB6Yi","executionInfo":{"status":"ok","timestamp":1677432910904,"user_tz":-180,"elapsed":4468,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"bceb87bb-50c8-49ca-b20a-88198bd2eca0"},"source":["train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.2,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"training\",       # Помечаем, что выборка обучающая (90%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","\n","val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.2,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"validation\",     # Помечаем, что выборка проверочная (10%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","  \n","                             # Определяем имена классов:\n","class_names = train_ds.class_names\n","print(class_names)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2520 files belonging to 7 classes.\n","Using 2016 files for training.\n","Found 2520 files belonging to 7 classes.\n","Using 504 files for validation.\n","['01', '02', '03', '04', '05', '06', '07']\n"]}]},{"cell_type":"code","metadata":{"id":"uuR1CibAB6Yj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677432916385,"user_tz":-180,"elapsed":310,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"f93e255c-1785-45ca-ae94-295e5197d5a4"},"source":["# Предварительная подгрузка датасета для ускорения обучения и стабилизации\n","AUTOTUNE = tf.data.AUTOTUNE\n","\n","train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE) # Предварительная обучающая выборка\n","val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)     # Предварительная тестовая выборка\n","\n","print(train_ds)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<PrefetchDataset element_spec=(TensorSpec(shape=(None, 224, 224, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None,), dtype=tf.int32, name=None))>\n"]}]},{"cell_type":"markdown","metadata":{"id":"Y8mUUDsFB6Yk"},"source":["**Дополнительные слои** для модели, с помощью которых можно провести дополнительную аугментацию"]},{"cell_type":"code","metadata":{"id":"1PSraPY_B6Yk","executionInfo":{"status":"ok","timestamp":1677432921832,"user_tz":-180,"elapsed":279,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["# Дополнительная аугментация в виде слоя для модели (для увеличения базы изображений)\n","data_augmentation = tf.keras.Sequential([\n","  tf.keras.layers.experimental.preprocessing.RandomZoom((-0.05, 0.05)), # Произвольное увеличение и уменьшение на 10%\n","  tf.keras.layers.experimental.preprocessing.RandomContrast(0.15),\n","  tf.keras.layers.experimental.preprocessing.RandomFlip(mode=\"horizontal_and_vertical\")])     # Изменение контраста изображений "],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9-irE_TfQ0yM"},"source":["Дополнительная функция для отрисовки графиков обучения"]},{"cell_type":"code","metadata":{"id":"CL2rrjNzZsu_","executionInfo":{"status":"ok","timestamp":1677432925396,"user_tz":-180,"elapsed":257,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["def plot_graph(train_acc, val_acc, train_loss, val_loss):\n","  '''\n","  Функция выведет на экран графики точности и ошибки на проверочной и обучающей выборках.\n","  '''\n","  sns.set(style='darkgrid', palette='dark') \n","  plt.figure(figsize=(16, 10))\n","  plt.subplot(2, 2, 1)\n","  plt.title('Точность', fontweight='bold')\n","  plt.plot(train_acc, label='Точность на обучащей выборке')\n","  plt.plot(val_acc, label='Точность на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Доля верных ответов')\n","  plt.legend()\n","\n","  plt.subplot(2, 2, 2)\n","  plt.title('Ошибка', fontweight='bold')\n","  plt.plot(train_loss, label='Ошибка на обучающей выборке')\n","  plt.plot(val_loss, label='Ошибка на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Ошибка')\n","  plt.legend()\n","\n","  plt.show()"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YATKEZ4LB6Yk"},"source":["#MobileNetV1"]},{"cell_type":"code","metadata":{"id":"sIPvMAe3B6Yl"},"source":["preprocess_input = tf.keras.applications.mobilenet.preprocess_input # Нормализация данных на вход в соответствии требованиям модели\n","gc.collect()                                                     # Сборка мусора для освобождения памяти\n","image_shape = image_size + (3,)                                  # Определяем входную размерность в соответствии требованиям модели\n","global_average_layer = tf.keras.layers.GlobalAveragePooling2D()  # Задаем слой GlobalAveragePooling2D\n","prediction_layer = tf.keras.layers.Dense(len(class_names))       # Задаем выходной слой на нужное нам количество классов\n","\n","\n","                                                                 # Создаем базовую модель NASNetMobile:\n","base_model = tf.keras.applications.MobileNetV2(input_shape=image_shape,\n","                         include_top=False,                      # Не включаем верхнюю часть модели, чтобы можно было использовать свои входные размерности\n","                         weights='imagenet')                     # Используем веса уже предобученной модели на базе Imagenet\n","\n","\n","                                                                 # Собираем полную модель, состоящую из всех наших определенных слоев и базовой модели NASNetMobile:\n","inputs = tf.keras.Input(shape=(image_shape))\n","x = data_augmentation(inputs)\n","x = preprocess_input(x)\n","x = base_model(x, training=False)\n","x = global_average_layer(x)\n","x = tf.keras.layers.Dropout(0.2)(x)\n","outputs = prediction_layer(x)\n","model1 = tf.keras.Model(inputs, outputs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_learning_rate = 0.0001                                                                        \n","# Компилируем модель:\n","model1.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),  # Оптимизатор Adam c заданным ранее шагом обучения\n","              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),  # Ошибка SparseCategoricalCrossentropy\n","              metrics=['accuracy'])                                                  # Метрика Accuracy"],"metadata":{"id":"yxe8XmieUQVR","executionInfo":{"status":"ok","timestamp":1677433363349,"user_tz":-180,"elapsed":267,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"xaCmdfTPB6Yl"},"source":["epochs = 15    \n","\n","#Задаем коллбеки  \n","history_path = '/content/drive/MyDrive/Стажировка/model_history_log2.csv'\n","weights_path = '/content/drive/MyDrive/Стажировка/MobileNetV1.h5'\n","\n","csv_logger = CSVLogger(history_path, append=True)\n","# уменьшение lr\n","reduceLROnPlateau = ReduceLROnPlateau(monitor='val_loss', factor=0.7, patience=3, verbose=1)\n","# сохранение весов\n","model_checkpoint = ModelCheckpoint(weights_path, monitor='val_loss', save_best_only=True, verbose=1)\n","\n","\n","MobileNetV1 = model1.fit(train_ds,                 # Обучающая выборка\n","                        epochs=epochs,            # Количество эпох обучения, заданное ранее\n","                        validation_data=val_ds,\n","                        callbacks=[csv_logger,\n","                                   reduceLROnPlateau,\n","                                   model_checkpoint])   # Проверочная выборка\n","\n","                                                    # После того, как пройдет обучение, выведем графики точности и ошибки:\n","plot_graph(MobileNetV1.history['accuracy'],\n","           MobileNetV1.history['val_accuracy'],\n","           MobileNetV1.history['loss'],\n","           MobileNetV1.history['val_loss'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"nLptwHp00O8j"}},{"cell_type":"markdown","source":["ПРОВЕРКА НА ТЕСТОВОМ ДАТАСЕТЕ"],"metadata":{"id":"WAbHwmF0hvQa"}},{"cell_type":"code","metadata":{"id":"h-tCthljhsUp","executionInfo":{"status":"ok","timestamp":1677433077713,"user_tz":-180,"elapsed":359,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["test_dir = '/content/test/'  # Присваиваем путь к базе в переменную data_dir"],"execution_count":12,"outputs":[]},{"cell_type":"code","source":["train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  test_dir,                  # Путь к изображениям\n","  validation_split = 0.9999,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"training\",       # Помечаем, что выборка обучающая (90%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZA3dZiF0iWNf","executionInfo":{"status":"ok","timestamp":1677433077987,"user_tz":-180,"elapsed":3,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"19350168-9ba8-408a-a4ab-453e912ead24"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 280 files belonging to 7 classes.\n","Using 1 files for training.\n"]}]},{"cell_type":"code","metadata":{"id":"0TEDqTMChsUr"},"source":["val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  test_dir,                  # Путь к изображениям\n","  validation_split = 0.9999,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"validation\",     # Помечаем, что выборка проверочная (10%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","  \n","                             # Определяем имена классов:\n","class_names = train_ds.class_names\n","print(class_names)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vfpfkEEZhsUs","executionInfo":{"status":"ok","timestamp":1677433080635,"user_tz":-180,"elapsed":301,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)     # Предварительная тестовая выборка"],"execution_count":15,"outputs":[]},{"cell_type":"code","source":["#Проверка модели на тестовых картинках не участвовавших в обучении\n","scores = model.evaluate(val_ds, verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TxyXQ122zGzq","executionInfo":{"status":"ok","timestamp":1677433082527,"user_tz":-180,"elapsed":1327,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"37f03d4d-ff63-4a66-9772-1780bd358995"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["6/6 [==============================] - 1s 139ms/step - loss: 0.8940 - accuracy: 0.6738\n"]}]},{"cell_type":"code","source":["print('Accuracy on test data:', round(scores[1],4) * 100, '%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ChJLPfimzXAj","executionInfo":{"status":"ok","timestamp":1677433083307,"user_tz":-180,"elapsed":5,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"44e0bdc3-c0dd-4c6d-af12-c33968b24d09"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy on test data: 67.38 %\n"]}]}]}