{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1NN7kGUOAQw8AWVZvI2qCYLk1LffJ0i8f","timestamp":1671290675185},{"file_id":"1lHd2JXaUghwYRCLKMyPmWMBB4A17zMpq","timestamp":1671270281442},{"file_id":"1kxvPwjoWl0Z8tIcMBmmmufuXOvjV5B2Z","timestamp":1671009076068},{"file_id":"1tOG5bRunDTAAIzqc61QyINIDXyjVqJGX","timestamp":1670923255946},{"file_id":"1Rq9U1iwO-GudpcbHtti7FPaPPPixqu5Y","timestamp":1670639795031},{"file_id":"1FJKi2ztW-LnSppMqgbiSw03UQiz7nM36","timestamp":1670584763888},{"file_id":"1BiCtPweM3Z37xQ2dhsRzP0EtVPMmvGYo","timestamp":1629887041892},{"file_id":"1lMqTdtsA9U0WBTwtzZoXr5SJw9qo6tbz","timestamp":1629886424331}],"machine_shape":"hm","collapsed_sections":["NCcRmAr7B6Yn","8MnRkCLuB6Yp","Dv661SfRB6Ys","1uiTQdY9pwPV","K0f3hi5-B6Y1","w92UEihYB6Y3","lo4Pbc6CB6Yw"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"UbELY0XuFGQ0"},"source":["# **Подключение библиотек**"]},{"cell_type":"code","metadata":{"id":"bbx9ujcwmNUc"},"source":["import tensorflow as tf          # Библиотека TensorFlow\n","from tensorflow.keras import layers\n","from keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LambdaCallback, CSVLogger\n","# метод для отрисовки модели \n","from keras.utils.vis_utils import plot_model\n","import gc                        # Модуль Garbage Collector - для помощи в освобождении памяти (Удаляет лишние/неиспользуемые данные)\n","import os                        # Модуль для работы с файлами операционной системы\n","import time                      # Модуль для работы со временем\n","import gdown                     # Модуль для загрузки больших файлов\n","import random                    # Модуль для генерации случайных значений\n","import seaborn as sns            # Модуль для работы с графиками и стилями\n","import matplotlib.pyplot as plt  # Модуль для работы с графиками и изображениями\n","from PIL import Image            # Методы для работы с изображениями"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1Y6CTa8MFHdZ"},"source":["# **Загрузка датасета**"]},{"cell_type":"markdown","source":["Функция для проверки на некоректные файлы"],"metadata":{"id":"nWQaYuoTl0ZL"}},{"cell_type":"code","source":["import os\n","import imghdr\n","path = \"/content/test/04\"\n","dir_ = os.listdir(path)\n","\n","for image in dir_:\n","    file = os.path.join(path,image)\n","    if not imghdr.what(file):\n","        print(file)\n","        os.remove(file) "],"metadata":{"id":"ARTRXu_5ly7H"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9-01MX0XFI4P"},"source":["Загрузим датасет изображений, который будем использовать для демонстрации работы моделей из модуля TensorFlow Applications"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kmzmy-so5uAx","executionInfo":{"status":"ok","timestamp":1671283274304,"user_tz":-180,"elapsed":52442,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"9edafcec-d39c-4e83-8772-794180da1d74"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Разархивирование базы в папку bus:\n","!unzip -q '/content/drive/MyDrive/Стажировка/4Шпон.zip' -d '/content/train/'\n"],"metadata":{"id":"SZSQ5ooq6Xxu"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xG0Wvatl6vCy"},"source":["data_dir = '/content/train/'  # Присваиваем путь к базе в переменную data_dir\n","batch_size = 48             # Определяем batch size\n","image_size = (224, 224)     # Определяем размер изображений"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Создадим папку для тестовых файлов\n","!mkdir /content/test\n","!mkdir /content/test/01\n","!mkdir /content/test/02\n","!mkdir /content/test/03\n","!mkdir /content/test/04"],"metadata":{"id":"vzj3diMjXdOJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Перекинем 10% картинок из train в test \n","path01 = os.listdir(data_dir + '/01')    \n","path02 = os.listdir(data_dir + '/02')    \n","path03 = os.listdir(data_dir + '/03')     \n","path04 = os.listdir(data_dir + '/04')\n","\n","test_samle_size = int(len(path01)*0.1)\n","\n","source= '/content/train/01'\n","destination='/content/test/01'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/02'\n","destination='/content/test/02'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/03'\n","destination='/content/test/03'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n","\n","source= '/content/train/04'\n","destination='/content/test/04'\n","for i in range(test_samle_size):\n","  sample = random.choice(os.listdir(source))\n","  src_path = os.path.join(source, sample)\n","  dst_path = os.path.join(destination, sample)\n","  os.rename(src_path, dst_path)\n"," "],"metadata":{"id":"d7MVqShyYFRP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(4):\n","  train_paths = f'/content/train/0{i+1}'\n","  test_paths = f'/content/test/0{i+1}'\n","  print(len(os.listdir(train_paths)), f'images for training in class {i+1}')\n","  print(len(os.listdir(test_paths)), f' images for testing in class {i+1}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"InNdw29tc74I","executionInfo":{"status":"ok","timestamp":1671288997601,"user_tz":-180,"elapsed":528,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"f324c75a-5612-439e-c36c-6804bae8c7bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["360 images for training in class 1\n","40  images for testing in class 1\n","360 images for training in class 2\n","40  images for testing in class 2\n","360 images for training in class 3\n","40  images for testing in class 3\n","358 images for training in class 4\n","40  images for testing in class 4\n"]}]},{"cell_type":"markdown","metadata":{"id":"hcD-KnBPMneg"},"source":["С помощью метода `image_dataset_from_directory` создадим обучающий и проверочный датасеты:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KX1Xc4atB6Yi","executionInfo":{"status":"ok","timestamp":1671289002020,"user_tz":-180,"elapsed":842,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"4c80708a-e6f7-44fe-d44a-4d607b16b6d0"},"source":["train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.2,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"training\",       # Помечаем, что выборка обучающая (90%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","\n","val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  data_dir,                  # Путь к изображениям\n","  validation_split = 0.2,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"validation\",     # Помечаем, что выборка проверочная (10%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","  \n","                             # Определяем имена классов:\n","class_names = train_ds.class_names\n","print(class_names)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 1438 files belonging to 4 classes.\n","Using 1151 files for training.\n","Found 1438 files belonging to 4 classes.\n","Using 287 files for validation.\n","['01', '02', '03', '04']\n"]}]},{"cell_type":"code","metadata":{"id":"uuR1CibAB6Yj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671289004637,"user_tz":-180,"elapsed":7,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"7c7fa959-ff4f-4515-ba81-a2ff08afafb5"},"source":["# Предварительная подгрузка датасета для ускорения обучения и стабилизации\n","AUTOTUNE = tf.data.AUTOTUNE\n","\n","train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE) # Предварительная обучающая выборка\n","val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)     # Предварительная тестовая выборка\n","\n","print(train_ds)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<PrefetchDataset element_spec=(TensorSpec(shape=(None, 224, 224, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None,), dtype=tf.int32, name=None))>\n"]}]},{"cell_type":"markdown","metadata":{"id":"Y8mUUDsFB6Yk"},"source":["**Дополнительные слои** для модели, с помощью которых можно провести дополнительную аугментацию"]},{"cell_type":"code","metadata":{"id":"1PSraPY_B6Yk"},"source":["# Дополнительная аугментация в виде слоя для модели (для увеличения базы изображений)\n","data_augmentation = tf.keras.Sequential([\n","  tf.keras.layers.experimental.preprocessing.RandomZoom((-0.05, 0.05)), # Произвольное увеличение и уменьшение на 10%\n","  tf.keras.layers.experimental.preprocessing.RandomContrast(0.15),\n","  tf.keras.layers.experimental.preprocessing.RandomFlip(mode=\"horizontal_and_vertical\")])     # Изменение контраста изображений "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9-irE_TfQ0yM"},"source":["Дополнительная функция для отрисовки графиков обучения"]},{"cell_type":"code","metadata":{"id":"CL2rrjNzZsu_"},"source":["def plot_graph(train_acc, val_acc, train_loss, val_loss):\n","  '''\n","  Функция выведет на экран графики точности и ошибки на проверочной и обучающей выборках.\n","  '''\n","  sns.set(style='darkgrid', palette='dark') \n","  plt.figure(figsize=(16, 10))\n","  plt.subplot(2, 2, 1)\n","  plt.title('Точность', fontweight='bold')\n","  plt.plot(train_acc, label='Точность на обучащей выборке')\n","  plt.plot(val_acc, label='Точность на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Доля верных ответов')\n","  plt.legend()\n","\n","  plt.subplot(2, 2, 2)\n","  plt.title('Ошибка', fontweight='bold')\n","  plt.plot(train_loss, label='Ошибка на обучающей выборке')\n","  plt.plot(val_loss, label='Ошибка на проверочной выборке')\n","  plt.xlabel('Эпоха обучения')\n","  plt.ylabel('Ошибка')\n","  plt.legend()\n","\n","  plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["preprocess_input = tf.keras.applications.nasnet.preprocess_input # Нормализация данных на вход в соответствии требованиям модели\n","gc.collect()                                                     # Сборка мусора для освобождения памяти\n","image_shape = image_size + (3,)\n","\n","base_model = tf.keras.applications.MobileNet(\n","    input_shape=image_shape,\n","    include_top=False)\n","\n","inputs = tf.keras.Input(shape=(image_shape))\n","x = data_augmentation(inputs)\n","x = preprocess_input(x)\n","x = base_model(x, training=False)\n","x = layers.GlobalAveragePooling2D()(x)\n","x = tf.keras.layers.Dropout(0.2)(x)\n","outputs = layers.Dense(len(class_names))(x)\n","\n","model = tf.keras.Model(inputs, outputs)        "],"metadata":{"id":"uDLcWoeyQFAk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YATKEZ4LB6Yk"},"source":["#MobileNetV1"]},{"cell_type":"code","metadata":{"id":"sIPvMAe3B6Yl"},"source":["preprocess_input = tf.keras.applications.nasnet.preprocess_input # Нормализация данных на вход в соответствии требованиям модели\n","gc.collect()                                                     # Сборка мусора для освобождения памяти\n","image_shape = image_size + (3,)                                  # Определяем входную размерность в соответствии требованиям модели\n","global_average_layer = tf.keras.layers.GlobalAveragePooling2D()  # Задаем слой GlobalAveragePooling2D\n","prediction_layer = tf.keras.layers.Dense(len(class_names))       # Задаем выходной слой на нужное нам количество классов\n","\n","\n","                                                                 # Создаем базовую модель NASNetMobile:\n","base_model = tf.keras.applications.MobileNet(input_shape=image_shape,\n","                         include_top=False,                      # Не включаем верхнюю часть модели, чтобы можно было использовать свои входные размерности\n","                         weights='imagenet')                     # Используем веса уже предобученной модели на базе Imagenet\n","\n","\n","                                                                 # Собираем полную модель, состоящую из всех наших определенных слоев и базовой модели NASNetMobile:\n","inputs = tf.keras.Input(shape=(image_shape))\n","x = data_augmentation(inputs)\n","x = preprocess_input(x)\n","x = base_model(x, training=False)\n","x = global_average_layer(x)\n","x = tf.keras.layers.Dropout(0.2)(x)\n","outputs = prediction_layer(x)\n","model = tf.keras.Model(inputs, outputs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_learning_rate = 0.0001                                                                        \n","# Компилируем модель:\n","model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),  # Оптимизатор Adam c заданным ранее шагом обучения\n","              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),  # Ошибка SparseCategoricalCrossentropy\n","              metrics=['accuracy'])                                                  # Метрика Accuracy"],"metadata":{"id":"yxe8XmieUQVR"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":678},"id":"xaCmdfTPB6Yl","executionInfo":{"status":"ok","timestamp":1671289684714,"user_tz":-180,"elapsed":82689,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"1d2833cb-9701-4e4c-a39a-553c20b12695"},"source":["epochs = 5    \n","\n","#Задаем коллбеки  \n","history_path = '/content/drive/MyDrive/Стажировка/model_history_log2.csv'\n","weights_path = '/content/drive/MyDrive/Стажировка/MobileNetV1.h5'\n","\n","csv_logger = CSVLogger(history_path, append=True)\n","# уменьшение lr\n","reduceLROnPlateau = ReduceLROnPlateau(monitor='val_loss', factor=0.7, patience=3, verbose=1)\n","# сохранение весов\n","model_checkpoint = ModelCheckpoint(weights_path, monitor='val_loss', save_best_only=True, verbose=1)\n","\n","\n","MobileNetV1 = model.fit(train_ds,                 # Обучающая выборка\n","                        epochs=epochs,            # Количество эпох обучения, заданное ранее\n","                        validation_data=val_ds,\n","                        callbacks=[csv_logger,\n","                                   reduceLROnPlateau,\n","                                   model_checkpoint])   # Проверочная выборка\n","\n","                                                    # После того, как пройдет обучение, выведем графики точности и ошибки:\n","plot_graph(MobileNetV1.history['accuracy'],\n","           MobileNetV1.history['val_accuracy'],\n","           MobileNetV1.history['loss'],\n","           MobileNetV1.history['val_loss'])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","24/24 [==============================] - ETA: 0s - loss: 0.0432 - accuracy: 0.9835\n","Epoch 1: val_loss improved from inf to 0.10635, saving model to /content/drive/MyDrive/Стажировка/MobileNetV1.h5\n","24/24 [==============================] - 13s 524ms/step - loss: 0.0432 - accuracy: 0.9835 - val_loss: 0.1064 - val_accuracy: 0.9756 - lr: 7.0000e-05\n","Epoch 2/5\n","24/24 [==============================] - ETA: 0s - loss: 0.0276 - accuracy: 0.9904\n","Epoch 2: val_loss did not improve from 0.10635\n","24/24 [==============================] - 12s 505ms/step - loss: 0.0276 - accuracy: 0.9904 - val_loss: 0.1263 - val_accuracy: 0.9756 - lr: 7.0000e-05\n","Epoch 3/5\n","24/24 [==============================] - ETA: 0s - loss: 0.0113 - accuracy: 0.9948\n","Epoch 3: val_loss improved from 0.10635 to 0.08446, saving model to /content/drive/MyDrive/Стажировка/MobileNetV1.h5\n","24/24 [==============================] - 13s 546ms/step - loss: 0.0113 - accuracy: 0.9948 - val_loss: 0.0845 - val_accuracy: 0.9826 - lr: 7.0000e-05\n","Epoch 4/5\n","24/24 [==============================] - ETA: 0s - loss: 0.0078 - accuracy: 0.9957\n","Epoch 4: val_loss did not improve from 0.08446\n","24/24 [==============================] - 13s 542ms/step - loss: 0.0078 - accuracy: 0.9957 - val_loss: 0.1066 - val_accuracy: 0.9826 - lr: 7.0000e-05\n","Epoch 5/5\n","24/24 [==============================] - ETA: 0s - loss: 0.0045 - accuracy: 0.9991\n","Epoch 5: val_loss did not improve from 0.08446\n","24/24 [==============================] - 13s 549ms/step - loss: 0.0045 - accuracy: 0.9991 - val_loss: 0.0894 - val_accuracy: 0.9861 - lr: 7.0000e-05\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x720 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["ПРОВЕРКА НА ТЕСТОВОМ ДАТАСЕТЕ"],"metadata":{"id":"WAbHwmF0hvQa"}},{"cell_type":"code","metadata":{"id":"h-tCthljhsUp"},"source":["test_dir = '/content/test/'  # Присваиваем путь к базе в переменную data_dir"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  test_dir,                  # Путь к изображениям\n","  validation_split = 0.9999,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"training\",       # Помечаем, что выборка обучающая (90%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZA3dZiF0iWNf","executionInfo":{"status":"ok","timestamp":1671289947047,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"6f91bb7d-5b2a-4136-8841-6554fbcac352"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 160 files belonging to 4 classes.\n","Using 1 files for training.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671289947049,"user_tz":-180,"elapsed":13,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"96b9811e-a1f1-48ee-95c3-2790c1e88cc8","id":"0TEDqTMChsUr"},"source":["val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n","  test_dir,                  # Путь к изображениям\n","  validation_split = 0.9999,    # Устанавливаем разделение на обучающую и проверочную выборки (10%)\n","  subset = \"validation\",     # Помечаем, что выборка проверочная (10%)\n","  seed = 123,                # Дополнительное случайное начальное число для перетасовки и преобразований\n","  image_size = image_size,   # Размер изображений, который был задан ранее\n","  batch_size = batch_size)   # Размер батча, который был задан ранее\n","  \n","                             # Определяем имена классов:\n","class_names = train_ds.class_names\n","print(class_names)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 160 files belonging to 4 classes.\n","Using 159 files for validation.\n","['01', '02', '03', '04']\n"]}]},{"cell_type":"code","metadata":{"id":"vfpfkEEZhsUs"},"source":["val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)     # Предварительная тестовая выборка"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Проверка модели на тестовых картинках не участвовавших в обучении\n","scores = model.evaluate(val_ds, verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TxyXQ122zGzq","executionInfo":{"status":"ok","timestamp":1671289959145,"user_tz":-180,"elapsed":366,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"209d411a-0e26-4c90-e0c4-f2b773e67858"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 0s 50ms/step - loss: 0.0399 - accuracy: 0.9874\n"]}]},{"cell_type":"code","source":["print('Accuracy on test data:', round(scores[1],4) * 100, '%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ChJLPfimzXAj","executionInfo":{"status":"ok","timestamp":1671289960974,"user_tz":-180,"elapsed":9,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"49c3d92d-8c32-4834-dc56-6baea9e7860c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy on test data: 98.74000000000001 %\n"]}]}]}