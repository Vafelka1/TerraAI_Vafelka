{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1LntFNrBcr_uoqv7XXuPP214iUqW76j24","timestamp":1706635870370}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"2Q4w0Q9O0Xbs"},"source":["**Содержание темы**\n","\n","1. [Теория](https://colab.research.google.com/drive/1Bhnie2Mu5mA565IFQ9X9ZgwXg8tzA2Og?usp=sharing#scrollTo=2Q4w0Q9O0Xbs)\n","2. Практический ноутбук 1"]},{"cell_type":"markdown","metadata":{"id":"bAuVig-aPv4b"},"source":["## Дуэльная Q-сеть с приоритизированным буфером памяти\n","\n","Сценарий «Смертельный Коридор» (Deadly Corridor)."]},{"cell_type":"code","metadata":{"id":"tfzN-7W_znXd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708778311507,"user_tz":-180,"elapsed":74391,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"ffb17cdd-ada4-4bdb-b72b-ed9d0fc65703"},"source":["# %%bash — значит используем командную строку (не код Python)\n","%%bash\n","\n","# Устанавливаем нужные программы, которые требует документация\n","\n","apt-get update\n","apt-get install build-essential zlib1g-dev libsdl2-dev libjpeg-dev \\\n","nasm tar libbz2-dev libgtk2.0-dev cmake git libfluidsynth-dev libgme-dev \\\n","libopenal-dev timidity libwildmidi-dev unzip\n","\n","# Устанавливаем библиотеку Boost\n","apt-get install libboost-all-dev\n","\n","# Устанавливаем зависимости Lua\n","apt-get install liblua5.1-dev"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Get:1 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease [1,581 B]\n","Get:2 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,626 B]\n","Get:3 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]\n","Hit:4 http://archive.ubuntu.com/ubuntu jammy InRelease\n","Get:5 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  Packages [713 kB]\n","Get:6 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [119 kB]\n","Hit:7 https://ppa.launchpadcontent.net/c2d4u.team/c2d4u4.0+/ubuntu jammy InRelease\n","Hit:8 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n","Hit:9 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n","Get:10 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [1,859 kB]\n","Hit:11 http://archive.ubuntu.com/ubuntu jammy-backports InRelease\n","Hit:12 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n","Get:13 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [1,502 kB]\n","Get:14 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [1,907 kB]\n","Get:15 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [1,786 kB]\n","Get:16 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,343 kB]\n","Fetched 9,345 kB in 3s (3,555 kB/s)\n","Reading package lists...\n","Reading package lists...\n","Building dependency tree...\n","Reading state information...\n","build-essential is already the newest version (12.9ubuntu3).\n","libbz2-dev is already the newest version (1.0.8-5build1).\n","libbz2-dev set to manually installed.\n","libjpeg-dev is already the newest version (8c-2ubuntu10).\n","libjpeg-dev set to manually installed.\n","git is already the newest version (1:2.34.1-1ubuntu1.10).\n","unzip is already the newest version (6.0-26ubuntu3.2).\n","zlib1g-dev is already the newest version (1:1.2.11.dfsg-2ubuntu9.2).\n","zlib1g-dev set to manually installed.\n","The following additional packages will be installed:\n","  autopoint cmake-data debhelper debugedit dh-autoreconf dh-strip-nondeterminism dwz\n","  fluid-soundfont-gm freepats gettext gettext-base gir1.2-atk-1.0 gir1.2-freedesktop\n","  gir1.2-gdkpixbuf-2.0 gir1.2-gtk-2.0 gir1.2-harfbuzz-0.0 gir1.2-ibus-1.0 gir1.2-pango-1.0\n","  intltool-debian libao-common libao4 libarchive-cpio-perl libarchive-zip-perl libatk1.0-dev\n","  libblkid-dev libcairo-script-interpreter2 libcairo2-dev libdatrie-dev libdbus-1-dev\n","  libdebhelper-perl libdecor-0-dev libdrm-dev libegl-dev libegl1-mesa-dev libffi-dev\n","  libfile-stripnondeterminism-perl libfluidsynth3 libfribidi-dev libgail-common libgail18\n","  libgbm-dev libgdk-pixbuf-2.0-dev libgdk-pixbuf2.0-bin libgl-dev libgles-dev libgles1\n","  libglib2.0-dev libglib2.0-dev-bin libglu1-mesa libglu1-mesa-dev libglvnd-core-dev libglvnd-dev\n","  libglx-dev libgraphite2-dev libgtk2.0-0 libgtk2.0-bin libgtk2.0-common libharfbuzz-dev\n","  libharfbuzz-gobject0 libharfbuzz-icu0 libibus-1.0-5 libibus-1.0-dev libice-dev libinstpatch-1.0-2\n","  libinstpatch-dev liblzo2-2 libmail-sendmail-perl libmount-dev libopengl-dev libpango1.0-dev\n","  libpangoxft-1.0-0 libpciaccess-dev libpixman-1-dev libpulse-dev libpulse-mainloop-glib0\n","  librsvg2-common libselinux1-dev libsepol-dev libsm-dev libsndio-dev libsub-override-perl\n","  libsys-hostname-long-perl libsystemd-dev libthai-dev libtool libudev-dev libudev1 libwayland-bin\n","  libwayland-dev libwildmidi-config libwildmidi2 libxcb-render0-dev libxcb-shm0-dev\n","  libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev libxinerama-dev\n","  libxkbcommon-dev libxml2-utils libxrandr-dev libxt-dev libxv-dev libxxf86vm-dev pango1.0-tools\n","  po-debconf\n","Suggested packages:\n","  cmake-doc ninja-build cmake-format dh-make fluid-soundfont-gs gettext-doc libasprintf-dev\n","  libgettextpo-dev libaudio2 libsndio6.1 libcairo2-doc libdatrie-doc libgirepository1.0-dev\n","  libglib2.0-doc libgraphite2-utils gvfs libgtk2.0-doc libice-doc libpango1.0-doc libsm-doc\n","  libthai-doc libtool-doc gcj-jdk libwayland-doc libxt-doc graphicsmagick libmail-box-perl\n","  ncompress tar-scripts tar-doc pmidi timidity-daemon\n","The following NEW packages will be installed:\n","  autopoint debhelper debugedit dh-autoreconf dh-strip-nondeterminism dwz fluid-soundfont-gm\n","  freepats gettext gettext-base gir1.2-atk-1.0 gir1.2-freedesktop gir1.2-gdkpixbuf-2.0\n","  gir1.2-gtk-2.0 gir1.2-harfbuzz-0.0 gir1.2-ibus-1.0 gir1.2-pango-1.0 intltool-debian libao-common\n","  libao4 libarchive-cpio-perl libarchive-zip-perl libatk1.0-dev libblkid-dev\n","  libcairo-script-interpreter2 libcairo2-dev libdatrie-dev libdbus-1-dev libdebhelper-perl\n","  libdecor-0-dev libdrm-dev libegl-dev libegl1-mesa-dev libffi-dev libfile-stripnondeterminism-perl\n","  libfluidsynth-dev libfluidsynth3 libfribidi-dev libgail-common libgail18 libgbm-dev\n","  libgdk-pixbuf-2.0-dev libgdk-pixbuf2.0-bin libgl-dev libgles-dev libgles1 libglib2.0-dev\n","  libglib2.0-dev-bin libglu1-mesa libglu1-mesa-dev libglvnd-core-dev libglvnd-dev libglx-dev\n","  libgme-dev libgraphite2-dev libgtk2.0-0 libgtk2.0-bin libgtk2.0-common libgtk2.0-dev\n","  libharfbuzz-dev libharfbuzz-gobject0 libharfbuzz-icu0 libibus-1.0-5 libibus-1.0-dev libice-dev\n","  libinstpatch-1.0-2 libinstpatch-dev liblzo2-2 libmail-sendmail-perl libmount-dev libopenal-dev\n","  libopengl-dev libpango1.0-dev libpangoxft-1.0-0 libpciaccess-dev libpixman-1-dev libpulse-dev\n","  libpulse-mainloop-glib0 librsvg2-common libsdl2-dev libselinux1-dev libsepol-dev libsm-dev\n","  libsndio-dev libsub-override-perl libsys-hostname-long-perl libsystemd-dev libthai-dev libtool\n","  libudev-dev libwayland-bin libwayland-dev libwildmidi-config libwildmidi-dev libwildmidi2\n","  libxcb-render0-dev libxcb-shm0-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev\n","  libxi-dev libxinerama-dev libxkbcommon-dev libxml2-utils libxrandr-dev libxt-dev libxv-dev\n","  libxxf86vm-dev nasm pango1.0-tools po-debconf timidity\n","The following packages will be upgraded:\n","  cmake cmake-data libudev1 tar\n","4 upgraded, 113 newly installed, 0 to remove and 35 not upgraded.\n","Need to get 183 MB of archives.\n","After this operation, 272 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 tar amd64 1.34+dfsg-1ubuntu0.1.22.04.2 [295 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libudev1 amd64 249.11-0ubuntu3.12 [78.2 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu jammy/main amd64 gettext-base amd64 0.21-4ubuntu4 [37.8 kB]\n","Get:4 http://archive.ubuntu.com/ubuntu jammy/main amd64 autopoint all 0.21-4ubuntu4 [422 kB]\n","Get:5 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 cmake amd64 3.22.1-1ubuntu1.22.04.2 [5,010 kB]\n","Get:6 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 cmake-data all 3.22.1-1ubuntu1.22.04.2 [1,913 kB]\n","Get:7 http://archive.ubuntu.com/ubuntu jammy/main amd64 libdebhelper-perl all 13.6ubuntu1 [67.2 kB]\n","Get:8 http://archive.ubuntu.com/ubuntu jammy/main amd64 libtool all 2.4.6-15build2 [164 kB]\n","Get:9 http://archive.ubuntu.com/ubuntu jammy/main amd64 dh-autoreconf all 20 [16.1 kB]\n","Get:10 http://archive.ubuntu.com/ubuntu jammy/main amd64 libarchive-zip-perl all 1.68-1 [90.2 kB]\n","Get:11 http://archive.ubuntu.com/ubuntu jammy/main amd64 libsub-override-perl all 0.09-2 [9,532 B]\n","Get:12 http://archive.ubuntu.com/ubuntu jammy/main amd64 libfile-stripnondeterminism-perl all 1.13.0-1 [18.1 kB]\n","Get:13 http://archive.ubuntu.com/ubuntu jammy/main amd64 dh-strip-nondeterminism all 1.13.0-1 [5,344 B]\n","Get:14 http://archive.ubuntu.com/ubuntu jammy/main amd64 debugedit amd64 1:5.0-4build1 [47.2 kB]\n","Get:15 http://archive.ubuntu.com/ubuntu jammy/main amd64 dwz amd64 0.14-1build2 [105 kB]\n","Get:16 http://archive.ubuntu.com/ubuntu jammy/main amd64 gettext amd64 0.21-4ubuntu4 [868 kB]\n","Get:17 http://archive.ubuntu.com/ubuntu jammy/main amd64 intltool-debian all 0.35.0+20060710.5 [24.9 kB]\n","Get:18 http://archive.ubuntu.com/ubuntu jammy/main amd64 po-debconf all 1.0.21+nmu1 [233 kB]\n","Get:19 http://archive.ubuntu.com/ubuntu jammy/main amd64 debhelper all 13.6ubuntu1 [923 kB]\n","Get:20 http://archive.ubuntu.com/ubuntu jammy/universe amd64 fluid-soundfont-gm all 3.1-5.3 [130 MB]\n","Get:21 http://archive.ubuntu.com/ubuntu jammy/universe amd64 freepats all 20060219-4 [27.9 MB]\n","Get:22 http://archive.ubuntu.com/ubuntu jammy/main amd64 gir1.2-atk-1.0 amd64 2.36.0-3build1 [21.0 kB]\n","Get:23 http://archive.ubuntu.com/ubuntu jammy/main amd64 gir1.2-freedesktop amd64 1.72.0-1 [22.3 kB]\n","Get:24 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 gir1.2-gdkpixbuf-2.0 amd64 2.42.8+dfsg-1ubuntu0.2 [9,482 B]\n","Get:25 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgtk2.0-common all 2.24.33-2ubuntu2 [125 kB]\n","Get:26 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 gir1.2-harfbuzz-0.0 amd64 2.7.4-1ubuntu3.1 [31.6 kB]\n","Get:27 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpangoxft-1.0-0 amd64 1.50.6+ds-2ubuntu1 [31.0 kB]\n","Get:28 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 gir1.2-pango-1.0 amd64 1.50.6+ds-2ubuntu1 [44.0 kB]\n","Get:29 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgtk2.0-0 amd64 2.24.33-2ubuntu2 [2,037 kB]\n","Get:30 http://archive.ubuntu.com/ubuntu jammy/universe amd64 gir1.2-gtk-2.0 amd64 2.24.33-2ubuntu2 [210 kB]\n","Get:31 http://archive.ubuntu.com/ubuntu jammy/main amd64 libibus-1.0-5 amd64 1.5.26-4 [183 kB]\n","Get:32 http://archive.ubuntu.com/ubuntu jammy/main amd64 gir1.2-ibus-1.0 amd64 1.5.26-4 [88.3 kB]\n","Get:33 http://archive.ubuntu.com/ubuntu jammy/main amd64 libao-common all 1.2.2+20180113-1.1ubuntu3 [6,568 B]\n","Get:34 http://archive.ubuntu.com/ubuntu jammy/main amd64 libao4 amd64 1.2.2+20180113-1.1ubuntu3 [35.2 kB]\n","Get:35 http://archive.ubuntu.com/ubuntu jammy/main amd64 libarchive-cpio-perl all 0.10-1.1 [9,928 B]\n","Get:36 http://archive.ubuntu.com/ubuntu jammy/main amd64 libffi-dev amd64 3.4.2-4 [63.7 kB]\n","Get:37 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libglib2.0-dev-bin amd64 2.72.4-0ubuntu2.2 [117 kB]\n","Get:38 http://archive.ubuntu.com/ubuntu jammy/main amd64 libblkid-dev amd64 2.37.2-4ubuntu3 [185 kB]\n","Get:39 http://archive.ubuntu.com/ubuntu jammy/main amd64 libsepol-dev amd64 3.3-1build1 [378 kB]\n","Get:40 http://archive.ubuntu.com/ubuntu jammy/main amd64 libselinux1-dev amd64 3.3-1build2 [158 kB]\n","Get:41 http://archive.ubuntu.com/ubuntu jammy/main amd64 libmount-dev amd64 2.37.2-4ubuntu3 [14.5 kB]\n","Get:42 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libglib2.0-dev amd64 2.72.4-0ubuntu2.2 [1,739 kB]\n","Get:43 http://archive.ubuntu.com/ubuntu jammy/main amd64 libatk1.0-dev amd64 2.36.0-3build1 [96.6 kB]\n","Get:44 http://archive.ubuntu.com/ubuntu jammy/main amd64 liblzo2-2 amd64 2.10-2build3 [53.7 kB]\n","Get:45 http://archive.ubuntu.com/ubuntu jammy/main amd64 libcairo-script-interpreter2 amd64 1.16.0-5ubuntu2 [62.0 kB]\n","Get:46 http://archive.ubuntu.com/ubuntu jammy/main amd64 libice-dev amd64 2:1.0.10-1build2 [51.4 kB]\n","Get:47 http://archive.ubuntu.com/ubuntu jammy/main amd64 libsm-dev amd64 2:1.2.3-1build2 [18.1 kB]\n","Get:48 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpixman-1-dev amd64 0.40.0-1ubuntu0.22.04.1 [280 kB]\n","Get:49 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxcb-render0-dev amd64 1.14-3ubuntu3 [19.6 kB]\n","Get:50 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxcb-shm0-dev amd64 1.14-3ubuntu3 [6,848 B]\n","Get:51 http://archive.ubuntu.com/ubuntu jammy/main amd64 libcairo2-dev amd64 1.16.0-5ubuntu2 [692 kB]\n","Get:52 http://archive.ubuntu.com/ubuntu jammy/main amd64 libdatrie-dev amd64 0.2.13-2 [19.7 kB]\n","Get:53 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libdbus-1-dev amd64 1.12.20-2ubuntu4.1 [188 kB]\n","Get:54 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libwayland-bin amd64 1.20.0-1ubuntu0.1 [20.4 kB]\n","Get:55 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libwayland-dev amd64 1.20.0-1ubuntu0.1 [69.5 kB]\n","Get:56 http://archive.ubuntu.com/ubuntu jammy/main amd64 libdecor-0-dev amd64 0.1.0-3build1 [5,544 B]\n","Get:57 http://archive.ubuntu.com/ubuntu jammy/main amd64 libpciaccess-dev amd64 0.16-3 [21.9 kB]\n","Get:58 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libdrm-dev amd64 2.4.113-2~ubuntu0.22.04.1 [292 kB]\n","Get:59 http://archive.ubuntu.com/ubuntu jammy/main amd64 libglx-dev amd64 1.4.0-1 [14.1 kB]\n","Get:60 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgl-dev amd64 1.4.0-1 [101 kB]\n","Get:61 http://archive.ubuntu.com/ubuntu jammy/main amd64 libegl-dev amd64 1.4.0-1 [18.0 kB]\n","Get:62 http://archive.ubuntu.com/ubuntu jammy/main amd64 libglvnd-core-dev amd64 1.4.0-1 [12.7 kB]\n","Get:63 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgles1 amd64 1.4.0-1 [11.5 kB]\n","Get:64 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgles-dev amd64 1.4.0-1 [49.4 kB]\n","Get:65 http://archive.ubuntu.com/ubuntu jammy/main amd64 libopengl-dev amd64 1.4.0-1 [3,400 B]\n","Get:66 http://archive.ubuntu.com/ubuntu jammy/main amd64 libglvnd-dev amd64 1.4.0-1 [3,162 B]\n","Get:67 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libegl1-mesa-dev amd64 23.2.1-1ubuntu3.1~22.04.2 [11.1 kB]\n","Get:68 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libinstpatch-1.0-2 amd64 1.1.6-1 [240 kB]\n","Get:69 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libfluidsynth3 amd64 2.2.5-1 [246 kB]\n","Get:70 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libinstpatch-dev amd64 1.1.6-1 [54.4 kB]\n","Get:71 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpulse-mainloop-glib0 amd64 1:15.99.1+dfsg1-1ubuntu2.1 [12.4 kB]\n","Get:72 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpulse-dev amd64 1:15.99.1+dfsg1-1ubuntu2.1 [75.6 kB]\n","Get:73 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgbm-dev amd64 23.2.1-1ubuntu3.1~22.04.2 [9,546 B]\n","Get:74 http://archive.ubuntu.com/ubuntu jammy/main amd64 libglu1-mesa amd64 9.0.2-1 [145 kB]\n","Get:75 http://archive.ubuntu.com/ubuntu jammy/main amd64 libglu1-mesa-dev amd64 9.0.2-1 [231 kB]\n","Get:76 http://archive.ubuntu.com/ubuntu jammy/main amd64 libibus-1.0-dev amd64 1.5.26-4 [185 kB]\n","Get:77 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libsndio-dev amd64 1.8.1-1.1 [17.8 kB]\n","Get:78 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libudev-dev amd64 249.11-0ubuntu3.12 [20.7 kB]\n","Get:79 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxfixes-dev amd64 1:6.0.0-1 [12.2 kB]\n","Get:80 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxcursor-dev amd64 1:1.2.0-2build4 [28.2 kB]\n","Get:81 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxi-dev amd64 2:1.8-1build1 [193 kB]\n","Get:82 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxinerama-dev amd64 2:1.1.4-3 [8,104 B]\n","Get:83 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxkbcommon-dev amd64 1.4.0-1 [54.9 kB]\n","Get:84 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxrandr-dev amd64 2:1.5.2-1build1 [26.7 kB]\n","Get:85 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxt-dev amd64 1:1.2.1-1 [396 kB]\n","Get:86 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxv-dev amd64 2:1.0.11-1build2 [33.4 kB]\n","Get:87 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxxf86vm-dev amd64 1:1.1.4-1build3 [13.9 kB]\n","Get:88 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 libsdl2-dev amd64 2.0.20+dfsg-2ubuntu1.22.04.1 [1,767 kB]\n","Get:89 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libsystemd-dev amd64 249.11-0ubuntu3.12 [306 kB]\n","Get:90 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libfluidsynth-dev amd64 2.2.5-1 [35.1 kB]\n","Get:91 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libfribidi-dev amd64 1.0.8-2ubuntu3.1 [64.8 kB]\n","Get:92 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgail18 amd64 2.24.33-2ubuntu2 [15.9 kB]\n","Get:93 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgail-common amd64 2.24.33-2ubuntu2 [132 kB]\n","Get:94 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgdk-pixbuf2.0-bin amd64 2.42.8+dfsg-1ubuntu0.2 [14.2 kB]\n","Get:95 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgdk-pixbuf-2.0-dev amd64 2.42.8+dfsg-1ubuntu0.2 [47.8 kB]\n","Get:96 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libgme-dev amd64 0.6.3-2 [7,884 B]\n","Get:97 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgraphite2-dev amd64 1.3.14-1build2 [14.7 kB]\n","Get:98 http://archive.ubuntu.com/ubuntu jammy/main amd64 libgtk2.0-bin amd64 2.24.33-2ubuntu2 [7,932 B]\n","Get:99 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libharfbuzz-icu0 amd64 2.7.4-1ubuntu3.1 [5,886 B]\n","Get:100 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libharfbuzz-gobject0 amd64 2.7.4-1ubuntu3.1 [26.0 kB]\n","Get:101 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libharfbuzz-dev amd64 2.7.4-1ubuntu3.1 [553 kB]\n","Get:102 http://archive.ubuntu.com/ubuntu jammy/main amd64 libthai-dev amd64 0.1.29-1build1 [26.4 kB]\n","Get:103 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 pango1.0-tools amd64 1.50.6+ds-2ubuntu1 [45.8 kB]\n","Get:104 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpango1.0-dev amd64 1.50.6+ds-2ubuntu1 [154 kB]\n","Get:105 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxcomposite-dev amd64 1:0.4.5-1build2 [9,326 B]\n","Get:106 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxdamage-dev amd64 1:1.1.5-2build2 [5,264 B]\n","Get:107 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libxml2-utils amd64 2.9.13+dfsg-1ubuntu0.3 [40.2 kB]\n","Get:108 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libgtk2.0-dev amd64 2.24.33-2ubuntu2 [778 kB]\n","Get:109 http://archive.ubuntu.com/ubuntu jammy/main amd64 libsys-hostname-long-perl all 1.5-2 [11.5 kB]\n","Get:110 http://archive.ubuntu.com/ubuntu jammy/main amd64 libmail-sendmail-perl all 0.80-1.1 [22.7 kB]\n","Get:111 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libopenal-dev amd64 1:1.19.1-2build3 [22.7 kB]\n","Get:112 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 librsvg2-common amd64 2.52.5+dfsg-3ubuntu0.2 [17.7 kB]\n","Get:113 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libwildmidi-config all 0.4.3-1 [12.4 kB]\n","Get:114 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libwildmidi2 amd64 0.4.3-1 [59.9 kB]\n","Get:115 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libwildmidi-dev amd64 0.4.3-1 [93.2 kB]\n","Get:116 http://archive.ubuntu.com/ubuntu jammy/universe amd64 nasm amd64 2.15.05-1 [375 kB]\n","Get:117 http://archive.ubuntu.com/ubuntu jammy/universe amd64 timidity amd64 2.14.0-8ubuntu1 [683 kB]\n","Fetched 183 MB in 23s (7,816 kB/s)\n","(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 121749 files and directories currently installed.)\r\n","Preparing to unpack .../tar_1.34+dfsg-1ubuntu0.1.22.04.2_amd64.deb ...\r\n","Unpacking tar (1.34+dfsg-1ubuntu0.1.22.04.2) over (1.34+dfsg-1ubuntu0.1.22.04.1) ...\r\n","Setting up tar (1.34+dfsg-1ubuntu0.1.22.04.2) ...\r\n","update-alternatives: warning: forcing reinstallation of alternative /usr/sbin/rmt-tar because link group rmt is broken\r\n","(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 121749 files and directories currently installed.)\r\n","Preparing to unpack .../libudev1_249.11-0ubuntu3.12_amd64.deb ...\r\n","Unpacking libudev1:amd64 (249.11-0ubuntu3.12) over (249.11-0ubuntu3.10) ...\r\n","Setting up libudev1:amd64 (249.11-0ubuntu3.12) ...\r\n","Selecting previously unselected package gettext-base.\r\n","(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 121749 files and directories currently installed.)\r\n","Preparing to unpack .../000-gettext-base_0.21-4ubuntu4_amd64.deb ...\r\n","Unpacking gettext-base (0.21-4ubuntu4) ...\r\n","Selecting previously unselected package autopoint.\r\n","Preparing to unpack .../001-autopoint_0.21-4ubuntu4_all.deb ...\r\n","Unpacking autopoint (0.21-4ubuntu4) ...\r\n","Preparing to unpack .../002-cmake_3.22.1-1ubuntu1.22.04.2_amd64.deb ...\r\n","Unpacking cmake (3.22.1-1ubuntu1.22.04.2) over (3.22.1-1ubuntu1.22.04.1) ...\r\n","Preparing to unpack .../003-cmake-data_3.22.1-1ubuntu1.22.04.2_all.deb ...\r\n","Unpacking cmake-data (3.22.1-1ubuntu1.22.04.2) over (3.22.1-1ubuntu1.22.04.1) ...\r\n","Selecting previously unselected package libdebhelper-perl.\r\n","Preparing to unpack .../004-libdebhelper-perl_13.6ubuntu1_all.deb ...\r\n","Unpacking libdebhelper-perl (13.6ubuntu1) ...\r\n","Selecting previously unselected package libtool.\r\n","Preparing to unpack .../005-libtool_2.4.6-15build2_all.deb ...\r\n","Unpacking libtool (2.4.6-15build2) ...\r\n","Selecting previously unselected package dh-autoreconf.\r\n","Preparing to unpack .../006-dh-autoreconf_20_all.deb ...\r\n","Unpacking dh-autoreconf (20) ...\r\n","Selecting previously unselected package libarchive-zip-perl.\r\n","Preparing to unpack .../007-libarchive-zip-perl_1.68-1_all.deb ...\r\n","Unpacking libarchive-zip-perl (1.68-1) ...\r\n","Selecting previously unselected package libsub-override-perl.\r\n","Preparing to unpack .../008-libsub-override-perl_0.09-2_all.deb ...\r\n","Unpacking libsub-override-perl (0.09-2) ...\r\n","Selecting previously unselected package libfile-stripnondeterminism-perl.\r\n","Preparing to unpack .../009-libfile-stripnondeterminism-perl_1.13.0-1_all.deb ...\r\n","Unpacking libfile-stripnondeterminism-perl (1.13.0-1) ...\r\n","Selecting previously unselected package dh-strip-nondeterminism.\r\n","Preparing to unpack .../010-dh-strip-nondeterminism_1.13.0-1_all.deb ...\r\n","Unpacking dh-strip-nondeterminism (1.13.0-1) ...\r\n","Selecting previously unselected package debugedit.\r\n","Preparing to unpack .../011-debugedit_1%3a5.0-4build1_amd64.deb ...\r\n","Unpacking debugedit (1:5.0-4build1) ...\r\n","Selecting previously unselected package dwz.\r\n","Preparing to unpack .../012-dwz_0.14-1build2_amd64.deb ...\r\n","Unpacking dwz (0.14-1build2) ...\r\n","Selecting previously unselected package gettext.\r\n","Preparing to unpack .../013-gettext_0.21-4ubuntu4_amd64.deb ...\r\n","Unpacking gettext (0.21-4ubuntu4) ...\r\n","Selecting previously unselected package intltool-debian.\r\n","Preparing to unpack .../014-intltool-debian_0.35.0+20060710.5_all.deb ...\r\n","Unpacking intltool-debian (0.35.0+20060710.5) ...\r\n","Selecting previously unselected package po-debconf.\r\n","Preparing to unpack .../015-po-debconf_1.0.21+nmu1_all.deb ...\r\n","Unpacking po-debconf (1.0.21+nmu1) ...\r\n","Selecting previously unselected package debhelper.\r\n","Preparing to unpack .../016-debhelper_13.6ubuntu1_all.deb ...\r\n","Unpacking debhelper (13.6ubuntu1) ...\r\n","Selecting previously unselected package fluid-soundfont-gm.\r\n","Preparing to unpack .../017-fluid-soundfont-gm_3.1-5.3_all.deb ...\r\n","Unpacking fluid-soundfont-gm (3.1-5.3) ...\r\n","Selecting previously unselected package freepats.\r\n","Preparing to unpack .../018-freepats_20060219-4_all.deb ...\r\n","Unpacking freepats (20060219-4) ...\r\n","Selecting previously unselected package gir1.2-atk-1.0:amd64.\r\n","Preparing to unpack .../019-gir1.2-atk-1.0_2.36.0-3build1_amd64.deb ...\r\n","Unpacking gir1.2-atk-1.0:amd64 (2.36.0-3build1) ...\r\n","Selecting previously unselected package gir1.2-freedesktop:amd64.\r\n","Preparing to unpack .../020-gir1.2-freedesktop_1.72.0-1_amd64.deb ...\r\n","Unpacking gir1.2-freedesktop:amd64 (1.72.0-1) ...\r\n","Selecting previously unselected package gir1.2-gdkpixbuf-2.0:amd64.\r\n","Preparing to unpack .../021-gir1.2-gdkpixbuf-2.0_2.42.8+dfsg-1ubuntu0.2_amd64.deb ...\r\n","Unpacking gir1.2-gdkpixbuf-2.0:amd64 (2.42.8+dfsg-1ubuntu0.2) ...\r\n","Selecting previously unselected package libgtk2.0-common.\r\n","Preparing to unpack .../022-libgtk2.0-common_2.24.33-2ubuntu2_all.deb ...\r\n","Unpacking libgtk2.0-common (2.24.33-2ubuntu2) ...\r\n","Selecting previously unselected package gir1.2-harfbuzz-0.0:amd64.\r\n","Preparing to unpack .../023-gir1.2-harfbuzz-0.0_2.7.4-1ubuntu3.1_amd64.deb ...\r\n","Unpacking gir1.2-harfbuzz-0.0:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Selecting previously unselected package libpangoxft-1.0-0:amd64.\r\n","Preparing to unpack .../024-libpangoxft-1.0-0_1.50.6+ds-2ubuntu1_amd64.deb ...\r\n","Unpacking libpangoxft-1.0-0:amd64 (1.50.6+ds-2ubuntu1) ...\r\n","Selecting previously unselected package gir1.2-pango-1.0:amd64.\r\n","Preparing to unpack .../025-gir1.2-pango-1.0_1.50.6+ds-2ubuntu1_amd64.deb ...\r\n","Unpacking gir1.2-pango-1.0:amd64 (1.50.6+ds-2ubuntu1) ...\r\n","Selecting previously unselected package libgtk2.0-0:amd64.\r\n","Preparing to unpack .../026-libgtk2.0-0_2.24.33-2ubuntu2_amd64.deb ...\r\n","Unpacking libgtk2.0-0:amd64 (2.24.33-2ubuntu2) ...\r\n","Selecting previously unselected package gir1.2-gtk-2.0:amd64.\r\n","Preparing to unpack .../027-gir1.2-gtk-2.0_2.24.33-2ubuntu2_amd64.deb ...\r\n","Unpacking gir1.2-gtk-2.0:amd64 (2.24.33-2ubuntu2) ...\r\n","Selecting previously unselected package libibus-1.0-5:amd64.\r\n","Preparing to unpack .../028-libibus-1.0-5_1.5.26-4_amd64.deb ...\r\n","Unpacking libibus-1.0-5:amd64 (1.5.26-4) ...\r\n","Selecting previously unselected package gir1.2-ibus-1.0:amd64.\r\n","Preparing to unpack .../029-gir1.2-ibus-1.0_1.5.26-4_amd64.deb ...\r\n","Unpacking gir1.2-ibus-1.0:amd64 (1.5.26-4) ...\r\n","Selecting previously unselected package libao-common.\r\n","Preparing to unpack .../030-libao-common_1.2.2+20180113-1.1ubuntu3_all.deb ...\r\n","Unpacking libao-common (1.2.2+20180113-1.1ubuntu3) ...\r\n","Selecting previously unselected package libao4:amd64.\r\n","Preparing to unpack .../031-libao4_1.2.2+20180113-1.1ubuntu3_amd64.deb ...\r\n","Unpacking libao4:amd64 (1.2.2+20180113-1.1ubuntu3) ...\r\n","Selecting previously unselected package libarchive-cpio-perl.\r\n","Preparing to unpack .../032-libarchive-cpio-perl_0.10-1.1_all.deb ...\r\n","Unpacking libarchive-cpio-perl (0.10-1.1) ...\r\n","Selecting previously unselected package libffi-dev:amd64.\r\n","Preparing to unpack .../033-libffi-dev_3.4.2-4_amd64.deb ...\r\n","Unpacking libffi-dev:amd64 (3.4.2-4) ...\r\n","Selecting previously unselected package libglib2.0-dev-bin.\r\n","Preparing to unpack .../034-libglib2.0-dev-bin_2.72.4-0ubuntu2.2_amd64.deb ...\r\n","Unpacking libglib2.0-dev-bin (2.72.4-0ubuntu2.2) ...\r\n","Selecting previously unselected package libblkid-dev:amd64.\r\n","Preparing to unpack .../035-libblkid-dev_2.37.2-4ubuntu3_amd64.deb ...\r\n","Unpacking libblkid-dev:amd64 (2.37.2-4ubuntu3) ...\r\n","Selecting previously unselected package libsepol-dev:amd64.\r\n","Preparing to unpack .../036-libsepol-dev_3.3-1build1_amd64.deb ...\r\n","Unpacking libsepol-dev:amd64 (3.3-1build1) ...\r\n","Selecting previously unselected package libselinux1-dev:amd64.\r\n","Preparing to unpack .../037-libselinux1-dev_3.3-1build2_amd64.deb ...\r\n","Unpacking libselinux1-dev:amd64 (3.3-1build2) ...\r\n","Selecting previously unselected package libmount-dev:amd64.\r\n","Preparing to unpack .../038-libmount-dev_2.37.2-4ubuntu3_amd64.deb ...\r\n","Unpacking libmount-dev:amd64 (2.37.2-4ubuntu3) ...\r\n","Selecting previously unselected package libglib2.0-dev:amd64.\r\n","Preparing to unpack .../039-libglib2.0-dev_2.72.4-0ubuntu2.2_amd64.deb ...\r\n","Unpacking libglib2.0-dev:amd64 (2.72.4-0ubuntu2.2) ...\r\n","Selecting previously unselected package libatk1.0-dev:amd64.\r\n","Preparing to unpack .../040-libatk1.0-dev_2.36.0-3build1_amd64.deb ...\r\n","Unpacking libatk1.0-dev:amd64 (2.36.0-3build1) ...\r\n","Selecting previously unselected package liblzo2-2:amd64.\r\n","Preparing to unpack .../041-liblzo2-2_2.10-2build3_amd64.deb ...\r\n","Unpacking liblzo2-2:amd64 (2.10-2build3) ...\r\n","Selecting previously unselected package libcairo-script-interpreter2:amd64.\r\n","Preparing to unpack .../042-libcairo-script-interpreter2_1.16.0-5ubuntu2_amd64.deb ...\r\n","Unpacking libcairo-script-interpreter2:amd64 (1.16.0-5ubuntu2) ...\r\n","Selecting previously unselected package libice-dev:amd64.\r\n","Preparing to unpack .../043-libice-dev_2%3a1.0.10-1build2_amd64.deb ...\r\n","Unpacking libice-dev:amd64 (2:1.0.10-1build2) ...\r\n","Selecting previously unselected package libsm-dev:amd64.\r\n","Preparing to unpack .../044-libsm-dev_2%3a1.2.3-1build2_amd64.deb ...\r\n","Unpacking libsm-dev:amd64 (2:1.2.3-1build2) ...\r\n","Selecting previously unselected package libpixman-1-dev:amd64.\r\n","Preparing to unpack .../045-libpixman-1-dev_0.40.0-1ubuntu0.22.04.1_amd64.deb ...\r\n","Unpacking libpixman-1-dev:amd64 (0.40.0-1ubuntu0.22.04.1) ...\r\n","Selecting previously unselected package libxcb-render0-dev:amd64.\r\n","Preparing to unpack .../046-libxcb-render0-dev_1.14-3ubuntu3_amd64.deb ...\r\n","Unpacking libxcb-render0-dev:amd64 (1.14-3ubuntu3) ...\r\n","Selecting previously unselected package libxcb-shm0-dev:amd64.\r\n","Preparing to unpack .../047-libxcb-shm0-dev_1.14-3ubuntu3_amd64.deb ...\r\n","Unpacking libxcb-shm0-dev:amd64 (1.14-3ubuntu3) ...\r\n","Selecting previously unselected package libcairo2-dev:amd64.\r\n","Preparing to unpack .../048-libcairo2-dev_1.16.0-5ubuntu2_amd64.deb ...\r\n","Unpacking libcairo2-dev:amd64 (1.16.0-5ubuntu2) ...\r\n","Selecting previously unselected package libdatrie-dev:amd64.\r\n","Preparing to unpack .../049-libdatrie-dev_0.2.13-2_amd64.deb ...\r\n","Unpacking libdatrie-dev:amd64 (0.2.13-2) ...\r\n","Selecting previously unselected package libdbus-1-dev:amd64.\r\n","Preparing to unpack .../050-libdbus-1-dev_1.12.20-2ubuntu4.1_amd64.deb ...\r\n","Unpacking libdbus-1-dev:amd64 (1.12.20-2ubuntu4.1) ...\r\n","Selecting previously unselected package libwayland-bin.\r\n","Preparing to unpack .../051-libwayland-bin_1.20.0-1ubuntu0.1_amd64.deb ...\r\n","Unpacking libwayland-bin (1.20.0-1ubuntu0.1) ...\r\n","Selecting previously unselected package libwayland-dev:amd64.\r\n","Preparing to unpack .../052-libwayland-dev_1.20.0-1ubuntu0.1_amd64.deb ...\r\n","Unpacking libwayland-dev:amd64 (1.20.0-1ubuntu0.1) ...\r\n","Selecting previously unselected package libdecor-0-dev:amd64.\r\n","Preparing to unpack .../053-libdecor-0-dev_0.1.0-3build1_amd64.deb ...\r\n","Unpacking libdecor-0-dev:amd64 (0.1.0-3build1) ...\r\n","Selecting previously unselected package libpciaccess-dev:amd64.\r\n","Preparing to unpack .../054-libpciaccess-dev_0.16-3_amd64.deb ...\r\n","Unpacking libpciaccess-dev:amd64 (0.16-3) ...\r\n","Selecting previously unselected package libdrm-dev:amd64.\r\n","Preparing to unpack .../055-libdrm-dev_2.4.113-2~ubuntu0.22.04.1_amd64.deb ...\r\n","Unpacking libdrm-dev:amd64 (2.4.113-2~ubuntu0.22.04.1) ...\r\n","Selecting previously unselected package libglx-dev:amd64.\r\n","Preparing to unpack .../056-libglx-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libglx-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libgl-dev:amd64.\r\n","Preparing to unpack .../057-libgl-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libgl-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libegl-dev:amd64.\r\n","Preparing to unpack .../058-libegl-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libegl-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libglvnd-core-dev:amd64.\r\n","Preparing to unpack .../059-libglvnd-core-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libglvnd-core-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libgles1:amd64.\r\n","Preparing to unpack .../060-libgles1_1.4.0-1_amd64.deb ...\r\n","Unpacking libgles1:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libgles-dev:amd64.\r\n","Preparing to unpack .../061-libgles-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libgles-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libopengl-dev:amd64.\r\n","Preparing to unpack .../062-libopengl-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libopengl-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libglvnd-dev:amd64.\r\n","Preparing to unpack .../063-libglvnd-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libglvnd-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libegl1-mesa-dev:amd64.\r\n","Preparing to unpack .../064-libegl1-mesa-dev_23.2.1-1ubuntu3.1~22.04.2_amd64.deb ...\r\n","Unpacking libegl1-mesa-dev:amd64 (23.2.1-1ubuntu3.1~22.04.2) ...\r\n","Selecting previously unselected package libinstpatch-1.0-2:amd64.\r\n","Preparing to unpack .../065-libinstpatch-1.0-2_1.1.6-1_amd64.deb ...\r\n","Unpacking libinstpatch-1.0-2:amd64 (1.1.6-1) ...\r\n","Selecting previously unselected package libfluidsynth3:amd64.\r\n","Preparing to unpack .../066-libfluidsynth3_2.2.5-1_amd64.deb ...\r\n","Unpacking libfluidsynth3:amd64 (2.2.5-1) ...\r\n","Selecting previously unselected package libinstpatch-dev:amd64.\r\n","Preparing to unpack .../067-libinstpatch-dev_1.1.6-1_amd64.deb ...\r\n","Unpacking libinstpatch-dev:amd64 (1.1.6-1) ...\r\n","Selecting previously unselected package libpulse-mainloop-glib0:amd64.\r\n","Preparing to unpack .../068-libpulse-mainloop-glib0_1%3a15.99.1+dfsg1-1ubuntu2.1_amd64.deb ...\r\n","Unpacking libpulse-mainloop-glib0:amd64 (1:15.99.1+dfsg1-1ubuntu2.1) ...\r\n","Selecting previously unselected package libpulse-dev:amd64.\r\n","Preparing to unpack .../069-libpulse-dev_1%3a15.99.1+dfsg1-1ubuntu2.1_amd64.deb ...\r\n","Unpacking libpulse-dev:amd64 (1:15.99.1+dfsg1-1ubuntu2.1) ...\r\n","Selecting previously unselected package libgbm-dev:amd64.\r\n","Preparing to unpack .../070-libgbm-dev_23.2.1-1ubuntu3.1~22.04.2_amd64.deb ...\r\n","Unpacking libgbm-dev:amd64 (23.2.1-1ubuntu3.1~22.04.2) ...\r\n","Selecting previously unselected package libglu1-mesa:amd64.\r\n","Preparing to unpack .../071-libglu1-mesa_9.0.2-1_amd64.deb ...\r\n","Unpacking libglu1-mesa:amd64 (9.0.2-1) ...\r\n","Selecting previously unselected package libglu1-mesa-dev:amd64.\r\n","Preparing to unpack .../072-libglu1-mesa-dev_9.0.2-1_amd64.deb ...\r\n","Unpacking libglu1-mesa-dev:amd64 (9.0.2-1) ...\r\n","Selecting previously unselected package libibus-1.0-dev:amd64.\r\n","Preparing to unpack .../073-libibus-1.0-dev_1.5.26-4_amd64.deb ...\r\n","Unpacking libibus-1.0-dev:amd64 (1.5.26-4) ...\r\n","Selecting previously unselected package libsndio-dev:amd64.\r\n","Preparing to unpack .../074-libsndio-dev_1.8.1-1.1_amd64.deb ...\r\n","Unpacking libsndio-dev:amd64 (1.8.1-1.1) ...\r\n","Selecting previously unselected package libudev-dev:amd64.\r\n","Preparing to unpack .../075-libudev-dev_249.11-0ubuntu3.12_amd64.deb ...\r\n","Unpacking libudev-dev:amd64 (249.11-0ubuntu3.12) ...\r\n","Selecting previously unselected package libxfixes-dev:amd64.\r\n","Preparing to unpack .../076-libxfixes-dev_1%3a6.0.0-1_amd64.deb ...\r\n","Unpacking libxfixes-dev:amd64 (1:6.0.0-1) ...\r\n","Selecting previously unselected package libxcursor-dev:amd64.\r\n","Preparing to unpack .../077-libxcursor-dev_1%3a1.2.0-2build4_amd64.deb ...\r\n","Unpacking libxcursor-dev:amd64 (1:1.2.0-2build4) ...\r\n","Selecting previously unselected package libxi-dev:amd64.\r\n","Preparing to unpack .../078-libxi-dev_2%3a1.8-1build1_amd64.deb ...\r\n","Unpacking libxi-dev:amd64 (2:1.8-1build1) ...\r\n","Selecting previously unselected package libxinerama-dev:amd64.\r\n","Preparing to unpack .../079-libxinerama-dev_2%3a1.1.4-3_amd64.deb ...\r\n","Unpacking libxinerama-dev:amd64 (2:1.1.4-3) ...\r\n","Selecting previously unselected package libxkbcommon-dev:amd64.\r\n","Preparing to unpack .../080-libxkbcommon-dev_1.4.0-1_amd64.deb ...\r\n","Unpacking libxkbcommon-dev:amd64 (1.4.0-1) ...\r\n","Selecting previously unselected package libxrandr-dev:amd64.\r\n","Preparing to unpack .../081-libxrandr-dev_2%3a1.5.2-1build1_amd64.deb ...\r\n","Unpacking libxrandr-dev:amd64 (2:1.5.2-1build1) ...\r\n","Selecting previously unselected package libxt-dev:amd64.\r\n","Preparing to unpack .../082-libxt-dev_1%3a1.2.1-1_amd64.deb ...\r\n","Unpacking libxt-dev:amd64 (1:1.2.1-1) ...\r\n","Selecting previously unselected package libxv-dev:amd64.\r\n","Preparing to unpack .../083-libxv-dev_2%3a1.0.11-1build2_amd64.deb ...\r\n","Unpacking libxv-dev:amd64 (2:1.0.11-1build2) ...\r\n","Selecting previously unselected package libxxf86vm-dev:amd64.\r\n","Preparing to unpack .../084-libxxf86vm-dev_1%3a1.1.4-1build3_amd64.deb ...\r\n","Unpacking libxxf86vm-dev:amd64 (1:1.1.4-1build3) ...\r\n","Selecting previously unselected package libsdl2-dev:amd64.\r\n","Preparing to unpack .../085-libsdl2-dev_2.0.20+dfsg-2ubuntu1.22.04.1_amd64.deb ...\r\n","Unpacking libsdl2-dev:amd64 (2.0.20+dfsg-2ubuntu1.22.04.1) ...\r\n","Selecting previously unselected package libsystemd-dev:amd64.\r\n","Preparing to unpack .../086-libsystemd-dev_249.11-0ubuntu3.12_amd64.deb ...\r\n","Unpacking libsystemd-dev:amd64 (249.11-0ubuntu3.12) ...\r\n","Selecting previously unselected package libfluidsynth-dev:amd64.\r\n","Preparing to unpack .../087-libfluidsynth-dev_2.2.5-1_amd64.deb ...\r\n","Unpacking libfluidsynth-dev:amd64 (2.2.5-1) ...\r\n","Selecting previously unselected package libfribidi-dev:amd64.\r\n","Preparing to unpack .../088-libfribidi-dev_1.0.8-2ubuntu3.1_amd64.deb ...\r\n","Unpacking libfribidi-dev:amd64 (1.0.8-2ubuntu3.1) ...\r\n","Selecting previously unselected package libgail18:amd64.\r\n","Preparing to unpack .../089-libgail18_2.24.33-2ubuntu2_amd64.deb ...\r\n","Unpacking libgail18:amd64 (2.24.33-2ubuntu2) ...\r\n","Selecting previously unselected package libgail-common:amd64.\r\n","Preparing to unpack .../090-libgail-common_2.24.33-2ubuntu2_amd64.deb ...\r\n","Unpacking libgail-common:amd64 (2.24.33-2ubuntu2) ...\r\n","Selecting previously unselected package libgdk-pixbuf2.0-bin.\r\n","Preparing to unpack .../091-libgdk-pixbuf2.0-bin_2.42.8+dfsg-1ubuntu0.2_amd64.deb ...\r\n","Unpacking libgdk-pixbuf2.0-bin (2.42.8+dfsg-1ubuntu0.2) ...\r\n","Selecting previously unselected package libgdk-pixbuf-2.0-dev:amd64.\r\n","Preparing to unpack .../092-libgdk-pixbuf-2.0-dev_2.42.8+dfsg-1ubuntu0.2_amd64.deb ...\r\n","Unpacking libgdk-pixbuf-2.0-dev:amd64 (2.42.8+dfsg-1ubuntu0.2) ...\r\n","Selecting previously unselected package libgme-dev:amd64.\r\n","Preparing to unpack .../093-libgme-dev_0.6.3-2_amd64.deb ...\r\n","Unpacking libgme-dev:amd64 (0.6.3-2) ...\r\n","Selecting previously unselected package libgraphite2-dev:amd64.\r\n","Preparing to unpack .../094-libgraphite2-dev_1.3.14-1build2_amd64.deb ...\r\n","Unpacking libgraphite2-dev:amd64 (1.3.14-1build2) ...\r\n","Selecting previously unselected package libgtk2.0-bin.\r\n","Preparing to unpack .../095-libgtk2.0-bin_2.24.33-2ubuntu2_amd64.deb ...\r\n","Unpacking libgtk2.0-bin (2.24.33-2ubuntu2) ...\r\n","Selecting previously unselected package libharfbuzz-icu0:amd64.\r\n","Preparing to unpack .../096-libharfbuzz-icu0_2.7.4-1ubuntu3.1_amd64.deb ...\r\n","Unpacking libharfbuzz-icu0:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Selecting previously unselected package libharfbuzz-gobject0:amd64.\r\n","Preparing to unpack .../097-libharfbuzz-gobject0_2.7.4-1ubuntu3.1_amd64.deb ...\r\n","Unpacking libharfbuzz-gobject0:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Selecting previously unselected package libharfbuzz-dev:amd64.\r\n","Preparing to unpack .../098-libharfbuzz-dev_2.7.4-1ubuntu3.1_amd64.deb ...\r\n","Unpacking libharfbuzz-dev:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Selecting previously unselected package libthai-dev:amd64.\r\n","Preparing to unpack .../099-libthai-dev_0.1.29-1build1_amd64.deb ...\r\n","Unpacking libthai-dev:amd64 (0.1.29-1build1) ...\r\n","Selecting previously unselected package pango1.0-tools.\r\n","Preparing to unpack .../100-pango1.0-tools_1.50.6+ds-2ubuntu1_amd64.deb ...\r\n","Unpacking pango1.0-tools (1.50.6+ds-2ubuntu1) ...\r\n","Selecting previously unselected package libpango1.0-dev:amd64.\r\n","Preparing to unpack .../101-libpango1.0-dev_1.50.6+ds-2ubuntu1_amd64.deb ...\r\n","Unpacking libpango1.0-dev:amd64 (1.50.6+ds-2ubuntu1) ...\r\n","Selecting previously unselected package libxcomposite-dev:amd64.\r\n","Preparing to unpack .../102-libxcomposite-dev_1%3a0.4.5-1build2_amd64.deb ...\r\n","Unpacking libxcomposite-dev:amd64 (1:0.4.5-1build2) ...\r\n","Selecting previously unselected package libxdamage-dev:amd64.\r\n","Preparing to unpack .../103-libxdamage-dev_1%3a1.1.5-2build2_amd64.deb ...\r\n","Unpacking libxdamage-dev:amd64 (1:1.1.5-2build2) ...\r\n","Selecting previously unselected package libxml2-utils.\r\n","Preparing to unpack .../104-libxml2-utils_2.9.13+dfsg-1ubuntu0.3_amd64.deb ...\r\n","Unpacking libxml2-utils (2.9.13+dfsg-1ubuntu0.3) ...\r\n","Selecting previously unselected package libgtk2.0-dev:amd64.\r\n","Preparing to unpack .../105-libgtk2.0-dev_2.24.33-2ubuntu2_amd64.deb ...\r\n","Unpacking libgtk2.0-dev:amd64 (2.24.33-2ubuntu2) ...\r\n","Selecting previously unselected package libsys-hostname-long-perl.\r\n","Preparing to unpack .../106-libsys-hostname-long-perl_1.5-2_all.deb ...\r\n","Unpacking libsys-hostname-long-perl (1.5-2) ...\r\n","Selecting previously unselected package libmail-sendmail-perl.\r\n","Preparing to unpack .../107-libmail-sendmail-perl_0.80-1.1_all.deb ...\r\n","Unpacking libmail-sendmail-perl (0.80-1.1) ...\r\n","Selecting previously unselected package libopenal-dev:amd64.\r\n","Preparing to unpack .../108-libopenal-dev_1%3a1.19.1-2build3_amd64.deb ...\r\n","Unpacking libopenal-dev:amd64 (1:1.19.1-2build3) ...\r\n","Selecting previously unselected package librsvg2-common:amd64.\r\n","Preparing to unpack .../109-librsvg2-common_2.52.5+dfsg-3ubuntu0.2_amd64.deb ...\r\n","Unpacking librsvg2-common:amd64 (2.52.5+dfsg-3ubuntu0.2) ...\r\n","Selecting previously unselected package libwildmidi-config.\r\n","Preparing to unpack .../110-libwildmidi-config_0.4.3-1_all.deb ...\r\n","Unpacking libwildmidi-config (0.4.3-1) ...\r\n","Selecting previously unselected package libwildmidi2:amd64.\r\n","Preparing to unpack .../111-libwildmidi2_0.4.3-1_amd64.deb ...\r\n","Unpacking libwildmidi2:amd64 (0.4.3-1) ...\r\n","Selecting previously unselected package libwildmidi-dev.\r\n","Preparing to unpack .../112-libwildmidi-dev_0.4.3-1_amd64.deb ...\r\n","Unpacking libwildmidi-dev (0.4.3-1) ...\r\n","Selecting previously unselected package nasm.\r\n","Preparing to unpack .../113-nasm_2.15.05-1_amd64.deb ...\r\n","Unpacking nasm (2.15.05-1) ...\r\n","Selecting previously unselected package timidity.\r\n","Preparing to unpack .../114-timidity_2.14.0-8ubuntu1_amd64.deb ...\r\n","Unpacking timidity (2.14.0-8ubuntu1) ...\r\n","Setting up libglib2.0-dev-bin (2.72.4-0ubuntu2.2) ...\r\n","Setting up libblkid-dev:amd64 (2.37.2-4ubuntu3) ...\r\n","Setting up freepats (20060219-4) ...\r\n","Setting up gir1.2-freedesktop:amd64 (1.72.0-1) ...\r\n","Setting up libsndio-dev:amd64 (1.8.1-1.1) ...\r\n","Setting up libharfbuzz-icu0:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Setting up libpixman-1-dev:amd64 (0.40.0-1ubuntu0.22.04.1) ...\r\n","Setting up libpciaccess-dev:amd64 (0.16-3) ...\r\n","Setting up libpangoxft-1.0-0:amd64 (1.50.6+ds-2ubuntu1) ...\r\n","Setting up libglvnd-core-dev:amd64 (1.4.0-1) ...\r\n","Setting up gir1.2-gdkpixbuf-2.0:amd64 (2.42.8+dfsg-1ubuntu0.2) ...\r\n","Setting up libice-dev:amd64 (2:1.0.10-1build2) ...\r\n","Setting up libtool (2.4.6-15build2) ...\r\n","Setting up gir1.2-atk-1.0:amd64 (2.36.0-3build1) ...\r\n","Setting up libsm-dev:amd64 (2:1.2.3-1build2) ...\r\n","Setting up libarchive-zip-perl (1.68-1) ...\r\n","Setting up libopenal-dev:amd64 (1:1.19.1-2build3) ...\r\n","Setting up libfribidi-dev:amd64 (1.0.8-2ubuntu3.1) ...\r\n","Setting up libxxf86vm-dev:amd64 (1:1.1.4-1build3) ...\r\n","Setting up libxkbcommon-dev:amd64 (1.4.0-1) ...\r\n","Setting up libdebhelper-perl (13.6ubuntu1) ...\r\n","Setting up libibus-1.0-5:amd64 (1.5.26-4) ...\r\n","Setting up pango1.0-tools (1.50.6+ds-2ubuntu1) ...\r\n","Setting up libgme-dev:amd64 (0.6.3-2) ...\r\n","Setting up gettext-base (0.21-4ubuntu4) ...\r\n","Setting up liblzo2-2:amd64 (2.10-2build3) ...\r\n","Setting up libharfbuzz-gobject0:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Setting up libffi-dev:amd64 (3.4.2-4) ...\r\n","Setting up gir1.2-harfbuzz-0.0:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Setting up libgbm-dev:amd64 (23.2.1-1ubuntu3.1~22.04.2) ...\r\n","Setting up libao-common (1.2.2+20180113-1.1ubuntu3) ...\r\n","Setting up libxfixes-dev:amd64 (1:6.0.0-1) ...\r\n","Setting up libxcb-shm0-dev:amd64 (1.14-3ubuntu3) ...\r\n","Setting up libxv-dev:amd64 (2:1.0.11-1build2) ...\r\n","Setting up libwayland-bin (1.20.0-1ubuntu0.1) ...\r\n","Setting up libgraphite2-dev:amd64 (1.3.14-1build2) ...\r\n","Setting up gir1.2-pango-1.0:amd64 (1.50.6+ds-2ubuntu1) ...\r\n","Setting up libxrandr-dev:amd64 (2:1.5.2-1build1) ...\r\n","Setting up libwildmidi-config (0.4.3-1) ...\r\n","Setting up libdbus-1-dev:amd64 (1.12.20-2ubuntu4.1) ...\r\n","Setting up libxt-dev:amd64 (1:1.2.1-1) ...\r\n","Setting up libpulse-mainloop-glib0:amd64 (1:15.99.1+dfsg1-1ubuntu2.1) ...\r\n","Setting up libgles1:amd64 (1.4.0-1) ...\r\n","Setting up autopoint (0.21-4ubuntu4) ...\r\n","Setting up libudev-dev:amd64 (249.11-0ubuntu3.12) ...\r\n","Setting up libxinerama-dev:amd64 (2:1.1.4-3) ...\r\n","Setting up libsepol-dev:amd64 (3.3-1build1) ...\r\n","Setting up libxcb-render0-dev:amd64 (1.14-3ubuntu3) ...\r\n","Setting up librsvg2-common:amd64 (2.52.5+dfsg-3ubuntu0.2) ...\r\n","Setting up nasm (2.15.05-1) ...\r\n","Setting up libao4:amd64 (1.2.2+20180113-1.1ubuntu3) ...\r\n","Setting up dwz (0.14-1build2) ...\r\n","Setting up libdatrie-dev:amd64 (0.2.13-2) ...\r\n","Setting up libwildmidi2:amd64 (0.4.3-1) ...\r\n","Setting up libgdk-pixbuf2.0-bin (2.42.8+dfsg-1ubuntu0.2) ...\r\n","Setting up libarchive-cpio-perl (0.10-1.1) ...\r\n","Setting up debugedit (1:5.0-4build1) ...\r\n","Setting up libsub-override-perl (0.09-2) ...\r\n","Setting up libglx-dev:amd64 (1.4.0-1) ...\r\n","Setting up fluid-soundfont-gm (3.1-5.3) ...\r\n","update-alternatives: using /usr/share/sounds/sf2/FluidR3_GM.sf2 to provide /usr/share/sounds/sf2/default-GM.sf2 (default-GM.sf2) in auto mode\r\n","update-alternatives: using /usr/share/sounds/sf2/FluidR3_GM.sf2 to provide /usr/share/sounds/sf3/default-GM.sf3 (default-GM.sf3) in auto mode\r\n","Setting up libgtk2.0-common (2.24.33-2ubuntu2) ...\r\n","Setting up cmake-data (3.22.1-1ubuntu1.22.04.2) ...\r\n","Setting up libglu1-mesa:amd64 (9.0.2-1) ...\r\n","Setting up libopengl-dev:amd64 (1.4.0-1) ...\r\n","Setting up libxi-dev:amd64 (2:1.8-1build1) ...\r\n","Setting up libxml2-utils (2.9.13+dfsg-1ubuntu0.3) ...\r\n","Setting up gir1.2-ibus-1.0:amd64 (1.5.26-4) ...\r\n","Setting up libsys-hostname-long-perl (1.5-2) ...\r\n","Setting up libinstpatch-1.0-2:amd64 (1.1.6-1) ...\r\n","Setting up libgl-dev:amd64 (1.4.0-1) ...\r\n","Setting up libsystemd-dev:amd64 (249.11-0ubuntu3.12) ...\r\n","Setting up libfluidsynth3:amd64 (2.2.5-1) ...\r\n","Setting up libxdamage-dev:amd64 (1:1.1.5-2build2) ...\r\n","Setting up libfile-stripnondeterminism-perl (1.13.0-1) ...\r\n","Setting up libcairo-script-interpreter2:amd64 (1.16.0-5ubuntu2) ...\r\n","Setting up libdrm-dev:amd64 (2.4.113-2~ubuntu0.22.04.1) ...\r\n","Setting up gettext (0.21-4ubuntu4) ...\r\n","Setting up timidity (2.14.0-8ubuntu1) ...\r\n","Setting up libegl-dev:amd64 (1.4.0-1) ...\r\n","Setting up libselinux1-dev:amd64 (3.3-1build2) ...\r\n","Setting up libxcomposite-dev:amd64 (1:0.4.5-1build2) ...\r\n","Setting up libxcursor-dev:amd64 (1:1.2.0-2build4) ...\r\n","Setting up libgtk2.0-0:amd64 (2.24.33-2ubuntu2) ...\r\n","Setting up libwildmidi-dev (0.4.3-1) ...\r\n","Setting up libwayland-dev:amd64 (1.20.0-1ubuntu0.1) ...\r\n","Setting up intltool-debian (0.35.0+20060710.5) ...\r\n","Setting up libdecor-0-dev:amd64 (0.1.0-3build1) ...\r\n","Setting up dh-autoreconf (20) ...\r\n","Setting up libmail-sendmail-perl (0.80-1.1) ...\r\n","Setting up gir1.2-gtk-2.0:amd64 (2.24.33-2ubuntu2) ...\r\n","Setting up libglu1-mesa-dev:amd64 (9.0.2-1) ...\r\n","Setting up libthai-dev:amd64 (0.1.29-1build1) ...\r\n","Setting up dh-strip-nondeterminism (1.13.0-1) ...\r\n","Setting up libgail18:amd64 (2.24.33-2ubuntu2) ...\r\n","Setting up libgtk2.0-bin (2.24.33-2ubuntu2) ...\r\n","Setting up cmake (3.22.1-1ubuntu1.22.04.2) ...\r\n","Setting up libgles-dev:amd64 (1.4.0-1) ...\r\n","Setting up libmount-dev:amd64 (2.37.2-4ubuntu3) ...\r\n","Setting up libgail-common:amd64 (2.24.33-2ubuntu2) ...\r\n","Setting up po-debconf (1.0.21+nmu1) ...\r\n","Setting up libglvnd-dev:amd64 (1.4.0-1) ...\r\n","Setting up debhelper (13.6ubuntu1) ...\r\n","Setting up libglib2.0-dev:amd64 (2.72.4-0ubuntu2.2) ...\r\n","Setting up libegl1-mesa-dev:amd64 (23.2.1-1ubuntu3.1~22.04.2) ...\r\n","Processing triggers for libglib2.0-0:amd64 (2.72.4-0ubuntu2.2) ...\r\n","Processing triggers for libc-bin (2.35-0ubuntu3.4) ...\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\r\n","\r\n","Processing triggers for man-db (2.10.2-1) ...\r\n","Setting up libibus-1.0-dev:amd64 (1.5.26-4) ...\r\n","Setting up libpulse-dev:amd64 (1:15.99.1+dfsg1-1ubuntu2.1) ...\r\n","Processing triggers for libgdk-pixbuf-2.0-0:amd64 (2.42.8+dfsg-1ubuntu0.2) ...\r\n","Setting up libcairo2-dev:amd64 (1.16.0-5ubuntu2) ...\r\n","Setting up libinstpatch-dev:amd64 (1.1.6-1) ...\r\n","Setting up libatk1.0-dev:amd64 (2.36.0-3build1) ...\r\n","Setting up libgdk-pixbuf-2.0-dev:amd64 (2.42.8+dfsg-1ubuntu0.2) ...\r\n","Setting up libharfbuzz-dev:amd64 (2.7.4-1ubuntu3.1) ...\r\n","Setting up libsdl2-dev:amd64 (2.0.20+dfsg-2ubuntu1.22.04.1) ...\r\n","Setting up libfluidsynth-dev:amd64 (2.2.5-1) ...\r\n","Setting up libpango1.0-dev:amd64 (1.50.6+ds-2ubuntu1) ...\r\n","Setting up libgtk2.0-dev:amd64 (2.24.33-2ubuntu2) ...\r\n","Reading package lists...\n","Building dependency tree...\n","Reading state information...\n","libboost-all-dev is already the newest version (1.74.0.3ubuntu7).\n","0 upgraded, 0 newly installed, 0 to remove and 35 not upgraded.\n","Reading package lists...\n","Building dependency tree...\n","Reading state information...\n","The following additional packages will be installed:\n","  liblua5.1-0 libtool-bin\n","The following NEW packages will be installed:\n","  liblua5.1-0 liblua5.1-0-dev libtool-bin\n","0 upgraded, 3 newly installed, 0 to remove and 35 not upgraded.\n","Need to get 303 kB of archives.\n","After this operation, 1,632 kB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 liblua5.1-0 amd64 5.1.5-8.1build4 [99.9 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu jammy/universe amd64 liblua5.1-0-dev amd64 5.1.5-8.1build4 [122 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu jammy/main amd64 libtool-bin amd64 2.4.6-15build2 [81.5 kB]\n","Fetched 303 kB in 1s (276 kB/s)\n","Selecting previously unselected package liblua5.1-0:amd64.\r\n","(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 126509 files and directories currently installed.)\r\n","Preparing to unpack .../liblua5.1-0_5.1.5-8.1build4_amd64.deb ...\r\n","Unpacking liblua5.1-0:amd64 (5.1.5-8.1build4) ...\r\n","Selecting previously unselected package liblua5.1-0-dev:amd64.\r\n","Preparing to unpack .../liblua5.1-0-dev_5.1.5-8.1build4_amd64.deb ...\r\n","Unpacking liblua5.1-0-dev:amd64 (5.1.5-8.1build4) ...\r\n","Selecting previously unselected package libtool-bin.\r\n","Preparing to unpack .../libtool-bin_2.4.6-15build2_amd64.deb ...\r\n","Unpacking libtool-bin (2.4.6-15build2) ...\r\n","Setting up libtool-bin (2.4.6-15build2) ...\r\n","Setting up liblua5.1-0:amd64 (5.1.5-8.1build4) ...\r\n","Setting up liblua5.1-0-dev:amd64 (5.1.5-8.1build4) ...\r\n","Processing triggers for man-db (2.10.2-1) ...\r\n","Processing triggers for libc-bin (2.35-0ubuntu3.4) ...\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\r\n","\r\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\r\n","\r\n"]}]},{"cell_type":"markdown","metadata":{"id":"KpWdZ08m0QyB"},"source":["Устанавливаем саму библиотеку ViZDoom из ее GitHub-репозитория. Обычно на установку этой библиотеки уходит 5-10 минут."]},{"cell_type":"code","metadata":{"id":"M5z0c7LZ0RCF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708778672665,"user_tz":-180,"elapsed":361161,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"a96913d6-c139-452a-b126-67ae4c287391"},"source":["!pip install vizdoom==1.1.9"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting vizdoom==1.1.9\n","  Downloading vizdoom-1.1.9.tar.gz (15.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m15.0/15.0 MB\u001b[0m \u001b[31m51.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Installing backend dependencies ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from vizdoom==1.1.9) (1.25.2)\n","Building wheels for collected packages: vizdoom\n","  Building wheel for vizdoom (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for vizdoom: filename=vizdoom-1.1.9-py3-none-any.whl size=14177143 sha256=ad554487b68c0b057e511adae3baf3ef250675c0f4552552fd477a3e227a4669\n","  Stored in directory: /root/.cache/pip/wheels/80/db/82/45a5939f3f17c1ed4b8d6918a5b00e6d0056e657ac3746b5ae\n","Successfully built vizdoom\n","Installing collected packages: vizdoom\n","Successfully installed vizdoom-1.1.9\n"]}]},{"cell_type":"markdown","metadata":{"id":"fvYXY0haCAoV"},"source":["Cкачиваем все нужные файлы для среды ViZDoom."]},{"cell_type":"code","metadata":{"id":"eUiFNKq97uRL","executionInfo":{"status":"ok","timestamp":1708778673077,"user_tz":-180,"elapsed":418,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["import gdown #Импортируем модуль для скачивания датасетов\n","\n","#Скачиваем файлы для ViZDoom\n","#gdown.download('https://storage.googleapis.com/datasets_ai/Advanced/6_RL/rl.zip', output = None, quiet = True)\n","#!unzip -qo rl.zip -d /content/ViZDoom/ #Разархивируем файлы"],"execution_count":3,"outputs":[]},{"cell_type":"code","source":["!git clone https://github.com/Farama-Foundation/ViZDoom.git"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L8i9uzxifSLk","executionInfo":{"status":"ok","timestamp":1708778677552,"user_tz":-180,"elapsed":4477,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"210d5940-b9ba-4501-cdf4-13b71783af34"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'ViZDoom'...\n","remote: Enumerating objects: 18326, done.\u001b[K\n","remote: Counting objects: 100% (2926/2926), done.\u001b[K\n","remote: Compressing objects: 100% (966/966), done.\u001b[K\n","remote: Total 18326 (delta 1766), reused 2736 (delta 1658), pack-reused 15400\u001b[K\n","Receiving objects: 100% (18326/18326), 59.27 MiB | 25.18 MiB/s, done.\n","Resolving deltas: 100% (11559/11559), done.\n"]}]},{"cell_type":"markdown","metadata":{"id":"zhQ36U-p0TIG"},"source":["Подключаемся к диску и импортируем все нужные модули и библиотеки:"]},{"cell_type":"code","metadata":{"id":"p2fUtWoIkZz6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1708778720128,"user_tz":-180,"elapsed":42580,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"729f9df1-e275-46a5-9725-168348bec95a"},"source":["from google.colab import drive\n","\n","drive.mount('/content/drive/')"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}]},{"cell_type":"code","metadata":{"id":"pbyUpw3Lka5L","executionInfo":{"status":"ok","timestamp":1708778724171,"user_tz":-180,"elapsed":4046,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["# Импортируем все функции из cреды ViZDoom\n","from vizdoom import *\n","import tensorflow as tf\n","import numpy as np            # Библиотека NumPy\n","import random                 # Импортируем модуль для генерации рандомных значений\n","import pickle                 # Модуль для сохранения результатов в файл\n","import cv2                    # Модуль для работы с картинками и видео (нужен для предобработки данных и записи результата)\n","\n","# Импортируем тип данных deque из встроенного модуля Python\n","from collections import deque   # deque — это список, где автоматически удаляются старые значения при добавлении новых, чтобы не было переполнения памяти\n","import matplotlib.pyplot as plt # Импортируем модуль pyplot из бибиотеки Matplotlib\n","\n","from tensorflow.keras.models import load_model, Model, Sequential # Импортируем функции для создания и загрузки модели из TensorFlow\n","from tensorflow.keras.layers import *                             # Импортируем все слои из Keras\n","from tensorflow.keras.optimizers import RMSprop, Adam             # Импортируем оптимизаторы RMSprop и Adam\n","from tensorflow.keras import backend as K                         # Импортируем модуль для бэкэнда Keras\n","from tensorflow.keras.utils import to_categorical                 # Импортируем функцию для удобного onehot-энкодинга\n","from moviepy.editor import *                                      # Импортируем полезные функции из библиотеки для воспроизведения видео с результатом\n","from google.colab import output                                   # Импортируем функцию для управления вывода в Colab-ячейках\n","\n","import heapq\n","import numpy as np\n","from itertools import count"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PJeM6e1x0YOr"},"source":["## Создаем «Улучшенную Сеть» для Q-learning"]},{"cell_type":"markdown","metadata":{"id":"fjPXZXG3ASgm"},"source":["Дуэльная сеть будет вычислять не только значения Q(s, a) для каждого состояния, но также будет сравнивать его с предположенным текущим V(s). Этот процесс может происходить внутри самой архитектуры нейронной сети, если мы ее создадим, используя две отдельные ветки: ветка значения (value branch) и ветка преимущества (advantage branch).\n","\n","Архитектура этой нейронной сети создана с учетом принципов компьютерного зрения, одно из которых гласит, что размер рецептивного поля сверточного блока должен быть максимально близок к размеру картинки."]},{"cell_type":"code","metadata":{"id":"m-M9lxQBFZz0","executionInfo":{"status":"ok","timestamp":1708778724171,"user_tz":-180,"elapsed":15,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["def dueling_DQN(input_shape, action_size, learning_rate):\n","  state_input = Input(shape=(input_shape))   #Создаем входной слой нейронной сети. Размерность входных кадров будет 64 х 64\n","  x = Conv2D(32, 4, strides=(2, 2), activation='relu')(state_input)         #Добавляем первый сверточный слой\n","  x = Conv2D(48, 3, strides=(2, 2), activation='relu')(x)                   #Добавляем второй сверточный слой\n","  x = Conv2D(64, 3, strides=(2, 2), activation='relu')(x)                   #Добавляем третий сверточный слой\n","  x = Conv2D(96, 3, strides=(2, 2), activation='relu')(x)                   #Добавляем четвертый сверточный слой\n","  x = Conv2D(128, 3, strides=(1, 1), activation='relu')(x)                  #Добавляем пятый сверточный слой, у которого размерность выходных фичей будет 1х1 (как теоретически должно быть в любой сверточной сети)\n","  x = Flatten()(x)                                          #Добавляем выравнивающий слой\n","\n","  # Ветка значения состояния — пытается предсказать значения состояния V(s)\n","  state_value = Dense(256, activation='relu')(x)          #Добавляем скрытый полносвязный слой с 256 нейронами\n","  state_value = Dense(1)(state_value)                     #Добавляем полносвязный слой с одним нейроном, который будет считать скалярное значение V(s)\n","  #Нам нужно добавить размерность к этому слою для дальнейшего суммирования с веткой преимущества. Это делается через лямбда-слой\n","  state_value = Lambda(lambda s: K.expand_dims(s[:, 0], axis=-1), output_shape=(action_size,))(state_value)\n","\n","  # Ветка преимущества действия — пытается предсказать значения преимущества А(s, а) для каждого возможного действия а\n","  action_advantage = Dense(256, activation='relu')(x)     #Добавляем скрытый полносвязный слой с 256 нейронами\n","  action_advantage = Dense(action_size)(action_advantage) #Добавляем полносвязный слой с action_size количеством нейронов (action_size — это количество уникальных возможных действий)\n","  #Чтобы заставить эту ветку считать преимущества, мы добавляем самописную функцию, которая вычитывает среднее значение. Таким образом, все преимущества\n","  #которые ниже среднего становятся отрицательными, а все значения выше среднего остаются положительными.\n","  action_advantage = Lambda(lambda a: a[:, :] - K.mean(a[:, :], keepdims=True), output_shape=(action_size,))(action_advantage)\n","\n","  # Суммируем преимущества и значения состояний, чтобы получить Q(s, a) для каждого возможного действия а\n","  state_action_value = Add()([state_value, action_advantage])\n","\n","  model = Model(state_input, state_action_value) #Создаем модель, которая принимает на вход состояние среды и возвращает все значения Q(s, a)\n","  model.compile(loss = loss_function, optimizer = Adam(learning_rate = learning_rate)) #Компилируем модель, используя функцию ошибки, которую объявляем ниже\n","  return model   #Функция возвращает модель"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ul1YzbwIQfu6"},"source":["---\n","**Здесь заканчиваются различия между DDQN и Duelling DDQN. Всё, что содержится в коде дальше — это просто альтернативный способ реализации общих принципов обоих алгоритмов.**\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"HWpqs_H13TDq"},"source":["\n","\n","Улучшенная сеть также будет использовать особенную функцию ошибки, которая часто используется для задачи Q-learning. Эта функция ошибки известна как Ошибка Хубера (Huber Loss).\n","\n","Математическая функция Хубера использует гиперпараметр ẟ, который обычно обозначается как 1. Функция Хубера выглядит следующим образом:\n","\n","---\n","\n","H(x) = x<sup>2</sup> если -ẟ <= x <= ẟ (средняя квадратичная ошибка)\n","\n","Иначе:\n","\n","H(x) = |x| (средняя абсолютная ошибка)"]},{"cell_type":"markdown","metadata":{"id":"2y8mQJrpjFLa"},"source":["delta — гиперпараметр, который используется в функции ошибки Хубера. Обычно этот гиперпараметр равен 1, но в этом коде используется низкое значение. Подразумевается, что это приведет к более равным градиентам, что поможет нейронной сети обучаться. Однако этот параметр не очень сильно влияет на общий смысл функции ошибки."]},{"cell_type":"code","metadata":{"id":"bTduGqaD4RfE","executionInfo":{"status":"ok","timestamp":1708778724171,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["#Объявляем ошибку Хубера\n","loss_function = tf.keras.losses.Huber(delta = 2)"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xTNqvTapee4q"},"source":["## Prioritized Experience Replay\n","\n","Следующий код создает наиболее усовершенствованный буфер памяти, используя алгоритм Prioritized Experience Replay.\n","\n","Суть этого буфера памяти — наиболее часто сэмплить более полезные данные, которые могут появляться относительно редко. В качестве метрики оценки полезности данных используется разница между предсказанными и истинными значениями Q(s, a). Истинные значения в данном случае — это то, что предсказывается с учетом целевой модели.\n","\n","Для реализации этого алгоритма нужно будет сначала отсортировать все данные по их приоритету, что займет очень много времени, т. к. массив памяти большой, и его приходится очень часто сортировать. Чтобы уменьшить требования к вычислительным ресурсам, мы будем использовать структуру данных, которая называется бинарным деревом для сортировки данных. Преимущество этой структуры данных в том, что мы можем добавлять новые данные и гораздо быстрее сортировать их в нужном порядке.\n","\n","**Важно**: эта структура данных — дерево сумм. Это значит, что значения каждого листа равняются сумме всех его дочерних узлов. В каждом узле будет записываться приоритет данных.\n","\n","\n","\n"]},{"cell_type":"markdown","source":["###Список параметров приоритизированного буфера памяти"],"metadata":{"id":"DoVZAe5dsrGE"}},{"cell_type":"markdown","metadata":{"id":"cI_wT6zJom-f"},"source":["\n","* `PER_A` — параметр, который влияет на степень приоритета более важных данных. Если параметр приближается 0, распределение сэмплов становится более равномерным. Чем больше этот параметр, тем больше приоритета отдается более редким данным.\n","\n","* `PER_B` — параметр, определяющий веса, которые будут иметь конкретные примеры данных на функцию ошибки при обучении нейронной сети. Если этот параметр приближается к 0, все данные будут иметь такой же вес на функцию ошибки. Чем больше этот параметр, тем меньше влияния на функцию ошибки будут указывать наиболее редкие данные, т. к. эти данные избираются относительно часто для обучения. Значение этого параметра обычно меняется при обучении, `PER_B` увеличивается.\n","\n","* `PER_B_increment_sampling` — количество, насколько параметр `PER_B` увеличивается после каждой итерации обучения. Обычно `PER_B` увеличивается во время обучения сети, но не может превышать 1. Это нужно делать, поскольку обучение изначально нестабильно, и веса сэмплов должны быть более равномерными.\n","\n","* `absolute_error_minimum` — параметр, который определяет минимальную степень важности каждого примера из датасета. Чем выше этот параметр, тем равномернее распределение при сэмплировании данных.\n","\n","* `absolute_error_maximum` — параметр, который определяет максимальную степень важности каждого примера из датасета. Чем ниже этот параметр, тем равномернее распределение при сэмплировании данных. Если R — это максимальная возможная награда за действия, то значение этого параметра не должно превышать R<sup>PER_A</sup>"]},{"cell_type":"code","metadata":{"id":"FygwBNkg_RNd","executionInfo":{"status":"ok","timestamp":1708778724172,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["#Инициализируем класс для бинарного дерева\n","class Priority_Tree:\n","  data_pointer = 0 #В самом начале инициализируем переменную data_pointer как 0. Позже эта переменная будет показывать нам нужный пример данных по индексу\n","\n","  def __init__(self, memory_capacity):                            #Класс принимает максимальный размер памяти на вход\n","    self.memory_capacity = memory_capacity                        #Записываем максимальный доступный размер в атрибут класса\n","    self.tree = np.zeros(2 * memory_capacity - 1)                 #Дерево приоритета инициализируется нулями, но будет заполняться числами. Чем выше число, тем выше приоритет соответствующих данных\n","    self.data = np.zeros(memory_capacity, dtype = object)         #Этот массив будет содержать данные из игровой среды. У него тип данных object, поскольку он будет содержать разные типы данных в виде кортежей (действия, состояния, и т. д.)\n","    self.memory_size = 0                                          #Добавим атрибут, который будет показывать нам количество данных в массиве (это не часть алгоритма, используется для удобства)\n","\n","  #ВАЖНО!!!: размерность tree отличается от размерности data, потому что tree — это целое дерево, и все, кроме последнего уровня этого дерева, существуют лишь для ускоренного поиска\n","  #Приоритеты данных хранятся в нижнем слое дерева, то есть с индекса memory_capacity до 2 * memory_capacity - 1 ([memory_capacity : 2*memory_capacity-1])\n","\n","  #Этот метод будет использоваться при добавлении новых данных в дерево\n","  #Метод принимает данные, которые нужно добавить, и их приоритет.\n","  def add(self, data, priority):\n","    tree_index = self.data_pointer + self.memory_capacity - 1 #Задаем индекс данных в дереве приоритета\n","    self.data[self.data_pointer] = data                       #Записываем новые данные в индекс, который указывает data_pointer\n","    self.update(tree_index, priority)                         #Вызываем метод для обновления всех значений по дереву (этот метод объявляется ниже)\n","    self.data_pointer += 1                                    #Увеличиваем индекс data_pointer на 1\n","    if self.data_pointer >= self.memory_capacity:             #Если data_pointer больше, чем размер памяти:\n","      self.data_pointer = 0                                   #Устанавливаем data_pointer как 0 и начинаем его увеличивать с начала (это поможет удалить очень старые данные)\n","\n","    self.memory_size = min(self.memory_size + 1, self.memory_capacity) #Увеличиваем текущий размер памяти на 1, но убеждаемся, что он не больше, чем memory_capacity (это не часть алгоритма, используется для удобства)\n","\n","  #Объявляем метод для обновления всех приоритетов в дереве. Он вызывается, когда мы добавляем новые данные в дерево\n","  #Метод принимает на вход текущий индекс дерева и приоритет, по которому нужно обновить\n","  def update(self, tree_index, priority):\n","    change = priority - self.tree[tree_index] #Считаем разницу в приоритете (текущий приоритет минус то, что уже есть на этом месте)\n","    self.tree[tree_index] = priority          #Устанавливаем новый приоритет в лист дерева\n","    while tree_index != 0:                    #В этом цикле ищем все данные по ветке, пока не достигаем начала дерева\n","      tree_index = (tree_index - 1)//2        #Берем индекс родительского листа\n","      self.tree[tree_index] += change         #И увеличиваем его приоритет на параметр change\n","\n","  #Объявляем метод, который позволит нам извлечь индекс, приоритет и данные, соответствующие одному узлу из дерева\n","  #Процесс поиска значения в дереве — метод принимает на вход значение приоритета, по которому мы извлекаем пример данных\n","  def get_leaf(self, value):\n","    parent_index = 0                              #Индекс родительского узла — инициализируется как 0\n","    while True:                                   #В цикле ищем нужный нам узел\n","      left_child_index = 2 * parent_index + 1     #По определению, левый дочерний узел всегда имеет такой индекс по отношению с его родительским узлом\n","      right_child_index = left_child_index + 1    #По определению, правый дочерний узел всегда имеет индекс равен левому дочернему излу + 1\n","\n","      if left_child_index >= len(self.tree):      #Если индекс левого дочернего узла, который мы рассматриваем, больше, чем размер дерева, значит мы уже на максимальной глубине дерева\n","        leaf_index = parent_index                 #Поэтому нужный индекс становится родительским индексом, и мы выходим из цикла\n","        break\n","      elif value <= self.tree[left_child_index]:  #Иначе, если значение меньше, чем левый дочерний узел дерева\n","        parent_index = left_child_index           #Мы записываем левый дочерний индекс как родительский индекс\n","      else:\n","        value -= self.tree[left_child_index]      #Иначе, если значение НЕ меньше, чем левый дочерний узел дерева и мы НЕ на максимальной глубине дерева\n","        parent_index = right_child_index          #родительским индексом становится правый дочерний индекс и значение уменьшается на приоритет левого дочернего узла (по определению, так происходит поиск нужного значения в дереве сумм)\n","\n","    data_index = leaf_index - self.memory_capacity + 1                #Индекс из массива равен индексу из дерева — размер_памяти + 1\n","    return leaf_index, self.tree[leaf_index], self.data[data_index]   #Возвращаем индекс узла, приоритет индекса из дерева приоритетов и соответствующие сэмплы данных\n","\n","  @property                    #Добавляем метод с декоратором свойства\n","  def total_priority(self):\n","    return self.tree[0]        #Этот метод возвращает приоритет первого элемента (что по определению — сумма всех остальных приоритетов)\n","\n","#Дальше создаем класс для воспроизведения приоритетного опыта. В этом классе есть два основных параметра, которые мы называем A и B\n","class Prioritized_Experience_Replay:\n","  #PER_A = 1      #Задаем значение параметра A\n","  #PER_B = 0.4      #Задаем значение параметра B\n","\n","  #PER_B_increment_sampling = 1e-6     #Также есть параметр PER_B_increment_sampling, который будет влиять на то, как быстро меняется параметр PER_B во время обучения сети\n","  absolute_error_minimum = 0.01       #Этот параметр отвечает за минимальную ошибку. Если ошибка в предсказании ниже, чем этот параметр, меняем эту ошибку на значения параметра. Это делается для того, чтобы всегда была какая-то вероятность выбора всех данных\n","  absolute_error_maximum = 10.0       #Последний параметр отвечает за максимальную ошибку, которая будет учитываться (т. е. максимально возможный приоритет). Этот параметр нужно подбирать в соответствии величин наград из среды\n","\n","  def __init__(self, memory_capacity):                      #Класс принимает на вход максимальный объем памяти для приоритетного дерева\n","    self.priority_tree = Priority_Tree(memory_capacity)     #Создаем объект приоритетного дерева внутри этого класса\n","\n","  #Объявляем метод для сохранения новых данных. Как обычно, данные это — предыдущее состояние, действие, награда, следующее состояние и статус завершения игры\n","  def store(self, experience):\n","    maximum_priority = np.max(self.priority_tree.tree[-self.priority_tree.memory_capacity:]) #Смотрим на максимальный приоритет в дереве среди данных в самом низу дерева (у которых нету дочернего узла)\n","\n","    if maximum_priority == 0:                       #Если максимальный приоритет отсутствует\n","      maximum_priority = self.absolute_error_maximum  #Мы устанавливаем максимальный приоритет параметром absolute_error_maximum, который задавался выше\n","\n","    self.priority_tree.add(experience, maximum_priority)  #Затем добавляем данные в дерево поиска вместе с максимальным приоритетом\n","\n","  #Создаем метод для выбора пакета данных из буфера памяти. Метод принимает на вход размер нужного пакета\n","  def sample_batch(self, batch_size):\n","    minibatch = []                       #Выбранные данные будут добавляться в список, который инициализируем под названием minibatch\n","    batch_index, batch_weights = np.empty((batch_size, ), dtype = np.int32), np.empty((batch_size, 1), dtype=np.float32) #Также создаем пустые NumPy-массивы, где будем хранить индексы данных из пакета и их степень важности\n","    priority_segment = self.priority_tree.total_priority / batch_size     #У нас будут разные уровни приоритета для данных. Здесь задаем диапазон каждого уровня\n","    self.PER_B = np.min([1.0, self.PER_B + self.PER_B_increment_sampling])#Увеличиваем параметр PER_B на PER_B_increment_sampling\n","\n","    p_min = np.min(self.priority_tree.tree[-self.priority_tree.memory_capacity:]) / self.priority_tree.total_priority #Находим минимальный приоритет из датасета и делим его на сумму всех приоритетов\n","    max_weight = (p_min * batch_size) ** (-self.PER_B)   #Максимальная возможная степень важности — это минимальный приоритет * размер пакета ^ (-1 * PER_B)\n","\n","    for i in range(batch_size):  #Проходимся циклом, чтобы извлечь все нужные пакеты\n","      a, b = priority_segment * i, priority_segment * (i + 1)     #Извлекаем верхнюю и нижнюю границы диапазона приоритета\n","      value = np.random.uniform(a, b)                             #Рандомно генерируем число из диапазона, по которому будем извлекать данные. Это число будет нашим приоритетом\n","      index, priority, data = self.priority_tree.get_leaf(value)  #Извлекаем индекс, приоритет и данные по ранее заданному числу\n","      sampling_probabilities = priority / self.priority_tree.total_priority  #Вероятность выбора используется позже при подсчете степени важности данных\n","      batch_weights[i, 0] = np.power(batch_size * sampling_probabilities, -self.PER_B)/max_weight #Устанавливаем веса так, чтобы данные с более высоким приоритетом имели больше веса (чем больше параметр PER_B, тем больше приоритета будет отдаваться таким данным)\n","      batch_index[i] = index                        #Извлекаем индекс из буфера памяти\n","      minibatch.append([data[i] for i in range(5)]) #Добавляем текущее состояние, действие, награду, следующее состояние, состояние завершение игры в список пакета\n","\n","    return batch_index, minibatch, batch_weights  #Возвращаем индексы пакета, данные пакета и степень важности данных\n","\n","  #Создаем функцию для обновления всех приоритетов. Этот метод будет вызываться при каждой итерации обучения. Метод принимает на вход индексы (которые возвращаем sample_batch), а также разницы между предсказанными и истинными значениями Q(s, a)\n","  def batch_update(self, tree_indices, absolute_errors):\n","    clipped_errors = np.clip(absolute_errors, self.absolute_error_minimum, self.absolute_error_maximum) #Урезаем все ошибки чтобы они находились в диапазоне между заданным минимумом и максимумом\n","    normalized_errors = np.power(clipped_errors, self.PER_A) #Возводим ошибки в экспонент PER_A. Чем ниже значение этого параметра, тем равномернее будет приоритет\n","\n","    for i, j in zip(tree_indices, normalized_errors): #Проходимся по индексам и нормированным ошибкам\n","      self.priority_tree.update(i, j)                 #Обновляем дерево приоритетов в соответствии с данными\n","\n","  @property                #Для удобства добавляем метод с декоратором свойства, который будет возвращать размер заполненной памяти\n","  def buffer_size(self):\n","    return self.priority_tree.memory_size"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I-GFLDvqLaIL"},"source":["## Задаем гиперпараметры сети\n","\n","**Подразумевается, что вы уже знакомы с общей концепцией этих гиперпараметров.  Все они были в первом уроке по Q-learning. Ниже описаны только причины выбора значений некоторых гиперпараметров.**\n","\n","* `Gamma = 0.8` — это довольно низкое значение этого гиперпараметра. Однако в данной игре мы хотим отдавать наибольший приоритет наградам, которые можно получить на текущий момент, а не в будущем. Также после каждого действия пропускается довольно большое количество кадров (`frames_per_action = 4`), что означает, что у нас будет большой отрыв во времени между последовательными состояниями. Это тоже нужно учитывать при создании параметра `γ`.\n","\n","* `epsilon_decay_factor = 0.99999` — на этот раз `epsilon_decay_factor` не вычитается, а умножается на текущий эпсилон. Этот процесс приводит к экспоненциальному спаду эпсилона, что значит, что он будет очень быстро падать в начале обучения. Чем ниже параметр эпсилон, тем медленнее он будет убывать."]},{"cell_type":"code","metadata":{"id":"hVRom-U0Lc7s","executionInfo":{"status":"ok","timestamp":1708788887306,"user_tz":-180,"elapsed":234,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["gamma = 0.8                       #Гамма (параметр для передачи наград между состояниями)\n","initial_epsilon = 1               #Начальное значение эпсилон (вероятность принять рандомный шаг)\n","epsilon = initial_epsilon         #Текущее значение эпсилон (инициализируется как стартовое значение)\n","final_epsilon = 0.01              #Минимальное значение эпсилон (должно быть выше 0)\n","\n","epsilon_decay_factor = 0.5    #Задаем число, на которое будем умножать эпсилон после каждого шага\n","\n","observation_steps = 500         #Количество шагов в игровой среде до обучения сети\n","target_model_update_rate = 250   #Веса целевой модели будут обновляться весами основной модели раз в 5 000 шагов\n","\n","learning_rate = 1e-4   #Обычно в обучении с подкреплением ставят низкий шаг обучения, например 1e-4\n","batch_size = 32        #Используем размер пакета в 32"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M6AjhlXnQWJU"},"source":["## Функция для обучения модели\n","\n","Поскольку мы используем приоритизированный буфер памяти, нам нужно немного поменять алгоритм для обучения модели. Модель будет обучаться на данных с учетом разных весов для разных сэмплов. В конце нужно будет обновить приоритет всех сэмплов данных, на которых модель обучалась."]},{"cell_type":"code","metadata":{"id":"dyO4ymv-T8bm","executionInfo":{"status":"ok","timestamp":1708778724172,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["#Создаем функцию для обучения алгоритма\n","def train():\n","  tree_index, replay_samples, sample_weights = memory_buffer.sample_batch(batch_size) #В начале мы собираем данные из приоритизированного буфера памяти\n","\n","  previous_states = np.zeros(((batch_size,) + state_shape)) #Создаем массив из нулей, где будем хранить предыдущие состояния\n","  current_states = np.zeros(((batch_size,) + state_shape))  #Создаем массив из нулей, где будем хранить следующие состояния\n","  actions, rewards, done = [], [], []      #Инициализируем действия, награды и состояния завершения игры пустыми списками\n","  for i in range(batch_size):              #Проходимся по собранному пакету данных\n","    previous_states[i,:,:,:] = replay_samples[i][0] #Собираем все предыдущие состояния в массив\n","    actions.append(replay_samples[i][1])            #Собираем все действия\n","    rewards.append(replay_samples[i][2])            #Собираем все награды\n","    current_states[i,:,:,:] = replay_samples[i][3]  #Собираем все следующие состояния в массив\n","    done.append(replay_samples[i][4])               #Собираем все статусы завершения игры\n","\n","  Q_values = main_model.predict(previous_states)        #С начала предсказываем Q(s, a) из основной модели\n","  target_Q_values = target_model.predict(current_states)  #В конце предсказываем Q(s', a') из целевой модели\n","\n","  old_Q_values = Q_values.copy()     #Чтобы использовать приоритизированный буфер памяти, нам нужно будет посчитать разницу между истинными и предсказанными значениями Q(s, a), поэтому здесь запоминаем предсказанные значения\n","\n","  for i in range(batch_size):        #Итерируем через пакет данных, как и в предыдущем занятии по Q-learning\n","    if done[i]:\n","      Q_values[i][actions[i]] = rewards[i]  #Если флажок done равен True, значит это последнее состояние в эпизоде, и его награда равна награде, которую выдала игровая среда\n","    else:\n","      Q_values[i, actions[i]] = rewards[i] + gamma * np.max(target_Q_values[i, :]) #Новые Q-значения устанавливаются в соответствии с уравнением Беллмана\n","\n","  indices = np.arange(batch_size, dtype=np.int32) #Задаем индексы всех собранных данных (используется в следующей строке кода)\n","  absolute_errors = np.abs(old_Q_values[indices, np.array(actions)] - Q_values[indices, np.array(actions)]) #Считаем абсолютную ошибку между предсказанными и истинными Q-значениями, что будет использоваться в подсчете приоритета\n","  loss = main_model.fit(previous_states, Q_values, batch_size = batch_size, sample_weight = sample_weights, verbose=0) #Обучаем модель на состояниях и Q-значениях с учетом sample_weights (веса важности разных данных) в итоговой ошибке\n","  memory_buffer.batch_update(tree_index, absolute_errors) #Обновляем дерево приоритетов для всего пакета данных\n","\n","  if timestep % target_model_update_rate == 0: #Поскольку у нас алгоритм Double Dueling Deep-Q Network, мы будем обновлять веса целевой модели из основной модели раз в заданное количество шагов\n","    target_model.set_weights(main_model.get_weights())"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lQNjBWA9gZo7"},"source":["Создаем функцию для назначения наград так же, как это было сделано в предыдущем уроке по Q-learning.\n","\n","**Важно:** в этом занятии награды будут назначаться не только этой функции. Также будут награды, которые автоматически назначаются игровой средой. Награды из игровой среды назначаются не за все действия, которые приводят ближе к успеху. Среда автоматически выдает награды, если агент движется ближе к концу коридора. В данной ситуации у нас нет возможности назначить все нужные награды вручную. Поэтому при обучении мы будем использовать сумму наград, которые назначаются вручную, и наград, которые выдает среда.\n","\n","Величина наград из игровой среды очень большая — до 1 000 очков за одно действие. Поэтому награды, которые назначаются вручную, также должны быть очень большими. Однако это значит, что датасет не будет сбалансирован, что помешает нейронной сети обучаться — награды будут нормироваться в игровом цикле."]},{"cell_type":"code","metadata":{"id":"jJ5Geu8UhZlA","executionInfo":{"status":"ok","timestamp":1708778724172,"user_tz":-180,"elapsed":13,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["#previous_misc — информация об игровой среде на предыдущее состояние (количество убитых врагов, патроны и здоровье)\n","#current_misc — информация об игровой среде на текущее состояние (количество убитых врагов, патроны и здоровье)\n","#episode_done — булевое значение, которое говорит, если состояние последнее в эпизоде\n","\n","#misc[0] — количесто убитых врагов, misc[1] — патроны, misc[2] — здоровье\n","#########################################!!!ВАЖНО!!!#########################################\n","#Информация, которая содержится в массивах previous_misc и current_misc, а также индексы, могут отличаться в зависимости от конкретного сценария из ViZDoom\n","#Эту информацию можно посмотреть или поменять в соответствующих .cfg файлах, с помощью которых строится среда\n","#Эта функция заточена под сценарий, который рассматривается на уроке. Ниже представленную функцию нужно поменять при использовании других сценариев\n","\n","def get_reward(previous_info, current_info, episode_done):\n","  extra_reward = 0          #Инициализируем награду как 0\n","  if episode_done:          #Если состояние последнее в игре, не меняем награду\n","    return extra_reward\n","  #print(current_info)\n","  #print(previous_info)\n","  extra_reward += 500 * (current_info[0] - previous_info[0]) #Если убили врага в кадре, увеличиваем награду на 500 * количество убитых врагов\n","  extra_reward += 50 * (current_info[1] - previous_info[1])  #Если использовали патроны, получаем отрициательную награду. Если приобрели патроны, получаем положительную награду\n","  extra_reward += 5 * (current_info[2] - previous_info[2])   #Если потеряли здоровье, получаем отрициательную награду. Если приобрели здоровье, получаем положительную награду\n","\n","  return extra_reward  #Возвращаем подсчитанную награду"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5p7NMjoUcdTv"},"source":["Ниже создается функция для предобработки кадров, которая не менялась с предыдущего занятия.\n","\n","Параметр `num_frames ` увеличен до 8, чтобы агент мог видеть, что происходило за чуть более долгий промежуток времени. 8 кадров — это примерно 0,5 секунд (при `frames_per_action = 4`). Нужно отметить, что чем больше параметр `num_frames`, тем больше памяти занимает каждое состояние, и за счет этого нужно уменьшить размер буфера памяти. Однако это можно предотвратить, если сохранять не состояния, а отдельные кадры, которые при извлечении будут обрабатываться и складываться в состояния."]},{"cell_type":"code","metadata":{"id":"eU27YxX1c9xR","executionInfo":{"status":"ok","timestamp":1708778724172,"user_tz":-180,"elapsed":13,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["image_width = 64   #Ширина картинки (кадра)\n","image_height = 64  #Высота картинки (кадра)\n","num_frames = 8     #Количество последовательных кадров в одном состоянии (используется позже)\n","#Размерность каждого состояния — это размер картинки (ее высота и ширина) на количество последовательных кадров\n","state_shape = (image_width, image_height, num_frames)\n","\n","#Создаем функцию для предобработки кадра (сжимаем размер изображения до 64 х 64 и превращаем в черно-белый цвет)\n","def preprocess_frame(frame):\n","  frame = np.rollaxis(frame, 0, 3) #Сначала нужно предобработать картинку, чтобы размер поменялся с (3, width, height) на (width, height, 3)\n","  frame = cv2.resize(frame, (image_width, image_height), interpolation=cv2.INTER_CUBIC) #Меняем размерность картинки на (64 х 64)\n","  frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) #Делаем изображение черно-белым\n","\n","  return frame.reshape(image_width, image_height, 1)/255 #Делаем решейп и возвращаем предобработанную картинку, нормализуем"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"URmjzNkVxZdG"},"source":["Создается функция для выбора действия через нейронную сеть и заданного параметра `epsilon`. Суть этой функции никак не изменилась с предыдущего урока по Q-learning. Лишь немного изменился синтаксис, т. к. модель, которая предсказывает Q(s, a) для каждого действия `a`."]},{"cell_type":"code","metadata":{"id":"YgtBnRCCxd0r","executionInfo":{"status":"ok","timestamp":1708778724172,"user_tz":-180,"elapsed":13,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["#Функция принимает текущее состояние, значение эпсилон и количество возможных шагов на вход\n","#и возвращает действие, которое агент будет принимать, и новое значение эпсилон\n","def get_action(state, epsilon, action_size):\n","\n","  if random.random() <= epsilon:  #Генерируем рандомное значение, если оно меньше или равно эпсилону, берем рандомное действие\n","    action_index = np.random.randint(0, action_size) #Иными словами, мы берем рандомное действие с вероятностью эпсилон\n","  else: #Иначе (наше рандомное число больше, чем эпсилон)\n","    Q_values = main_model.predict(np.expand_dims(state, axis = 0)) #models — название переменной, которая будет содержать целевую и основную модели (объект класса Models_Class, который создается выше)\n","    action_index = np.argmax(Q_values) #Извлекаем индекс действия, который приводит к максимальному значению Q(s, a)\n","\n","  if memory_buffer.buffer_size >= observation_steps:  #Снижаем значение эпсилон, если буфер памяти достаточно большой (идет обучение) и epsilon больше, чем final_epsilon, снижаем значение epsilon на epsilon_decay_factor\n","    epsilon = max(epsilon * epsilon_decay_factor, final_epsilon) #Снижаем значение эпсилон умножением (это приведет к экспоненциальному спаду). Убеждаемся, что значение эпсилон не ниже, чем final_epsilon\n","\n","  return action_index, epsilon #Возвращаем выбранное действие и новое значение epsilon"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PB5BR3YGxRsj"},"source":["Создадим функцию для визуализации результатов, которая также очень похожа на аналогичные функции из предыдущих уроков. В этой функции мы будем отображать только сумму наград и количество убитых врагов за эпизод:"]},{"cell_type":"code","metadata":{"id":"9Y_96rO7vOgO","executionInfo":{"status":"ok","timestamp":1708778724173,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["#Создаем функцию для визуализации результата\n","def show_scores(scores, killcount):\n","  output.clear() #Удаляем предыдущий вывод ячейки\n","  fig, axes = plt.subplots(1, 2, figsize = (20, 8))  #Будем выводить всю полезную статистику в один график\n","\n","  axes[0].plot(scores, linestyle = '--', label = \"Награда за эпизод\")        #Устанавливаем большой размер полотна\n","  axes[0].plot(moving_average(scores), label = \"Скользящее среднее награды\") #Отрисовываем скользящие средние награды\n","  axes[0].set_xlabel(\"Итерация\", fontsize = 16)    #Добавляем лейблы осей\n","  axes[0].set_ylabel(\"Значение\", fontsize = 16)\n","  axes[0].legend()                          #Добавляем легенду к графику\n","\n","  axes[1].plot(killcount, 'red', linestyle = '--', label = \"Количество убитых врагов (сумма за 10 эпизодов)\")              #Отрисовываем количество убитых врагов\n","  axes[1].plot(moving_average(killcount), 'black', label = \"Количество убитых врагов (скользящее среднее за 10 итераций)\") #Отрисовываем количество убитых врагов (скользящее среднее)\n","  axes[1].set_xlabel(\"Итерация\", fontsize = 16)    #Добавляем лейблы осей\n","  axes[1].set_ylabel(\"Значение\", fontsize = 16)\n","  axes[1].legend()                          #Добавляем легенду к графику\n","\n","  plt.show()   #Отображаем график\n","\n","#Также мы создадим функцию для подсчета скользящего среднего всех значений\n","#Это будет осуществляться через математическую свертку, и мы будем считать скользящее среднее за 50 значений\n","def moving_average(data, width = 50): #data — входной массив, width — длина, на которую считаем скользящее среднее\n","  width = min(width, len(data))       #Длина свертки (минимум из заданной длины свертки и длины датасета)\n","  data = np.concatenate([np.repeat(data[0], width), data])         #Вместо паддинга из нулей мы создадим паддинг для свертки из первого значения массива. Весь паддинг будет слева (в начале массива)\n","  return (np.convolve(data, np.ones(width), 'valid') / width)[1:]  #Возвращаем результат свертки данных на фильтр из единиц — наше скользящее среднее"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"PqRo-PDNz1S6","executionInfo":{"status":"ok","timestamp":1708778726015,"user_tz":-180,"elapsed":1855,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["game = DoomGame() #Инициализируем среду\n","game.load_config(\"/content/drive/MyDrive/ViZDoom/deadly_corridor.cfg\") #Загружаем сценарий «Cмертельный корридор» (высокий уровень сложности)\n","game.set_screen_resolution(ScreenResolution.RES_640X480) #Устанавливаем размер кадров среды (будет 640 х 480)\n","game.set_window_visible(False) #Нужно отключить окно, чтобы не было ошибки\n","game.init() #Инициализируем игру\n","\n","action_size = game.get_available_buttons_size()                 #Извлекаем количество возможных уникальных действий\n","\n","frames_per_action = 4  #Установим количество кадров за каждое действие. Нам не нужен каждый кадр\n","                       #поэтому будем совершать действие и брать новое состояние лишь раз в 4 кадра"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jz4Z3geNCvZD","executionInfo":{"status":"ok","timestamp":1708778727101,"user_tz":-180,"elapsed":1087,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["main_model = dueling_DQN(state_shape, action_size, learning_rate)   #Создаем основную модель с нуля\n","target_model = dueling_DQN(state_shape, action_size, learning_rate) #Создаем целевую модель с нуля\n","\n","memory_buffer = Prioritized_Experience_Replay(memory_capacity = observation_steps)  #Создаем объект буфера памяти"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"8HUjGyna0hwh","executionInfo":{"status":"ok","timestamp":1708778727102,"user_tz":-180,"elapsed":3,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["load_pretrained = False\n","\n","if load_pretrained:\n","  main_model.load_weights('/content/drive/My Drive/pretrained_networks/dueling_qn_main2.h5')     #Загружаем веса основной модели из файла\n","  target_model.load_weights('/content/drive/My Drive/pretrained_networks/dueling_qn_target2.h5') #Загружаем веса целевой модели из файла\n","  with open(\"/content/drive/My Drive/pretrained_networks/dueling_DQN_stats2.txt\", 'rb') as f:\n","    record_rewards, record_kills, episode_number, timestep, epsilon, memory_buffer.PER_B = pickle.load(f) #Загружаем все остальные данные из бинарного файла. В этот список добавился PER_B — параметр буфера памяти\n","\n","#Иначе мы просто инизиализируем списки, в которых будет храниться статистика о работе агента\n","else:\n","  record_rewards = []          #Сюда будем записывать награды за 10 эпизодов (для анализа статистики)\n","  record_kills = []            #Сюда будем записывать количество убитых врагов (для анализа статистики)\n","  record_ammos = []            #Сюда будем записывать количество оставшихся патронов (для анализа статистики)\n","\n","  episode_number = 1     #Инициализируем номер эпизода как 1\n","  timestep = 0           #Инициализируем параметр timestep как 0"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_mFtvNgwBD1k"},"source":["## Создаем цикл игры, в котором будет обучаться алгоритм\n","\n","Кардинальных различий межу этим игровым циклом и таким же игровым циклом в предыдущем занятии — нет. Используется функция `game.get_last_reward()`, чтобы извлекать награду из среды. Награда из среды будет складываться с наградой, полученной из самописной функции.\n","\n","Также в этом цикле награды будут нормироваться, т. к. нейронные сети всегда должны работать с нормированными данными. Есть очень большое количество возможных подходов для нормирования наград, но в данном случае все награды просто делятся на 50. Нужно отметить, что если данные нормируются слишком сильно, то нейронная сеть не будет обращать внимание на маленькие награды."]},{"cell_type":"code","source":["  Prioritized_Experience_Replay.PER_A = 1      #Задаем значение параметра A\n","  Prioritized_Experience_Replay.PER_B = 0.4      #Задаем значение параметра B\n","\n","  Prioritized_Experience_Replay.PER_B_increment_sampling = 1e-6"],"metadata":{"id":"mG9YfwaxG7bT","executionInfo":{"status":"ok","timestamp":1708778891468,"user_tz":-180,"elapsed":268,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"vdSusBE6BJtN","outputId":"015d0dc7-f2cc-441d-9091-59366b131b63","executionInfo":{"status":"error","timestamp":1708788853485,"user_tz":-180,"elapsed":9960919,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["game.new_episode()                       #Начинаем новый эпизод игры\n","game_data = game.get_state()             #Извлекаем информацию о текущем состоянии игры\n","current_info = game_data.game_variables  #current_info — массив, который содержит количество убитых врагов, наличие патронов и здоровье на текущий момент\n","previous_info = current_info             #previous_info — массив, который содержит количество убитых врагов, наличие патронов и здоровье на предыдущий момент\n","\n","frame = game_data.screen_buffer                                                       #Извлекаем кадр из игры (480 x 640)\n","processed_frame = preprocess_frame(frame)                                             #Предобрабатываем кадр в черно-белый (размер 64 х 64)\n","current_state = np.stack([processed_frame.reshape(64, 64)] * num_frames, axis = 2)    #В качестве первого состояния просто дублируем кадр 8 раз\n","previous_state = current_state  #Инициализируем предыдущий шаг как текущий шаг\n","\n","interval_reward = 0  #Инициализируем награду за интервал (10 эпизодов) как 0\n","interval_kills = 0   #Инициализируем количество убитых врагов (10 эпизодов) как 0\n","\n","while True:\n","  timestep += 1\n","  action_index, epsilon = get_action(previous_state, epsilon, action_size)  #Извлекаем индекс награды и новое значение эпсилон\n","  action_onehot = to_categorical(action_index)                              #Приводим награду в onehot-массив\n","  game.set_action(action_onehot.tolist())                                   #Подаем действие в игровую среду в качестве списка\n","  game.advance_action(frames_per_action)                                    #Игра продвигается на 4 кадра (значение frames_per_action)\n","\n","  game_data = game.get_state()                                    #Предобрабатываем кадр в черно-белый (размер 64 х 64 x 1)\n","\n","  episode_done = game.is_episode_finished() #Проверяем, если эпизод закончился\n","\n","  if episode_done: #Нам необходимо возобновить среду и записать нужные статистики, когда заканчивается эпизод\n","    episode_number += 1   #Увеличиваем номер эпизода на 1\n","    interval_kills += current_info[0] #Считаем количество убитых врагов за эпизод\n","\n","    #Чтобы не собирать слишком много данных и чтобы данные было удобно отображать на графике, мы записываем результаты лишь раз в 10 эпизодов\n","    if episode_number % 10 == 0 and episode_number > 0: #Записываем результат раз в 10 эпизодов\n","      record_rewards.append(interval_reward)            #Добавляем награду в список всех наград\n","      record_kills.append(interval_kills)  #Добавляем количество убитых врагов\n","      show_scores(record_rewards, record_kills)  #Записываем результаты в графики\n","      main_model.save_weights('/content/drive/MyDrive/ViZDoom/dueling_qn_main2.h5') #Сохраняем веса основной модели\n","      target_model.save_weights('/content/drive/MyDrive/ViZDoom/dueling_qn_target2.h5') #Сохраняем веса целевой модели\n","      with open('/content/drive/MyDrive/ViZDoom/dueling_DQN_stats2.txt', 'wb') as f:  #Записываем статистику в файл через библиотеку pickle\n","        pickle.dump([record_rewards, record_kills, episode_number, timestep, epsilon, memory_buffer.PER_B], f)\n","\n","      print(\"Статистика успешно сохранена.\")\n","\n","      print(f\"Закончился {episode_number}-й эпизод. Значение эпсилон: {round(epsilon, 2)}, Количество убитых врагов: {current_info[0]}, количество оставшихся патронов: {current_info[1]}\")\n","\n","      interval_reward, interval_kills = 0, 0  #Заново инициализируем значения статистики для интервала в 10 эпизодов\n","\n","    game.new_episode()                       #Затем необходимо начать новый эпизод игры\n","    game_data = game.get_state()            #Извлекаем новое состояние игры\n","\n","  current_info = game_data.game_variables  #Извлекаем информацию об игровой среде (количество убитых врагов, неиспользованных патронов, текущее здоровье)\n","  frame = game_data.screen_buffer          #Извлекаем новый кадр из игры\n","  processed_frame = preprocess_frame(frame) #Предобрабатываем кадр (новая размерность будет 64 х 64 х 1)\n","  current_state = np.append(processed_frame, current_state[:, :, :num_frames-1], axis = 2) #Обновляем состояние — удаляем последний кадр и добавляем новый\n","\n","  environment_reward = game.get_last_reward()                            #Извлекаем награду за шаг из игровой среды\n","  custom_reward = get_reward(previous_info, current_info, episode_done)  #Извлекаем нагаду за шаг, используя самописную логику\n","  reward = environment_reward + custom_reward  #Награда за действие будет суммой награды из игровой среды и самописной награды\n","\n","  interval_reward += reward #Добавляем награду в переменную для статистики\n","  reward = reward/50        #Нормируем награду делением на 50\n","\n","  memory_buffer.store((previous_state, action_index, reward, current_state, episode_done)) #Добавляем предыдущее состояние, действие, награду и текущее состояние в память\n","\n","  if memory_buffer.buffer_size >= observation_steps: #Если у нас достаточно данных в буфере памяти для обучения алгоритма:\n","    train()   #Обучаем модели по очереди, используя самописный метод\n","\n","  previous_info = current_info    #Запоминаем предыдущую информацию\n","  previous_state = current_state  #Запоминаем предыдущее состояние"],"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Статистика успешно сохранена.\n","Закончился 490-й эпизод. Значение эпсилон: 0.01, Количество убитых врагов: 1.0, количество оставшихся патронов: 0.0\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 40ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 34ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 31ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 31ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 31ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 31ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 31ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 35ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 36ms/step\n","1/1 [==============================] - 0s 34ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - ETA: 0s"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-e8d80b78e16f>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mmemory_buffer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer_size\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mobservation_steps\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m#Если у нас достаточно данных в буфере памяти для обучения алгоритма:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m     \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m#Обучаем модели по очереди, используя самописный метод\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m   \u001b[0mprevious_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcurrent_info\u001b[0m    \u001b[0;31m#Запоминаем предыдущую информацию\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-11-1b715cc9c3a4>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mQ_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmain_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprevious_states\u001b[0m\u001b[0;34m)\u001b[0m        \u001b[0;31m#С начала предсказываем Q(s, a) из основной модели\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m   \u001b[0mtarget_Q_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtarget_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrent_states\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m#В конце предсказываем Q(s', a') из целевой модели\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m   \u001b[0mold_Q_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mQ_values\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m     \u001b[0;31m#Чтобы использовать приоритизированный буфер памяти, нам нужно будет посчитать разницу между истинными и предсказанными значениями Q(s, a), поэтому здесь запоминаем предсказанные значения\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   2674\u001b[0m                             )\n\u001b[1;32m   2675\u001b[0m                         \u001b[0mend_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep_increment\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2676\u001b[0;31m                         callbacks.on_predict_batch_end(\n\u001b[0m\u001b[1;32m   2677\u001b[0m                             \u001b[0mend_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"outputs\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbatch_outputs\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2678\u001b[0m                         )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/callbacks.py\u001b[0m in \u001b[0;36mon_predict_batch_end\u001b[0;34m(self, batch, logs)\u001b[0m\n\u001b[1;32m    517\u001b[0m         \"\"\"\n\u001b[1;32m    518\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_should_call_predict_batch_hooks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 519\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mModeKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPREDICT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"end\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    520\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    521\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mon_train_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/callbacks.py\u001b[0m in \u001b[0;36m_call_batch_hook\u001b[0;34m(self, mode, hook, batch, logs)\u001b[0m\n\u001b[1;32m    320\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_begin_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"end\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 322\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_end_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    323\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    324\u001b[0m             raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/callbacks.py\u001b[0m in \u001b[0;36m_call_batch_end_hook\u001b[0;34m(self, mode, batch, logs)\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_batch_times\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_time\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_hook_helper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhook_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_batch_times\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_batches_for_timing_check\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/callbacks.py\u001b[0m in \u001b[0;36m_call_batch_hook_helper\u001b[0;34m(self, hook_name, batch, logs)\u001b[0m\n\u001b[1;32m    391\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mcallback\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m             \u001b[0mhook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhook_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_timing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/callbacks.py\u001b[0m in \u001b[0;36mon_predict_batch_end\u001b[0;34m(self, batch, logs)\u001b[0m\n\u001b[1;32m   1099\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mon_predict_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m         \u001b[0;31m# Don't pass prediction results.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1101\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_batch_update_progbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1102\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1103\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mon_epoch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/callbacks.py\u001b[0m in \u001b[0;36m_batch_update_progbar\u001b[0;34m(self, batch, logs)\u001b[0m\n\u001b[1;32m   1168\u001b[0m             \u001b[0;31m# Only block async when verbose = 1.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1169\u001b[0m             \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msync_to_numpy_or_python_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1170\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprogbar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfinalize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1171\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1172\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_finalize_progbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcounter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/generic_utils.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, current, values, finalize)\u001b[0m\n\u001b[1;32m    294\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0mmessage\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m             \u001b[0mio_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_msg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline_break\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m             \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/io_utils.py\u001b[0m in \u001b[0;36mprint_msg\u001b[0;34m(message, line_break)\u001b[0m\n\u001b[1;32m     79\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m             \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m         \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflush\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m         \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/iostream.py\u001b[0m in \u001b[0;36mflush\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    348\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpub_thread\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mschedule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    349\u001b[0m                 \u001b[0;31m# and give a timeout to avoid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 350\u001b[0;31m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mevt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflush_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    351\u001b[0m                     \u001b[0;31m# write directly to __stderr__ instead of warning because\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    352\u001b[0m                     \u001b[0;31m# if this is happening sys.stderr may be the problem.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    605\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    606\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 607\u001b[0;31m                 \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    608\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    322\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 324\u001b[0;31m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}