{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pytorch #1 ДЗ Ultra pro","provenance":[{"file_id":"16wE4uDU5gFUzS1qtifI6vJU6WQ90MY8F","timestamp":1639066080234},{"file_id":"1RYjdrk2S6BcLB9FJkxlVh_pRRFO5Jkgx","timestamp":1614873305909},{"file_id":"1AQs4MJzHA7xFDl0AfWFhGlLtVFyqgxWk","timestamp":1614605515858},{"file_id":"1SZQLoSi8jZVbNmyRiuKL2cBGcs5Kh_9l","timestamp":1601416530781},{"file_id":"1O4_C5PECIR7ORlXYYkBfj_SmU7qsKHmf","timestamp":1596144160628},{"file_id":"1ehBeTATvgQYRZtlDsYWPTX-il4fkCHpH","timestamp":1589033482606},{"file_id":"1zWBgOd2O2QAGXoQe4phFmE8StX3TYWBL","timestamp":1588889290005},{"file_id":"1zvMTPDHXfY4lvhoSbov6kjZr1XUSoagG","timestamp":1583244561224},{"file_id":"1wUVUor6m7GCzFRrulFxbSsANQZ-yFimD","timestamp":1583146594277},{"file_id":"1Mt3T0PuW_WzDhrPVY49oMzPt4EOuoAfw","timestamp":1578472048746}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["Т.к в описании задания имеется некая неопределенность по поводу того с какой базой нужно работать, я взял другую базу подходящую под задачу регресии. База представляет из себя таблицу с данными о разных автомобилях. Задача предсказать цену по этим данным. Точность получилась более-менее приемлемая."],"metadata":{"id":"BhFuRN-0e4QL"}},{"cell_type":"code","metadata":{"id":"7AowGFGi8Oah"},"source":["# Этим блоком будем визуализировать\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras import utils\n","%matplotlib inline\n","from PIL import Image\n","import scipy\n","import pandas as pd\n","# Библиотеки Pytorch\n","import torch \n","import torchvision # здесь лежат mnist, cifar и много других датасетов и трансформаций для картинок\n","import torch.nn as nn # здесь лежат все слои\n","import torch.utils.data as data # работа с загрузчиком данных\n","import torchvision.transforms as transforms # библиотека для преобразования изображений\n","import torchvision.datasets as dsets # работа с классом Датасет\n","\n","# Вывод информации о модели\n","from torchsummary import summary\n","\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","# Загрузка датасетов из облака google\n","import gdown\n","\n","# Регулярные выражения\n","import re\n","\n","# Визуализации графа\n","from torch.utils.tensorboard import SummaryWriter \n","import datetime, os\n","import time"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DSW-0LMrsBqD","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1639069673757,"user_tz":-180,"elapsed":864,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"c53a8d8d-240c-4fcf-a6cb-92a2eb11d2d2"},"source":["# Загрузка датафрейма из google облака\n","import gdown\n","\n","gdown.download('https://storage.googleapis.com/datasets_ai/Base/10_regression/cars_new.csv', None, quiet=True)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'cars_new.csv'"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["path = '/content/cars_new.csv'\n","df = pd.read_csv(path)"],"metadata":{"id":"rDVr1Rsj9qXB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"OG92rfE19xBL","executionInfo":{"status":"ok","timestamp":1639069674902,"user_tz":-180,"elapsed":27,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"b4ae127c-b241-4ef8-8925-3b2eac589026"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mark</th>\n","      <th>model</th>\n","      <th>price</th>\n","      <th>year</th>\n","      <th>mileage</th>\n","      <th>body</th>\n","      <th>kpp</th>\n","      <th>fuel</th>\n","      <th>volume</th>\n","      <th>power</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>kia</td>\n","      <td>cerato</td>\n","      <td>996000</td>\n","      <td>2018</td>\n","      <td>28000</td>\n","      <td>седан</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>2.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>daewoo</td>\n","      <td>nexia 1 поколение [2-й рестайлинг]</td>\n","      <td>140200</td>\n","      <td>2012</td>\n","      <td>60500</td>\n","      <td>седан</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.5</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>suzuki</td>\n","      <td>jimny 3 поколение [рестайлинг]</td>\n","      <td>750000</td>\n","      <td>2011</td>\n","      <td>29000</td>\n","      <td>внедорожник</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>1.3</td>\n","      <td>85.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>bmw</td>\n","      <td>x1 18 e84 [рестайлинг]</td>\n","      <td>970000</td>\n","      <td>2014</td>\n","      <td>49500</td>\n","      <td>кроссовер</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>2.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>chevrolet</td>\n","      <td>lacetti 1 поколение</td>\n","      <td>205000</td>\n","      <td>2007</td>\n","      <td>151445</td>\n","      <td>седан</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.4</td>\n","      <td>95.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>70114</th>\n","      <td>skoda</td>\n","      <td>fabia 5j [рестайлинг]</td>\n","      <td>310000</td>\n","      <td>2011</td>\n","      <td>165000</td>\n","      <td>хетчбэк</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.2</td>\n","      <td>70.0</td>\n","    </tr>\n","    <tr>\n","      <th>70115</th>\n","      <td>ford</td>\n","      <td>focus 3 поколение</td>\n","      <td>400000</td>\n","      <td>2011</td>\n","      <td>125000</td>\n","      <td>хетчбэк</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.6</td>\n","      <td>105.0</td>\n","    </tr>\n","    <tr>\n","      <th>70116</th>\n","      <td>mazda</td>\n","      <td>cx-5 1 поколение</td>\n","      <td>1140000</td>\n","      <td>2013</td>\n","      <td>89981</td>\n","      <td>кроссовер</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>2.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>70117</th>\n","      <td>toyota</td>\n","      <td>bb 2 поколение</td>\n","      <td>550550</td>\n","      <td>2006</td>\n","      <td>183000</td>\n","      <td>минивэн</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>1.3</td>\n","      <td>92.0</td>\n","    </tr>\n","    <tr>\n","      <th>70118</th>\n","      <td>chevrolet</td>\n","      <td>trailblazer 1 поколение</td>\n","      <td>430000</td>\n","      <td>2004</td>\n","      <td>205000</td>\n","      <td>внедорожник</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>4.2</td>\n","      <td>275.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>70119 rows × 10 columns</p>\n","</div>"],"text/plain":["            mark                               model  ...  volume  power\n","0            kia                              cerato  ...     2.0  150.0\n","1         daewoo  nexia 1 поколение [2-й рестайлинг]  ...     1.5   80.0\n","2         suzuki      jimny 3 поколение [рестайлинг]  ...     1.3   85.0\n","3            bmw              x1 18 e84 [рестайлинг]  ...     2.0  150.0\n","4      chevrolet                 lacetti 1 поколение  ...     1.4   95.0\n","...          ...                                 ...  ...     ...    ...\n","70114      skoda               fabia 5j [рестайлинг]  ...     1.2   70.0\n","70115       ford                   focus 3 поколение  ...     1.6  105.0\n","70116      mazda                    cx-5 1 поколение  ...     2.0  150.0\n","70117     toyota                      bb 2 поколение  ...     1.3   92.0\n","70118  chevrolet             trailblazer 1 поколение  ...     4.2  275.0\n","\n","[70119 rows x 10 columns]"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["list_for_del = [140, 170, 241, 75, 152]\n","\n","for item in list_for_del:\n","  df.drop(df[df['fuel'] == item].index, inplace = True)"],"metadata":{"id":"99VitZih9-eZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["COL_MARK        = df.columns.get_loc('mark')\n","COL_MODEL       = df.columns.get_loc('model')\n","COL_PRICE       = df.columns.get_loc('price')\n","COL_YEAR        = df.columns.get_loc('year')\n","COL_MILEAGE     = df.columns.get_loc('mileage')\n","COL_BODY        = df.columns.get_loc('body')\n","COL_KPP         = df.columns.get_loc('kpp')\n","COL_FUEL        = df.columns.get_loc('fuel')\n","COL_VOLUME      = df.columns.get_loc('volume')\n","COL_POWER       = df.columns.get_loc('power')"],"metadata":{"id":"f3zzGIqW9xar"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def purify(x):\n","    if isinstance(x, str):                # Если значение - строка:\n","        # Замена концов строк на пробелы, удаление символа с кодом 0xA0,\n","        # обрезка краевых пробелов и приведение к нижнему регистру\n","        x = x.replace('\\n', ' ').replace('\\xa0', '').strip().lower()\n","    return x"],"metadata":{"id":"jo7Zm-Wr-Gxo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Список порогов пробега в милях\n","mileage_class = [0, [25, 50, 75, 100, 150, 200, 250, 300]]\n","\n","# Список порогов year\n","year_class = [0, [1949, 1970, 1980, 1990, 2000, 2005, 2008, 2011, 2014, 2017]]\n","\n","volume_class= [0, [0.3, 1, 1.3, 1.6, 1.8, 2, 2.5, 4, 6, 8, 10]]\n","\n","power_class= [0, [11, 35, 60, 80, 100, 120, 140, 160, 180, 200, 230, 280, 320, 350, 400, 500, 700, 900, 1100, 1400]]"],"metadata":{"id":"jlweft7E-G0y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mark_class = [0, \n","              {'kia'          : 0,\n","               'daewoo'       : 1,\n","               'suzuki'       : 2,\n","               'bmw'          : 3,\n","               'chevrolet'    : 4,\n","               'hyundai'      : 5,\n","               'toyota'       : 6,\n","               'mercedes-benz': 7,\n","               'chery'        : 8,\n","               'ford'         : 9,\n","               'mazda'        : 11,\n","               'peugeot'      : 11,\n","               'volkswagen'   : 12,\n","               'audi'         : 13,\n","               'mitsubishi'   : 14,\n","               'opel'         : 15,\n","               'nissan'       : 16,\n","               'skoda'        : 17,\n","               'honda'        : 18,\n","               'renault'      : 19,\n","               'subaru'       : 20,\n","              }]\n","\n","\n","body_class = [0, \n","              {'седан'          : 0,\n","               'внедорожник'    : 1,\n","               'кроссовер'      : 2,\n","               'хетчбэк'        : 3,\n","               'универсал'      : 4,\n","               'минивэн'        : 5,\n","               'лифтбэк'        : 6,\n","               'купе'           : 7,\n","               'микроавтобус'   : 8,\n","               'пикап'          : 9,\n","               'кабриолет'      : 10,\n","               'хардтоп'        : 11,\n","               'родстер'        : 12,\n","               'тарга'          : 13,\n","               'лимузин'        : 14,\n","               'фастбэк'        : 15,\n","               'nan'            : 16\n","              }]\n","\n","\n","kpp_class = [0, \n","              {'автомат'        : 0,\n","               'механика'       : 1,\n","               'робот'          : 2,\n","               'вариатор'       : 3,\n","               'nan'            : 4\n","              }]\n","              \n","\n","fuel_class = [0, \n","              {'бензин'        : 0,\n","               'дизель'        : 1,\n","               'гибрид'        : 2,\n","               'электро'       : 3,\n","               'газ'           : 4\n","              }]"],"metadata":{"id":"eEidMCvE-G6F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Вычисление счетчиков для данных разбиения\n","for class_desc in [mileage_class,\n","                   year_class,\n","                   volume_class,\n","                   power_class,\n","                   mark_class,\n","                   body_class,\n","                   kpp_class,\n","                   fuel_class]:\n","    if isinstance(class_desc[1], list):\n","        class_desc[0] = len(class_desc[1]) + 1\n","    else:\n","        class_desc[0] = max(class_desc[1].values()) + 1"],"metadata":{"id":"QbmFwLyi-G-v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def int_to_ohe(arg, class_list):\n","  \n","    # Определение размерности выходного вектора\n","    num_classes = class_list[0]\n","\n","    # Поиск верного интервала для входного значения\n","    for i in range(num_classes - 1):\n","        if arg < class_list[1][i]:\n","            cls = i                       # Интервал найден - назначение класса\n","            break\n","    else:                                 # Внимание: for/else\n","        cls = num_classes - 1             # Интервал не найден - последний класс\n","\n","    # Возврат в виде one hot encoding-вектора\n","    return utils.to_categorical(cls, num_classes)"],"metadata":{"id":"fZ1loWeZ-e3f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Общая функция преобразования строки к multi-вектору\n","# На входе данные и словарь сопоставления подстрок классам\n","\n","def str_to_multi(arg, class_dict):\n","    # Определение размерности выходного вектора\n","    num_classes = class_dict[0]\n","\n","    # Создание нулевого вектора\n","    result = np.zeros(num_classes)\n","    \n","    # Поиск значения в словаре и, если найдено,\n","    # выставление 1. на нужной позиции\n","    for value, cls in class_dict[1].items():\n","        if value == arg:\n","            result[cls] = 1.\n","\n","    return result"],"metadata":{"id":"aq0afawI-wAg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def extract_price(arg):\n","    try:\n","        # Выделение числа и преобразование к float\n","        value = float(re.search(r'\\d+', str(arg))[0])\n","    except TypeError:\n","        # Если не получилось выделить число - вернуть 0\n","        value = 0.\n","    return value / 1000. "],"metadata":{"id":"T-xhT_dL-xxw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def year_to_ohe(arg):\n","    return int_to_ohe(arg, year_class)\n","\n","def mileage_to_ohe(arg):\n","    return int_to_ohe(arg, mileage_class)\n","\n","def volume_to_ohe(arg):\n","    return int_to_ohe(arg, volume_class)\n","\n","def power_to_ohe(arg):\n","    return int_to_ohe(arg, power_class)\n"],"metadata":{"id":"HKi88QkO-0eJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def mark_to_multi(arg):\n","    return str_to_multi(arg, mark_class)\n","\n","def body_to_multi(arg):\n","    return str_to_multi(arg, body_class)\n","\n","def kpp_to_multi(arg):\n","    return str_to_multi(arg, kpp_class)\n","\n","def fuel_to_multi(arg):\n","    return str_to_multi(arg, fuel_class)"],"metadata":{"id":"wSFwB8Qi-3Bx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def extract_row_data(row):\n","  \n","    # Извлечение и преобразование данных\n","    mark = mark_to_multi(row[COL_MARK])                     # Марка\n","    year = year_to_ohe(row[COL_YEAR])                   # Год пр-ва\n","    mileage = mileage_to_ohe(row[COL_MILEAGE])  # Пробег\n","    body = body_to_multi(row[COL_BODY])                     # Кузов\n","    kpp = kpp_to_multi(row[COL_KPP])                        # Коробка передач\n","    fuel = fuel_to_multi(row[COL_FUEL])                        # Топливо\n","    volume = volume_to_ohe(row[COL_VOLUME])          # Обьем двигателя\n","    power = power_to_ohe(row[COL_POWER])       # Мощность\n","    price = extract_price(row[COL_PRICE])                 # Цена\n","    price_vec = np.array([price])\n","\n","    # Объединение всех входных данных в один общий вектор\n","    x_data = np.hstack([mark,\n","                        year, \n","                        mileage,\n","                        body,\n","                        kpp,\n","                        fuel,\n","                        volume,\n","                        power\n","                      ])\n","    \n","    # Возврат входных данных и выходных (зарплаты)\n","    return x_data, price_vec\n","\n","\n","# Создание общей выборки\n","def construct_train_data(row_list):\n","    x_data = []\n","    y_data = []\n","    \n","    for row in row_list:\n","        x, y = extract_row_data(row)\n","        if y[0] > 0:                      # Данные добавляются, только если есть зарплата\n","            x_data.append(x)\n","            y_data.append(y)\n","\n","    return np.array(x_data), np.array(y_data)"],"metadata":{"id":"89CpZNRR_FyQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Формирование выборки из загруженного набора данных    \n","x_train, y_train = construct_train_data(df.values)\n","\n","\n","length = int((len(x_train)*0.9))\n","\n","x_test = x_train[length:]\n","y_test = y_train[length:]\n","\n","x_train = x_train[:length]\n","y_train = y_train[:length]\n"],"metadata":{"id":"-UcLAIvP_IlB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Для нормализации данных используется готовый инструмент\n","y_scaler = StandardScaler()\n","\n","# Нормализация выходных данных по стандартному нормальному распределению\n","y_train_scaled = y_scaler.fit_transform(y_train)\n","y_test_scaled = y_scaler.fit_transform(y_test)"],"metadata":{"id":"YfcBv4AF_RF7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(f'Форма x_train: {x_train.shape}')\n","print(f'Форма x_test: {x_test.shape}')\n","print()\n","print(f'Форма y_train_scaled: {y_train_scaled.shape}')\n","print(f'Форма y_test_scaled: {y_test_scaled.shape}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gzAK9mKl_7v6","executionInfo":{"status":"ok","timestamp":1639069679107,"user_tz":-180,"elapsed":42,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"77a2ebce-bba0-431f-b2c1-2064cfe3f5f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Форма x_train: (63107, 101)\n","Форма x_test: (7012, 101)\n","\n","Форма y_train_scaled: (63107, 1)\n","Форма y_test_scaled: (7012, 1)\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"UP52qpUjBMPP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(x_train[0],y_train_scaled[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jxGyMIatAo3h","executionInfo":{"status":"ok","timestamp":1639069692148,"user_tz":-180,"elapsed":5,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"9e3cffcf-26f7-4e60-acb6-9d220c1d22b4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0.] [-0.62503709]\n"]}]},{"cell_type":"code","source":["device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","device"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"LLuciU8o_yGv","executionInfo":{"status":"ok","timestamp":1639069679110,"user_tz":-180,"elapsed":36,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"ff5e058e-5d87-4693-9f68-3a260e0fc792"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'cuda'"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Создаем класс для собственных данных, наследуя свойства стандартного датасета\n","class CustomDataset(data.Dataset):\n","    def __init__(self, X_DATA, labels): \n","        # Инициализируем атрибуты (они абсолютно произвольные. У вас они могут быть совсем другими)\n","        self.x_data = X_DATA # listID список имен каждого экземпляра\n","        self.labels = labels # labels - то, что скормим как yTrain\n","        \n","\n","    def __getitem__(self, index):        \n","        # В этом методе указывается то, как будут извлекаться данные при очередном обращении в цикле обучения\n","        vec = self.x_data[index] # итерируем по каждому элементу в списке\n","        label = self.labels[index] # извлекаем картинку по его ID        \n","        # Возвращаем пару экзмепляр-метка\n","        return vec, label\n","\n","    def __len__(self):\n","        # Здесь общий размер вашего датасета\n","        return len(self.x_data)"],"metadata":{"id":"G2Saf3ipBM1P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["customDataTr = CustomDataset(x_train,y_train_scaled)\n","customDataTs = CustomDataset(x_test,y_test_scaled)\n","\n","trainLoader = torch.utils.data.DataLoader(dataset=customDataTr,\n","                                           batch_size=100, \n","                                           shuffle=True,\n","                                           num_workers=2)\n"],"metadata":{"id":"XAJTCZs1K2bN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["testLoader = torch.utils.data.DataLoader(dataset=customDataTs,\n","                                           batch_size=7012, \n","                                           num_workers=2)"],"metadata":{"id":"xv2u-QQlcfOT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Static_model(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.bath1 = nn.BatchNorm1d(101)\n","    self.layer1 = nn.Linear(101, 128)\n","    self.layer2 = nn.Linear(128, 1000)\n","    self.layer3 = nn.Linear(1000, 100)\n","    self.layer4 = nn.Linear(100, 1)\n","    self.relu = nn.ReLU()\n","    self.tanh = nn.Tanh()\n","    self.double()\n","\n","  def forward(self, x):\n","    x = self.bath1(x)\n","    x = self.layer1(x)\n","    x = self.relu(x)\n","    x = self.layer2(x)\n","    x = self.tanh(x)\n","    x = self.layer3(x)\n","    x = self.relu(x)\n","    x = self.layer4(x)\n","    return x\n"],"metadata":{"id":"K1ZD09EkNIUY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Static_model().to(device)"],"metadata":{"id":"r8tCXcJCP1aJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["criterion = nn.MSELoss() # функция ошибки\n","optimizer = torch.optim.Adam(model.parameters(), lr=1e-5) # оптимизатор\n","losses = [] # сюда будет добавляться средняя ошибка. Список будем использовать для построения графика\n","model.train() # переход в режим обучения"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K_HI5UkmRWl2","executionInfo":{"status":"ok","timestamp":1639073782494,"user_tz":-180,"elapsed":16,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"2f47de94-6e91-43a6-f8e1-4fbcb5706656"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Static_model(\n","  (bath1): BatchNorm1d(101, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (layer1): Linear(in_features=101, out_features=128, bias=True)\n","  (layer2): Linear(in_features=128, out_features=1000, bias=True)\n","  (layer3): Linear(in_features=1000, out_features=100, bias=True)\n","  (layer4): Linear(in_features=100, out_features=1, bias=True)\n","  (relu): ReLU()\n","  (tanh): Tanh()\n",")"]},"metadata":{},"execution_count":101}]},{"cell_type":"code","source":["print(x_train[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KHRtWOL2SdRd","executionInfo":{"status":"ok","timestamp":1639073782495,"user_tz":-180,"elapsed":14,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"da627f7a-1b45-407b-9d0d-b8244489497d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0.]\n"]}]},{"cell_type":"code","source":["numEpochs=50"],"metadata":{"id":"4sFw3J2zUs4N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for epoch in range(numEpochs): # количество эпох\n","    lossTot = 0 # потери в совокупности\n","    for i, (vec, labels) in enumerate(trainLoader): # проходимся по всем данным в batch\n","        vec = vec.to(device)     # приводим к правильному формату для сетки\n","        labels = labels.to(device)                    # отправляем метки на используемое устройство\n","        optimizer.zero_grad()                          # обнуляем градиент\n","        outputs = model(vec)                        # здесь наше предсказание\n","        loss = criterion(outputs, labels)        # считаем ошибку \n","        loss.backward()                                # обратное распространение ошибки \n","                                                       # x.grad += dloss/dx для всех параметров x\n","\n","        lossTot += loss.detach().data # инкремент ошибки\n","        \n","        optimizer.step() # следующий шаг спуска\n","\n","    losses.append(lossTot/len(x_train)) # вычисляем среднюю ошибку и добавляем в список\n","    print('Эпоха: [%d/%d], Ошибка: %.4f' \n","           % (epoch+1, numEpochs, loss))\n","plt.plot(losses) # График нашего обучения"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"NsYemKZ6PvRf","executionInfo":{"status":"ok","timestamp":1639073912433,"user_tz":-180,"elapsed":129947,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"070ce874-00ec-4873-feb3-d1f5bbec5cf5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Эпоха: [1/50], Ошибка: 0.1044\n","Эпоха: [2/50], Ошибка: 0.0721\n","Эпоха: [3/50], Ошибка: 0.1583\n","Эпоха: [4/50], Ошибка: 0.0742\n","Эпоха: [5/50], Ошибка: 0.0561\n","Эпоха: [6/50], Ошибка: 0.0243\n","Эпоха: [7/50], Ошибка: 0.0688\n","Эпоха: [8/50], Ошибка: 0.1075\n","Эпоха: [9/50], Ошибка: 0.0232\n","Эпоха: [10/50], Ошибка: 0.0608\n","Эпоха: [11/50], Ошибка: 0.0231\n","Эпоха: [12/50], Ошибка: 0.6037\n","Эпоха: [13/50], Ошибка: 0.4450\n","Эпоха: [14/50], Ошибка: 0.0486\n","Эпоха: [15/50], Ошибка: 0.1246\n","Эпоха: [16/50], Ошибка: 0.1068\n","Эпоха: [17/50], Ошибка: 0.1715\n","Эпоха: [18/50], Ошибка: 0.0238\n","Эпоха: [19/50], Ошибка: 0.1175\n","Эпоха: [20/50], Ошибка: 0.3991\n","Эпоха: [21/50], Ошибка: 0.0384\n","Эпоха: [22/50], Ошибка: 0.1473\n","Эпоха: [23/50], Ошибка: 0.0622\n","Эпоха: [24/50], Ошибка: 0.1706\n","Эпоха: [25/50], Ошибка: 0.0732\n","Эпоха: [26/50], Ошибка: 0.1648\n","Эпоха: [27/50], Ошибка: 0.0485\n","Эпоха: [28/50], Ошибка: 0.0610\n","Эпоха: [29/50], Ошибка: 0.0701\n","Эпоха: [30/50], Ошибка: 0.1034\n","Эпоха: [31/50], Ошибка: 0.0457\n","Эпоха: [32/50], Ошибка: 0.1268\n","Эпоха: [33/50], Ошибка: 1.0744\n","Эпоха: [34/50], Ошибка: 0.1009\n","Эпоха: [35/50], Ошибка: 0.0835\n","Эпоха: [36/50], Ошибка: 0.2115\n","Эпоха: [37/50], Ошибка: 0.0341\n","Эпоха: [38/50], Ошибка: 0.2103\n","Эпоха: [39/50], Ошибка: 0.0545\n","Эпоха: [40/50], Ошибка: 0.0504\n","Эпоха: [41/50], Ошибка: 0.0542\n","Эпоха: [42/50], Ошибка: 0.3089\n","Эпоха: [43/50], Ошибка: 0.1161\n","Эпоха: [44/50], Ошибка: 0.0496\n","Эпоха: [45/50], Ошибка: 0.0188\n","Эпоха: [46/50], Ошибка: 0.0816\n","Эпоха: [47/50], Ошибка: 0.0330\n","Эпоха: [48/50], Ошибка: 0.9602\n","Эпоха: [49/50], Ошибка: 0.0103\n","Эпоха: [50/50], Ошибка: 0.1366\n"]},{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f5195c84ad0>]"]},"metadata":{},"execution_count":104},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Функция оценки результатов и вывода оценки\n","\n","def eval_net(model, x_train, y_train, y_scaler = None, n = 10, limit = 1000.):\n","  \n","    pred = model.predict(x_train)             # Предсказание на тренировочной выборке\n","    if y_scaler:                              # Если есть нормирование - то денормировать\n","        pred = y_scaler.inverse_transform(pred)\n","\n","    mean_price = df.price.mean()/1000\n","    mean_ab = mean_absolute_error(pred, y_train)\n","    print('Средняя абсолютная ошибка:',mean_ab, '\\n')\n","\n","    print('Cуммарный процент ошибки: ',mean_ab/mean_price, '\\n')\n","\n","\n","    for i in range(n):\n","        print('Реальное значение: {:6.2f}  Предсказанное значение: {:6.2f}  Разница: {:6.2f}'.format(y_train[i, 0],\n","                                                                                                    pred[i, 0],\n","                                                                                                    abs(y_train[i, 0] - pred[i, 0])))\n","    # Построение картинки разброса предсказанных и верных значений зарплаты\n","    fig, ax = plt.subplots(figsize=(6, 6))\n","    ax.scatter(y_train, pred)                 # Отрисовка точечного графика\n","    ax.set_xlim(0, limit)                     # Пределы по x, y\n","    ax.set_ylim(0, limit)\n","    ax.plot(plt.xlim(), plt.ylim(), 'r')      # Отрисовка диагональной линии\n","    plt.xlabel('Правильные значения')\n","    plt.ylabel('Предсказания')\n","    plt.grid()\n","    plt.show() "],"metadata":{"id":"NWNWSU1XTGTB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Проверка результатов\n","model.eval()  # включаем режим проверки\n","n=10\n","limit = 1000.\n","\n","with torch.no_grad():                           # отключаем автоматическое дифференцирование\n","    for vec, labels in testLoader:              # итерируем по проверочному датасету\n","        vec = vec.to(device)\n","        outputs = model(vec)                    # делаем прогноз\n","        if y_scaler:                              # Если есть нормирование - то денормировать\n","            pred = outputs.cpu() \n","            pred = y_scaler.inverse_transform(pred)\n","            labels = y_scaler.inverse_transform(labels)   \n","        mean_price = df.price.mean()/1000\n","        mean_ab = mean_absolute_error(pred, labels)\n","\n","        print('Средняя абсолютная ошибка:',mean_ab)\n","        print('Cуммарный процент ошибки: ',mean_ab/mean_price, '\\n')\n","        for i in range(n):\n","            print('Реальное значение: {:6.2f}  Предсказанное значение: {:6.2f}  Разница: {:6.2f}'.format(labels[i, 0],\n","                                                                                                    pred[i, 0],\n","                                                                                                    abs(labels[i, 0] - pred[i, 0])))\n","        # Построение картинки разброса предсказанных и верных значений цен\n","        fig, ax = plt.subplots(figsize=(6, 6))\n","        ax.scatter(labels, pred)                 # Отрисовка точечного графика\n","        ax.set_xlim(0, limit)                     # Пределы по x, y\n","        ax.set_ylim(0, limit)\n","        ax.plot(plt.xlim(), plt.ylim(), 'r')      # Отрисовка диагональной линии\n","        plt.xlabel('Правильные значения')\n","        plt.ylabel('Предсказания')\n","        plt.grid()\n","        plt.show()                                                                                            \n","    \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":613},"id":"njgaIjJvXpWF","executionInfo":{"status":"ok","timestamp":1639075302058,"user_tz":-180,"elapsed":1344,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"253f5b54-c238-482d-919e-cd867b0b193f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Средняя абсолютная ошибка: 105.39157181219136\n","Cуммарный процент ошибки:  0.19970884806927758 \n","\n","Реальное значение: 120.00  Предсказанное значение: 196.25  Разница:  76.25\n","Реальное значение: 1655.00  Предсказанное значение: 1656.15  Разница:   1.15\n","Реальное значение: 2200.00  Предсказанное значение: 1789.66  Разница: 410.34\n","Реальное значение:  95.00  Предсказанное значение: 138.81  Разница:  43.81\n","Реальное значение: 280.00  Предсказанное значение: 251.27  Разница:  28.73\n","Реальное значение: 650.00  Предсказанное значение: 520.15  Разница: 129.85\n","Реальное значение: 260.00  Предсказанное значение: 200.05  Разница:  59.95\n","Реальное значение: 350.00  Предсказанное значение: 314.19  Разница:  35.81\n","Реальное значение: 210.00  Предсказанное значение: 376.91  Разница: 166.91\n","Реальное значение: 680.00  Предсказанное значение: 619.23  Разница:  60.77\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]}]}