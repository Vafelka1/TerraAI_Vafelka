{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Решение задачи регрессии с помощью нейронных сетей | ДЗ Ultra Pro | УИИ","provenance":[{"file_id":"10fNM8E25pM9d1t3wmKp1OdFDyw03I9Da","timestamp":1635176555971}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dO8PQQvPHh63"},"source":["В данной модели я не учитывал столбец model, т.к посчитал его не очень информативным, также в нем около 3000 уникальных экземляров, этот ohe вектор был бы в 30 раз больше чем все остальные данные вместе взятые. Включать этот единственный столбец в виде слоя Embedding, тоже кажется не разумным, т.к это усложнит всю систему.  "]},{"cell_type":"code","metadata":{"id":"DSW-0LMrsBqD","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1635194558941,"user_tz":-180,"elapsed":279,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"882b788e-d5f9-41b6-eb59-8c9422fe8988"},"source":["# Загрузка датафрейма из google облака\n","import gdown\n","\n","gdown.download('https://storage.googleapis.com/datasets_ai/Base/10_regression/cars_new.csv', None, quiet=True)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'cars_new.csv'"]},"metadata":{},"execution_count":207}]},{"cell_type":"code","metadata":{"id":"rOevf5QTH4OB"},"source":["# Работа с массивами данных\n","import numpy as np \n","\n","# Работа с табличными данными\n","import pandas as pd\n","\n","# Функции-утилиты для работы с категориальными данными\n","from tensorflow.keras import utils\n","from tensorflow import keras\n","# Класс для конструирования последовательной модели нейронной сети\n","from tensorflow.keras.models import Sequential, Model\n","\n","# Основные слои\n","from tensorflow.keras.layers import Dense, Dropout, SpatialDropout1D, BatchNormalization, Embedding, Flatten, Activation, Input, concatenate\n","from tensorflow.keras.layers import SimpleRNN, GRU, LSTM, Bidirectional, Conv1D, MaxPooling1D, GlobalMaxPooling1D\n","\n","# Оптимизаторы\n","from tensorflow.keras.optimizers import Adam, Adadelta, SGD, Adagrad, RMSprop\n","\n","# Токенизатор для преобразование текстов в последовательности\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","\n","# Масштабирование данных\n","from sklearn.preprocessing import StandardScaler\n","\n","# Загрузка датасетов из облака google\n","import gdown\n","\n","# Регулярные выражения\n","import re\n","\n","# Отрисовка графиков\n","import matplotlib.pyplot as plt\n","\n","# Метрики для расчета ошибок\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"n_VxsmeHo8vb"},"source":["path = '/content/cars_new.csv'\n","df = pd.read_csv(path)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"59vBqOBoHUCm","colab":{"base_uri":"https://localhost:8080/","height":414},"executionInfo":{"status":"ok","timestamp":1635194559628,"user_tz":-180,"elapsed":23,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"dbb1a2ab-2d5e-4d2d-fe46-8bc42c727dd0"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mark</th>\n","      <th>model</th>\n","      <th>price</th>\n","      <th>year</th>\n","      <th>mileage</th>\n","      <th>body</th>\n","      <th>kpp</th>\n","      <th>fuel</th>\n","      <th>volume</th>\n","      <th>power</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>kia</td>\n","      <td>cerato</td>\n","      <td>996000</td>\n","      <td>2018</td>\n","      <td>28000</td>\n","      <td>седан</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>2.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>daewoo</td>\n","      <td>nexia 1 поколение [2-й рестайлинг]</td>\n","      <td>140200</td>\n","      <td>2012</td>\n","      <td>60500</td>\n","      <td>седан</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.5</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>suzuki</td>\n","      <td>jimny 3 поколение [рестайлинг]</td>\n","      <td>750000</td>\n","      <td>2011</td>\n","      <td>29000</td>\n","      <td>внедорожник</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>1.3</td>\n","      <td>85.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>bmw</td>\n","      <td>x1 18 e84 [рестайлинг]</td>\n","      <td>970000</td>\n","      <td>2014</td>\n","      <td>49500</td>\n","      <td>кроссовер</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>2.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>chevrolet</td>\n","      <td>lacetti 1 поколение</td>\n","      <td>205000</td>\n","      <td>2007</td>\n","      <td>151445</td>\n","      <td>седан</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.4</td>\n","      <td>95.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>70114</th>\n","      <td>skoda</td>\n","      <td>fabia 5j [рестайлинг]</td>\n","      <td>310000</td>\n","      <td>2011</td>\n","      <td>165000</td>\n","      <td>хетчбэк</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.2</td>\n","      <td>70.0</td>\n","    </tr>\n","    <tr>\n","      <th>70115</th>\n","      <td>ford</td>\n","      <td>focus 3 поколение</td>\n","      <td>400000</td>\n","      <td>2011</td>\n","      <td>125000</td>\n","      <td>хетчбэк</td>\n","      <td>механика</td>\n","      <td>бензин</td>\n","      <td>1.6</td>\n","      <td>105.0</td>\n","    </tr>\n","    <tr>\n","      <th>70116</th>\n","      <td>mazda</td>\n","      <td>cx-5 1 поколение</td>\n","      <td>1140000</td>\n","      <td>2013</td>\n","      <td>89981</td>\n","      <td>кроссовер</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>2.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>70117</th>\n","      <td>toyota</td>\n","      <td>bb 2 поколение</td>\n","      <td>550550</td>\n","      <td>2006</td>\n","      <td>183000</td>\n","      <td>минивэн</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>1.3</td>\n","      <td>92.0</td>\n","    </tr>\n","    <tr>\n","      <th>70118</th>\n","      <td>chevrolet</td>\n","      <td>trailblazer 1 поколение</td>\n","      <td>430000</td>\n","      <td>2004</td>\n","      <td>205000</td>\n","      <td>внедорожник</td>\n","      <td>автомат</td>\n","      <td>бензин</td>\n","      <td>4.2</td>\n","      <td>275.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>70119 rows × 10 columns</p>\n","</div>"],"text/plain":["            mark                               model  ...  volume  power\n","0            kia                              cerato  ...     2.0  150.0\n","1         daewoo  nexia 1 поколение [2-й рестайлинг]  ...     1.5   80.0\n","2         suzuki      jimny 3 поколение [рестайлинг]  ...     1.3   85.0\n","3            bmw              x1 18 e84 [рестайлинг]  ...     2.0  150.0\n","4      chevrolet                 lacetti 1 поколение  ...     1.4   95.0\n","...          ...                                 ...  ...     ...    ...\n","70114      skoda               fabia 5j [рестайлинг]  ...     1.2   70.0\n","70115       ford                   focus 3 поколение  ...     1.6  105.0\n","70116      mazda                    cx-5 1 поколение  ...     2.0  150.0\n","70117     toyota                      bb 2 поколение  ...     1.3   92.0\n","70118  chevrolet             trailblazer 1 поколение  ...     4.2  275.0\n","\n","[70119 rows x 10 columns]"]},"metadata":{},"execution_count":210}]},{"cell_type":"code","metadata":{"id":"pNrUfcr7kv70"},"source":["list_for_del = [140, 170, 241, 75, 152]\n","\n","for item in list_for_del:\n","  df.drop(df[df['fuel'] == item].index, inplace = True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QgS1P33ykwBC"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ELnkJGs6KvAP"},"source":["COL_MARK        = df.columns.get_loc('mark')\n","COL_MODEL       = df.columns.get_loc('model')\n","COL_PRICE       = df.columns.get_loc('price')\n","COL_YEAR        = df.columns.get_loc('year')\n","COL_MILEAGE     = df.columns.get_loc('mileage')\n","COL_BODY        = df.columns.get_loc('body')\n","COL_KPP         = df.columns.get_loc('kpp')\n","COL_FUEL        = df.columns.get_loc('fuel')\n","COL_VOLUME      = df.columns.get_loc('volume')\n","COL_POWER       = df.columns.get_loc('power')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JpW_ZqUNKpk6"},"source":["def purify(x):\n","    if isinstance(x, str):                # Если значение - строка:\n","        # Замена концов строк на пробелы, удаление символа с кодом 0xA0,\n","        # обрезка краевых пробелов и приведение к нижнему регистру\n","        x = x.replace('\\n', ' ').replace('\\xa0', '').strip().lower()\n","    return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YK6gH6SiL93d"},"source":["# Список порогов пробега в милях\n","mileage_class = [0, [25, 50, 75, 100, 150, 200, 250, 300]]\n","\n","# Список порогов year\n","year_class = [0, [1949, 1970, 1980, 1990, 2000, 2005, 2008, 2011, 2014, 2017]]\n","\n","volume_class= [0, [0.3, 1, 1.3, 1.6, 1.8, 2, 2.5, 4, 6, 8, 10]]\n","\n","power_class= [0, [11, 35, 60, 80, 100, 120, 140, 160, 180, 200, 230, 280, 320, 350, 400, 500, 700, 900, 1100, 1400]]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"69_-xyqBOT1u"},"source":["mark_class = [0, \n","              {'kia'          : 0,\n","               'daewoo'       : 1,\n","               'suzuki'       : 2,\n","               'bmw'          : 3,\n","               'chevrolet'    : 4,\n","               'hyundai'      : 5,\n","               'toyota'       : 6,\n","               'mercedes-benz': 7,\n","               'chery'        : 8,\n","               'ford'         : 9,\n","               'mazda'        : 11,\n","               'peugeot'      : 11,\n","               'volkswagen'   : 12,\n","               'audi'         : 13,\n","               'mitsubishi'   : 14,\n","               'opel'         : 15,\n","               'nissan'       : 16,\n","               'skoda'        : 17,\n","               'honda'        : 18,\n","               'renault'      : 19,\n","               'subaru'       : 20,\n","              }]\n","\n","\n","body_class = [0, \n","              {'седан'          : 0,\n","               'внедорожник'    : 1,\n","               'кроссовер'      : 2,\n","               'хетчбэк'        : 3,\n","               'универсал'      : 4,\n","               'минивэн'        : 5,\n","               'лифтбэк'        : 6,\n","               'купе'           : 7,\n","               'микроавтобус'   : 8,\n","               'пикап'          : 9,\n","               'кабриолет'      : 10,\n","               'хардтоп'        : 11,\n","               'родстер'        : 12,\n","               'тарга'          : 13,\n","               'лимузин'        : 14,\n","               'фастбэк'        : 15,\n","               'nan'            : 16\n","              }]\n","\n","\n","kpp_class = [0, \n","              {'автомат'        : 0,\n","               'механика'       : 1,\n","               'робот'          : 2,\n","               'вариатор'       : 3,\n","               'nan'            : 4\n","              }]\n","              \n","\n","fuel_class = [0, \n","              {'бензин'        : 0,\n","               'дизель'        : 1,\n","               'гибрид'        : 2,\n","               'электро'       : 3,\n","               'газ'           : 4\n","              }]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AdiMJRZANUKd"},"source":["# Вычисление счетчиков для данных разбиения\n","for class_desc in [mileage_class,\n","                   year_class,\n","                   volume_class,\n","                   power_class,\n","                   mark_class,\n","                   body_class,\n","                   kpp_class,\n","                   fuel_class]:\n","    if isinstance(class_desc[1], list):\n","        class_desc[0] = len(class_desc[1]) + 1\n","    else:\n","        class_desc[0] = max(class_desc[1].values()) + 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"A6emlueDTvpF"},"source":["def int_to_ohe(arg, class_list):\n","  \n","    # Определение размерности выходного вектора\n","    num_classes = class_list[0]\n","\n","    # Поиск верного интервала для входного значения\n","    for i in range(num_classes - 1):\n","        if arg < class_list[1][i]:\n","            cls = i                       # Интервал найден - назначение класса\n","            break\n","    else:                                 # Внимание: for/else\n","        cls = num_classes - 1             # Интервал не найден - последний класс\n","\n","    # Возврат в виде one hot encoding-вектора\n","    return utils.to_categorical(cls, num_classes)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8aAATfegUKOr"},"source":["# Общая функция преобразования строки к multi-вектору\n","# На входе данные и словарь сопоставления подстрок классам\n","\n","def str_to_multi(arg, class_dict):\n","    # Определение размерности выходного вектора\n","    num_classes = class_dict[0]\n","\n","    # Создание нулевого вектора\n","    result = np.zeros(num_classes)\n","    \n","    # Поиск значения в словаре и, если найдено,\n","    # выставление 1. на нужной позиции\n","    for value, cls in class_dict[1].items():\n","        if value == arg:\n","            result[cls] = 1.\n","\n","    return result"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_7bR83KSbiX9"},"source":["def extract_price(arg):\n","    try:\n","        # Выделение числа и преобразование к float\n","        value = float(re.search(r'\\d+', str(arg))[0])\n","    except TypeError:\n","        # Если не получилось выделить число - вернуть 0\n","        value = 0.\n","    return value / 1000. "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EtS30JpiX2rW"},"source":["def year_to_ohe(arg):\n","    return int_to_ohe(arg, year_class)\n","\n","def mileage_to_ohe(arg):\n","    return int_to_ohe(arg, mileage_class)\n","\n","def volume_to_ohe(arg):\n","    return int_to_ohe(arg, volume_class)\n","\n","def power_to_ohe(arg):\n","    return int_to_ohe(arg, power_class)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UDZBDUZRb8MW"},"source":["def mark_to_multi(arg):\n","    return str_to_multi(arg, mark_class)\n","\n","def body_to_multi(arg):\n","    return str_to_multi(arg, body_class)\n","\n","def kpp_to_multi(arg):\n","    return str_to_multi(arg, kpp_class)\n","\n","def fuel_to_multi(arg):\n","    return str_to_multi(arg, fuel_class)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"D9x_EKOD-1Wr"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R5rkRU02UXgV"},"source":["def extract_row_data(row):\n","  \n","    # Извлечение и преобразование данных\n","    mark = mark_to_multi(row[COL_MARK])                     # Марка\n","    year = year_to_ohe(row[COL_YEAR])                   # Год пр-ва\n","    mileage = mileage_to_ohe(row[COL_MILEAGE])  # Пробег\n","    body = body_to_multi(row[COL_BODY])                     # Кузов\n","    kpp = kpp_to_multi(row[COL_KPP])                        # Коробка передач\n","    fuel = fuel_to_multi(row[COL_FUEL])                        # Топливо\n","    volume = volume_to_ohe(row[COL_VOLUME])          # Обьем двигателя\n","    power = power_to_ohe(row[COL_POWER])       # Мощность\n","    price = extract_price(row[COL_PRICE])                 # Цена\n","    price_vec = np.array([price])\n","\n","    # Объединение всех входных данных в один общий вектор\n","    x_data = np.hstack([mark,\n","                        year, \n","                        mileage,\n","                        body,\n","                        kpp,\n","                        fuel,\n","                        volume,\n","                        power\n","                      ])\n","    \n","    # Возврат входных данных и выходных (зарплаты)\n","    return x_data, price_vec\n","\n","\n","# Создание общей выборки\n","def construct_train_data(row_list):\n","    x_data = []\n","    y_data = []\n","    \n","    for row in row_list:\n","        x, y = extract_row_data(row)\n","        if y[0] > 0:                      # Данные добавляются, только если есть зарплата\n","            x_data.append(x)\n","            y_data.append(y)\n","\n","    return np.array(x_data), np.array(y_data)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SyvbGRuTeSvD"},"source":["# Формирование выборки из загруженного набора данных    \n","x_train_01, y_train = construct_train_data(df.values)\n","\n","\n","length = int((len(x_train_01)*0.9))\n","\n","x_test_01 = x_train_01[length:]\n","y_test = y_train[length:]\n","\n","x_train_01 = x_train_01[:length]\n","y_train = y_train[:length]\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"umZZ6WOaAIKm"},"source":["# Для нормализации данных используется готовый инструмент\n","y_scaler = StandardScaler()\n","\n","# Нормализация выходных данных по стандартному нормальному распределению\n","y_train_scaled = y_scaler.fit_transform(y_train)\n","y_test_scaled = y_scaler.fit_transform(y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K1fOq4eF-4y7"},"source":["def plot_history(history):\n","    plt.plot(history.history['mae'], \n","            label='Средняя абсолютная ошибка на обучающем наборе')\n","    plt.plot(history.history['val_mae'], \n","            label='Средняя абсолютная ошибка на проверочном наборе')\n","    plt.xlabel('Эпоха обучения')\n","    plt.ylabel('Средняя абсолютная ошибка')\n","    plt.legend()\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"zAS6j9bu_EDZ","executionInfo":{"status":"ok","timestamp":1635194998205,"user_tz":-180,"elapsed":148789,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"e0cbefeb-3d27-4514-8088-312e0d4dfefd"},"source":["# Обучение модели на простых данных\n","\n","model_simple = Sequential()\n","model_simple.add(BatchNormalization(input_dim=x_train_01.shape[1]))\n","model_simple.add(Dense(128, activation='relu'))\n","model_simple.add(Dense(1000, activation='tanh'))\n","model_simple.add(Dense(100, activation='relu'))\n","model_simple.add(Dense(1, activation='linear'))\n","\n","model_simple.compile(optimizer=Adam(learning_rate=1e-5), loss='mse', metrics=['mae'])\n","\n","train_callbacks = [keras.callbacks.EarlyStopping(monitor=\"mae\", patience=10, restore_best_weights=True)]\n","history = model_simple.fit(x_train_01, \n","                    y_train_scaled, \n","                    epochs=50, \n","                    batch_size=256,\n","                    validation_split=0.15, \n","                    verbose=1,\n","                    callbacks = train_callbacks)\n","\n","plot_history(history)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","210/210 [==============================] - 4s 15ms/step - loss: 0.7190 - mae: 0.4508 - val_loss: 0.7156 - val_mae: 0.3719\n","Epoch 2/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.4656 - mae: 0.3257 - val_loss: 0.4976 - val_mae: 0.3055\n","Epoch 3/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.3850 - mae: 0.2937 - val_loss: 0.4190 - val_mae: 0.2801\n","Epoch 4/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.3427 - mae: 0.2741 - val_loss: 0.3815 - val_mae: 0.2689\n","Epoch 5/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.3155 - mae: 0.2609 - val_loss: 0.3551 - val_mae: 0.2551\n","Epoch 6/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2925 - mae: 0.2509 - val_loss: 0.3350 - val_mae: 0.2414\n","Epoch 7/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2758 - mae: 0.2380 - val_loss: 0.3194 - val_mae: 0.2355\n","Epoch 8/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2647 - mae: 0.2315 - val_loss: 0.3070 - val_mae: 0.2257\n","Epoch 9/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2500 - mae: 0.2240 - val_loss: 0.2971 - val_mae: 0.2211\n","Epoch 10/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2400 - mae: 0.2180 - val_loss: 0.2889 - val_mae: 0.2154\n","Epoch 11/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2292 - mae: 0.2121 - val_loss: 0.2799 - val_mae: 0.2088\n","Epoch 12/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2258 - mae: 0.2075 - val_loss: 0.2747 - val_mae: 0.2039\n","Epoch 13/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2205 - mae: 0.2041 - val_loss: 0.2688 - val_mae: 0.2038\n","Epoch 14/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2157 - mae: 0.2001 - val_loss: 0.2661 - val_mae: 0.2032\n","Epoch 15/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2100 - mae: 0.1996 - val_loss: 0.2567 - val_mae: 0.1947\n","Epoch 16/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2074 - mae: 0.1939 - val_loss: 0.2518 - val_mae: 0.1934\n","Epoch 17/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.2000 - mae: 0.1928 - val_loss: 0.2494 - val_mae: 0.1904\n","Epoch 18/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1958 - mae: 0.1907 - val_loss: 0.2463 - val_mae: 0.1878\n","Epoch 19/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1946 - mae: 0.1882 - val_loss: 0.2399 - val_mae: 0.1865\n","Epoch 20/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1888 - mae: 0.1867 - val_loss: 0.2367 - val_mae: 0.1855\n","Epoch 21/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1858 - mae: 0.1848 - val_loss: 0.2320 - val_mae: 0.1831\n","Epoch 22/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1825 - mae: 0.1852 - val_loss: 0.2298 - val_mae: 0.1816\n","Epoch 23/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1828 - mae: 0.1831 - val_loss: 0.2276 - val_mae: 0.1788\n","Epoch 24/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1767 - mae: 0.1806 - val_loss: 0.2240 - val_mae: 0.1783\n","Epoch 25/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1770 - mae: 0.1800 - val_loss: 0.2195 - val_mae: 0.1767\n","Epoch 26/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1721 - mae: 0.1790 - val_loss: 0.2185 - val_mae: 0.1780\n","Epoch 27/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1715 - mae: 0.1775 - val_loss: 0.2164 - val_mae: 0.1753\n","Epoch 28/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1663 - mae: 0.1766 - val_loss: 0.2126 - val_mae: 0.1732\n","Epoch 29/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1688 - mae: 0.1760 - val_loss: 0.2102 - val_mae: 0.1715\n","Epoch 30/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1644 - mae: 0.1736 - val_loss: 0.2097 - val_mae: 0.1718\n","Epoch 31/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1627 - mae: 0.1734 - val_loss: 0.2064 - val_mae: 0.1719\n","Epoch 32/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1611 - mae: 0.1729 - val_loss: 0.2036 - val_mae: 0.1696\n","Epoch 33/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1580 - mae: 0.1717 - val_loss: 0.2026 - val_mae: 0.1706\n","Epoch 34/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1587 - mae: 0.1712 - val_loss: 0.2000 - val_mae: 0.1681\n","Epoch 35/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1545 - mae: 0.1712 - val_loss: 0.1984 - val_mae: 0.1673\n","Epoch 36/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1552 - mae: 0.1702 - val_loss: 0.1948 - val_mae: 0.1661\n","Epoch 37/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1511 - mae: 0.1691 - val_loss: 0.1937 - val_mae: 0.1670\n","Epoch 38/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1500 - mae: 0.1689 - val_loss: 0.1918 - val_mae: 0.1649\n","Epoch 39/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1535 - mae: 0.1683 - val_loss: 0.1901 - val_mae: 0.1649\n","Epoch 40/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1477 - mae: 0.1676 - val_loss: 0.1884 - val_mae: 0.1629\n","Epoch 41/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1447 - mae: 0.1670 - val_loss: 0.1887 - val_mae: 0.1637\n","Epoch 42/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1441 - mae: 0.1669 - val_loss: 0.1836 - val_mae: 0.1637\n","Epoch 43/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1427 - mae: 0.1651 - val_loss: 0.1816 - val_mae: 0.1617\n","Epoch 44/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1421 - mae: 0.1659 - val_loss: 0.1802 - val_mae: 0.1644\n","Epoch 45/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1431 - mae: 0.1649 - val_loss: 0.1811 - val_mae: 0.1608\n","Epoch 46/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1376 - mae: 0.1640 - val_loss: 0.1792 - val_mae: 0.1606\n","Epoch 47/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1403 - mae: 0.1645 - val_loss: 0.1769 - val_mae: 0.1635\n","Epoch 48/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1363 - mae: 0.1634 - val_loss: 0.1742 - val_mae: 0.1605\n","Epoch 49/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1352 - mae: 0.1643 - val_loss: 0.1755 - val_mae: 0.1604\n","Epoch 50/50\n","210/210 [==============================] - 3s 14ms/step - loss: 0.1342 - mae: 0.1624 - val_loss: 0.1746 - val_mae: 0.1584\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"mdRig1tY_3Ug"},"source":["# Функция оценки результатов и вывода оценки\n","\n","def eval_net(model, x_train, y_train, y_scaler = None, n = 10, limit = 1000.):\n","  \n","    pred = model.predict(x_train)             # Предсказание на тренировочной выборке\n","    if y_scaler:                              # Если есть нормирование - то денормировать\n","        pred = y_scaler.inverse_transform(pred)\n","\n","    mean_price = df.price.mean()/1000\n","    mean_ab = mean_absolute_error(pred, y_train)\n","    print('Средняя абсолютная ошибка:',mean_ab, '\\n')\n","\n","    print('Cуммарный процент ошибки: ',mean_ab/mean_price, '\\n')\n","\n","\n","    for i in range(n):\n","        print('Реальное значение: {:6.2f}  Предсказанное значение: {:6.2f}  Разница: {:6.2f}'.format(y_train[i, 0],\n","                                                                                                    pred[i, 0],\n","                                                                                                    abs(y_train[i, 0] - pred[i, 0])))\n","    # Построение картинки разброса предсказанных и верных значений зарплаты\n","    fig, ax = plt.subplots(figsize=(6, 6))\n","    ax.scatter(y_train, pred)                 # Отрисовка точечного графика\n","    ax.set_xlim(0, limit)                     # Пределы по x, y\n","    ax.set_ylim(0, limit)\n","    ax.plot(plt.xlim(), plt.ylim(), 'r')      # Отрисовка диагональной линии\n","    plt.xlabel('Правильные значения')\n","    plt.ylabel('Предсказания')\n","    plt.grid()\n","    plt.show()   "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":641},"id":"uP76_gOX_5SN","executionInfo":{"status":"ok","timestamp":1635194999930,"user_tz":-180,"elapsed":1024,"user":{"displayName":"Vafelka","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11276804272897708630"}},"outputId":"34f72ce2-8089-40fb-f32d-b51f2ebf3fdd"},"source":["eval_net(model_simple, x_test_01, y_test, y_scaler)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Средняя абсолютная ошибка: 103.48089695786179 \n","\n","Cуммарный процент ошибки:  0.1960882675272863 \n","\n","Реальное значение: 120.00  Предсказанное значение:  95.84  Разница:  24.16\n","Реальное значение: 1655.00  Предсказанное значение: 1637.98  Разница:  17.02\n","Реальное значение: 2200.00  Предсказанное значение: 2194.64  Разница:   5.36\n","Реальное значение:  95.00  Предсказанное значение: 154.09  Разница:  59.09\n","Реальное значение: 280.00  Предсказанное значение: 239.73  Разница:  40.27\n","Реальное значение: 650.00  Предсказанное значение: 524.69  Разница: 125.31\n","Реальное значение: 260.00  Предсказанное значение: 205.30  Разница:  54.70\n","Реальное значение: 350.00  Предсказанное значение: 284.84  Разница:  65.16\n","Реальное значение: 210.00  Предсказанное значение: 335.06  Разница: 125.06\n","Реальное значение: 680.00  Предсказанное значение: 614.70  Разница:  65.30\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]}]}