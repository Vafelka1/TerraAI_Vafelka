{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1bkVmfzXKeBRMBYk7VCIM2KY1VFDKPinY","timestamp":1661366116476},{"file_id":"1gyRfZo1PJN7PYd29zetRHVcbTeH5Bqsg","timestamp":1650649790260}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["Реализуйте нейронку для обнаружения фигур на шахматной доске:\n","\n","1. Подгрузите базу, запустив ячейку ниже. База содержит папки: \"Изображения\", \"Аннотации\", а также файл obj.names с именами классов.\n","2. Самостоятельно сформируйте список аннотаций, приведя его в такой же вид, как в ноутбуке занятия.\n","3. Самостоятельно напишите все необходимые функции (можно подсматривать в ноутбук занятия), создайте и обучите модель YOLOv3. Возьмите 10% на проверочную выборку. Добейтесь минимальной ошибки на проверочной выборке. \n","4. Самостоятельно напишите функцию отрисовки bboxes на картинках. Используя обученную вами модель, отрисуйте предсказанные bboxes на любых 5 картинках из тестового набора. Bboxes обязательно должны содержать название и вероятность класса объекта.\n","\n","\n","        Пожалуйста, перед выполнением ДЗ, запустите раздел \"Подготовка\".\n","\n","\n","\n"],"metadata":{"id":"5VHkXnbJa7XR"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"_P2cOQnvMgkc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Вспомогательные функции\n"],"metadata":{"id":"TuWkJTXwjJbz"}},{"cell_type":"code","source":["def _sigmoid(x):    \n","    \n","    ''' Функция расчета сигмоиды из аргумента '''\n","\n","    return 1. / (1. + np.exp(-x))\n","\n","\n","def _interval_overlap(interval_a, interval_b):\n","    \n","\n","    ''' Функция рассчитывает интервал между углами рамок в зависимости от их взаимного расположения.\n","        Args:\n","            interval_a - координаты углов двух рамок по оси X.\n","            interval_b - координаты углов двух рамок по оси Y.\n","        Return:\n","            значение интервала между крайними точками.\n","    ''' \n","    \n","    x1, x2 = interval_a\n","    x3, x4 = interval_b\n","    \n","    if x3 < x1:\n","        if x4 < x1:\n","            return 0\n","        else:\n","            return min(x2,x4) - x1\n","    else:\n","        if x2 < x3:\n","            return 0\n","        else:\n","            return min(x2,x4) - x3\n","\n","\n","def intersectionOverUnion(box1, box2):\n","    \n","    ''' Функция рассчитывает отношение пересечение над объединениеми.\n","        Args:\n","            box1 - координаты рамки.\n","            box2 - координаты рамки.\n","        Return:\n","            значение IoU.\n","    '''\n","\n","    intersect_w = _interval_overlap([box1.xmin, box1.xmax], [box2.xmin, box2.xmax])\n","    intersect_h = _interval_overlap([box1.ymin, box1.ymax], [box2.ymin, box2.ymax])\n","    intersect_area = intersect_w * intersect_h\n","\n","    w1, h1 = box1.xmax-box1.xmin, box1.ymax-box1.ymin\n","    w2, h2 = box2.xmax-box2.xmin, box2.ymax-box2.ymin\n","\n","    union_area = w1*h1 + w2*h2 - intersect_area\n","    \n","    return float(intersect_area) / union_area"],"metadata":{"id":"8Ddm8LbZjNxM","executionInfo":{"status":"ok","timestamp":1663527697702,"user_tz":-180,"elapsed":8,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["def do_nms(boxes, nms_thresh): \n","    \n","    ''' \n","    Функция  подавления лишних BBox Non Maximum Suppression\n","    \n","    Args:\n","        boxes - рамки \n","        nms_thresh - пороговое значение\n","    Return: -\n","\n","    '''\n","    \n","    if len(boxes) > 0:\n","        nb_class = len(boxes[0].classes)\n","    else:\n","        return\n","    \n","    for c in range(nb_class):\n","        sorted_indices = np.argsort([-box.classes[c] for box in boxes])\n","        \n","        for i in range(len(sorted_indices)):\n","            index_i = sorted_indices[i]\n","            if boxes[index_i].classes[c] == 0: continue\n","            \n","            for j in range(i+1, len(sorted_indices)):\n","                index_j = sorted_indices[j]\n","                \n","                if intersectionOverUnion(boxes[index_i], boxes[index_j]) >= nms_thresh:\n","                    boxes[index_j].classes[c] = 0"],"metadata":{"id":"2wmMyE0djVEU","executionInfo":{"status":"ok","timestamp":1663527697703,"user_tz":-180,"elapsed":8,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def load_image_pixels(filename, shape):\n","    \n","    ''' \n","    Функция преобразует воходящее изображения до заданных размеров, а также отслеживает исходную форму, \n","    которая позже используется для рисования рамок на оригинальном изображении. \n","    \n","    Стандартной формой ввода для YOLOv3 является форма 416x416. \n","    \n","    Args:\n","        filename -путь к файлу изображения включая его имя,  string\n","        shape - форма входного изображения сети (416х416), tuple\n","    \n","    Return:\n","        img - изображение заданной формы 'shape', с добавленной размерностью под batch, np.array\n","        width - оригинальная ширину изображения, int\n","        height - оригинальная высоту изображения, int\n","    '''\n","\n","    # загружаем оригинальное изображение и получаем его формат\n","    img = image.load_img(filename)\n","    width, height = img.size\n","    \n","    # загружаем изображение с заданными размерами (416х416)\n","    img = image.load_img(filename, target_size=shape)\n","    \n","    # преобразуем в numpy массив\n","    img = image.img_to_array(img)\n","    \n","    # нормируем значение пикселей в диапазоне [0, 1]\n","    img = img.astype('float32')\n","    img /= 255.0\n","    \n","    # добавляем размерность в начало \n","    img = np.expand_dims(img, 0)\n","    \n","    return img, width, height"],"metadata":{"id":"5Vc4WagyjrGc","executionInfo":{"status":"ok","timestamp":1663527697979,"user_tz":-180,"elapsed":283,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["## Подготовка"],"metadata":{"id":"zQCkFeDfC1r1"}},{"cell_type":"code","source":["# Импорт необходимых библиотек\n","\n","# для измерения времени обучения\n","import time\n","\n","# для создания случайных величин\n","import random\n","\n","# Импортируем tensorflow\n","import tensorflow as tf \n","\n","# бэкенд Keras\n","import tensorflow.keras.backend as K \n","\n","# функции для детализации и управления процессом обучения\n","from keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LambdaCallback, CSVLogger\n","\n","# функция для отрисовки структуры модели\n","from keras.utils.vis_utils import plot_model \n","\n","# Модули конвертации между RGB и HSV\n","from matplotlib.colors import rgb_to_hsv, hsv_to_rgb \n","\n","# Модули работы с изображениями\n","from PIL import Image, ImageDraw, ImageFont \n","\n","import struct\n","import gdown\n","\n","# библиотека numpy\n","import numpy as np\n","\n","# Слои нейронной сети\n","from keras.layers import Conv2D, Input, BatchNormalization, LeakyReLU, ZeroPadding2D, UpSampling2D, Lambda\n","\n","# Оптимизатор Adam\n","from tensorflow.keras.optimizers import Adam \n","\n","# работа со слоями\n","from keras.layers.merge import add, concatenate\n","\n","# создание моделей\n","from keras.models import Model\n","\n","# загрузчик сохраненных моделей\n","from keras.models import load_model\n","\n","# итератор, повторно возвращающий указанный объект \n","from itertools import repeat\n","\n","# регуляризатор, который применяет штраф за регуляризацию L2\n","from tensorflow.keras.regularizers import l2 \n","\n","# модуль для отрисовки изображения\n","from tensorflow.keras.preprocessing import image \n","\n","# gрямоугольник, определяемый точкой привязки xy , а также его шириной и высотой\n","from matplotlib.patches import Rectangle\n","\n","# возвращение списка (возможно, пустого) путей, соответствующих шаблону pathname\n","from glob import glob\n","\n","# библиотека для работы с файлами\n","import os\n","\n","# визуализация \n","from matplotlib import pyplot as plt\n","%matplotlib inline  "],"metadata":{"id":"LCpzdzWW73rj","executionInfo":{"status":"ok","timestamp":1663527701798,"user_tz":-180,"elapsed":3823,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"NXBg6RtokD3l","executionInfo":{"status":"ok","timestamp":1663527705737,"user_tz":-180,"elapsed":3950,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"source":["# Загрузка базы\n","\n","gdown.download('https://storage.yandexcloud.net/terraai/sources/chess.zip', output=None, quiet=True)\n","\n","!unzip -q chess.zip"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["## Блоки"],"metadata":{"id":"2Lkc6tVKC4ZN"}},{"cell_type":"code","source":["def DBL(x, filters, kernel, strides=1, batch_norm=True, layer_idx=None): # DarknetConv2D_BN_Leaky\n","   \n","    '''\n","    Функция реализует блок DBL в составе моделей Darknet и YOLO\n","    \n","    Args:\n","        x - тензор входных данных\n","        filter - количество фильтров на слой, целое число\n","        kernel - размер ядра свертки, целое число\n","        stride - шаг свертки, целое число\n","        batch_norm - включать или ветку со слоем Batchnormalization и активационной функцией LeakyReLu. \n","        layer_idx - номер слоя\n","    \n","    Return:\n","        x - тензор выходных данных\n","        layer_idx+1 -номер следующего слоя\n","\n","    '''\n","    \n","    if strides == 1:\n","        padding = 'same'\n","    else:\n","        x = ZeroPadding2D(((1, 0), (1, 0)))(x)  # Делаем oтступ в виде нулей по контуру изображения, что бы захватить левый верхний угол\n","        padding = 'valid'\n","    x = Conv2D(filters=filters, kernel_size=kernel,\n","              strides=strides, padding=padding,\n","              use_bias=not batch_norm, kernel_regularizer=l2(0.0005), name='conv_' + str(layer_idx))(x)\n","    if batch_norm:\n","        x = BatchNormalization(epsilon=0.001, name='bnorm_' + str(layer_idx))(x)\n","        x = LeakyReLU(alpha=0.1,name='leake_' + str(layer_idx))(x)\n","    \n","    return x, layer_idx+1\n","\n","\n","def Res_unit(x, filters, layer_idx): # DarknetResidual\n","\n","    '''\n","    Функция определяет минимальную ячейку Residual блока\n","    \n","    Args:\n","        x - тензор входных данных\n","        filter - количество фильтров на слой, целое число\n","        layer_idx - номер слоя\n","    \n","    Return:\n","        x - тензор выходных данных\n","        layer_idx+1 - номер следующего слоя\n","\n","    '''\n","\n","    skip_connection = x\n","    x, layer_idx = DBL(x, filters // 2, kernel=1, layer_idx=layer_idx)\n","    x, layer_idx = DBL(x, filters, kernel=3, layer_idx=layer_idx)\n","    x = add([skip_connection , x], name='Add_'+str(layer_idx))\n","\n","    return x, layer_idx+1\n","\n","\n","def ResBlock(x, filters, blocks, layer_idx): # DarknetBlock\n","\n","    '''\n","    Функция определяет Residual блок состоящий из входного сверточного слоя \n","    и последовательности Res_unit блоков\n","    \n","    Args:\n","        x - тензор входных данных\n","        filters - задает количество фильтров\n","        block - задает количество Residual 'ячеек', а именно, сколько раз повторить в цикле функцию Res_unit\n","        layer_idx - номер слоя\n","    \n","    Return:\n","        x - тензор выходных данных\n","        layer_idx -номер слоя\n","\n","    '''\n","\n","    x, layer_idx = DBL(x, filters, kernel=3, strides=2, layer_idx=layer_idx)\n","    \n","    for _ in repeat(None, blocks):\n","        x, layer_idx = Res_unit(x, filters, layer_idx=layer_idx)\n","    \n","    return x, layer_idx"],"metadata":{"id":"WtCtPmQURzo9","executionInfo":{"status":"ok","timestamp":1663527705737,"user_tz":-180,"elapsed":18,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def Detector(x_in, filters, layer_idx=None):\n","   \n","    '''\n","    Функция реализует блок DBL в составе моделей Darknet и YOLO\n","    \n","    Args:\n","        x_in - тензор или список тензоров\n","        filters - количество фильтров\n","        layer_idx - номер следующего сверточного слоя\n","    \n","    Return:\n","        bboxes - рамки\n","        fork - тензор\n","        layer_idx -номер слоя\n","\n","    '''\n","\n","    if isinstance(x_in, list): # Если на вход поступает список попадаем в эту ветку (маршруты 2 и 3)\n","        x, x_skip = x_in[0], x_in[1]# Разбиваем список на отдельные тензоры\n","        x,layer_idx = DBL(x, filters, kernel=1, strides=1, layer_idx=layer_idx) # DarknetConv\n","        x = UpSampling2D(2, name = 'UpSampling_' + str(layer_idx))(x) # Повышаем размерность тензора\n","        layer_idx+=1\n","        x =concatenate([x, x_skip], name = 'Concatenate_' + str(layer_idx)) # Объединяем маршруты\n","        layer_idx+=1\n","        \n","        # Пять сверточных слоев DBL*5 \n","        for i in range(2):\n","          x, layer_idx = DBL(x, filters, 1, layer_idx=layer_idx)      # 1,3\n","          x, layer_idx = DBL(x, filters * 2, 3, layer_idx=layer_idx)  # 2,4\n","        \n","        fork, layer_idx = DBL(x, filters, 1, layer_idx=layer_idx)      # 5 С пятого слоя каскада делаем вилку на выход и на другой масштаб         \n","    \n","    else: # В эту ветку попадает только маршрут 1\n","        x = x_in\n","        \n","        # Пять сверточных слоев DBL*5 \n","        for i in range(2):\n","          x, layer_idx = DBL(x, filters, 1, layer_idx=layer_idx)      # 1,3\n","          x, layer_idx = DBL(x, filters * 2, 3, layer_idx=layer_idx)  # 2,4\n","        \n","        fork, layer_idx = DBL(x, filters, 1, layer_idx=layer_idx)      # 5 С пятого слоя каскада делаем вилку на выход и на другой масштаб \n","\n","    # Предпоследний сверточный слой (№80 13х13х1024, #92 26x26x512, #104 52x52x256)\n","    x,layer_idx = DBL(fork, filters=filters*2, kernel=3, strides=1, layer_idx=layer_idx)\n","\n","    # Выходные слои (№81 13х13х (anchors * (4 + 1 + classes)), №93 26х26, №105 52х52 (255) \n","    bboxes, layer_idx = DBL(x, filters=num_sub_anchors * (4 + 1 + num_classes), kernel=1, strides=1, batch_norm= False, layer_idx=layer_idx)       \n","\n","    return bboxes, fork, layer_idx"],"metadata":{"id":"-_GGio69KF2t","executionInfo":{"status":"ok","timestamp":1663527705738,"user_tz":-180,"elapsed":17,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["## Модель\n"],"metadata":{"id":"cVzs9cpuK8pb"}},{"cell_type":"code","source":["def create_yolov3_model(inputs, num_sub_anchors, num_classes):\n","    \n","    '''\n","    Функция реализует блок DBL в составе моделей Darknet и YOLO\n","    \n","    Args:\n","        inputs - входной тензор  \n","        num_sub_anchors - количество анкоров \n","        num_classes - количество классов\n","    \n","    Return:\n","        model - модель\n","\n","    '''\n","    layer_idx = 0 # Номер первого слоя\n","    x, layer_idx = DBL(inputs, filters=32, kernel=3, layer_idx=layer_idx)       # DarknetConv 1 слой\n","    x, layer_idx = ResBlock(x, filters=64, blocks=1, layer_idx=layer_idx)            # DarknetBlock 3 слоя\n","    x, layer_idx = ResBlock(x, filters=128, blocks=2, layer_idx=layer_idx)           # DarknetBlock 5 слоя\n","    x, layer_idx = Route_1,_ = ResBlock(x, filters=256, blocks=8, layer_idx=layer_idx) # DarknetBlock 9 слоев\n","    x, layer_idx = Route_2,_ = ResBlock(x, filters=512, blocks=8, layer_idx=layer_idx) # DarknetBlock 9 слоев\n","    Route_3, layer_idx = ResBlock(x, filters=1024, blocks=4, layer_idx=layer_idx)          # последние 4 Res блока Darknet\n","    \n","    # 5 сверточных слоев DBL\n","    bbox_scale_1, fork_1, layer_idx = Detector(Route_3, filters=512, layer_idx=layer_idx) \n","\n","    # 82 слой на первый выход  83 пропуск\n","    layer_idx = 84\n","    bbox_scale_2, fork_2, layer_idx = Detector([fork_1, Route_2], filters=256, layer_idx=layer_idx) # 6 слоев\n"," \n","    # слои 94-95 пропущены\n","    layer_idx = 96\n","    bbox_scale_3, _, layer_idx = Detector([fork_2, Route_1], filters=128, layer_idx=layer_idx) # 6 слоев\n","\n","    model = Model (inputs, [bbox_scale_1, bbox_scale_2, bbox_scale_3])\n","\n","    return model"],"metadata":{"id":"v9X_ikgLLCBk","executionInfo":{"status":"ok","timestamp":1663527705739,"user_tz":-180,"elapsed":16,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["size = 416\n","\n","channels= 3\n","num_sub_anchors=3\n","num_classes=13\n","inputs = Input([size, size, channels])\n","\n","# создаем модель\n","model = create_yolov3_model(inputs, num_sub_anchors, num_classes)\n","\n","# выводим сводку\n","model.summary()"],"metadata":{"id":"h0Kf3b5CMb7M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663527714044,"user_tz":-180,"elapsed":8319,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"bc7277ac-5458-4fc0-9779-29538a465a0a"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 416, 416, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," conv_0 (Conv2D)                (None, 416, 416, 32  864         ['input_1[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_0 (BatchNormalization)   (None, 416, 416, 32  128         ['conv_0[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," leake_0 (LeakyReLU)            (None, 416, 416, 32  0           ['bnorm_0[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," zero_padding2d (ZeroPadding2D)  (None, 417, 417, 32  0          ['leake_0[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," conv_1 (Conv2D)                (None, 208, 208, 64  18432       ['zero_padding2d[0][0]']         \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_1 (BatchNormalization)   (None, 208, 208, 64  256         ['conv_1[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," leake_1 (LeakyReLU)            (None, 208, 208, 64  0           ['bnorm_1[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," conv_2 (Conv2D)                (None, 208, 208, 32  2048        ['leake_1[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_2 (BatchNormalization)   (None, 208, 208, 32  128         ['conv_2[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," leake_2 (LeakyReLU)            (None, 208, 208, 32  0           ['bnorm_2[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," conv_3 (Conv2D)                (None, 208, 208, 64  18432       ['leake_2[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_3 (BatchNormalization)   (None, 208, 208, 64  256         ['conv_3[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," leake_3 (LeakyReLU)            (None, 208, 208, 64  0           ['bnorm_3[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," Add_4 (Add)                    (None, 208, 208, 64  0           ['leake_1[0][0]',                \n","                                )                                 'leake_3[0][0]']                \n","                                                                                                  \n"," zero_padding2d_1 (ZeroPadding2  (None, 209, 209, 64  0          ['Add_4[0][0]']                  \n"," D)                             )                                                                 \n","                                                                                                  \n"," conv_5 (Conv2D)                (None, 104, 104, 12  73728       ['zero_padding2d_1[0][0]']       \n","                                8)                                                                \n","                                                                                                  \n"," bnorm_5 (BatchNormalization)   (None, 104, 104, 12  512         ['conv_5[0][0]']                 \n","                                8)                                                                \n","                                                                                                  \n"," leake_5 (LeakyReLU)            (None, 104, 104, 12  0           ['bnorm_5[0][0]']                \n","                                8)                                                                \n","                                                                                                  \n"," conv_6 (Conv2D)                (None, 104, 104, 64  8192        ['leake_5[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_6 (BatchNormalization)   (None, 104, 104, 64  256         ['conv_6[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," leake_6 (LeakyReLU)            (None, 104, 104, 64  0           ['bnorm_6[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," conv_7 (Conv2D)                (None, 104, 104, 12  73728       ['leake_6[0][0]']                \n","                                8)                                                                \n","                                                                                                  \n"," bnorm_7 (BatchNormalization)   (None, 104, 104, 12  512         ['conv_7[0][0]']                 \n","                                8)                                                                \n","                                                                                                  \n"," leake_7 (LeakyReLU)            (None, 104, 104, 12  0           ['bnorm_7[0][0]']                \n","                                8)                                                                \n","                                                                                                  \n"," Add_8 (Add)                    (None, 104, 104, 12  0           ['leake_5[0][0]',                \n","                                8)                                'leake_7[0][0]']                \n","                                                                                                  \n"," conv_9 (Conv2D)                (None, 104, 104, 64  8192        ['Add_8[0][0]']                  \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_9 (BatchNormalization)   (None, 104, 104, 64  256         ['conv_9[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," leake_9 (LeakyReLU)            (None, 104, 104, 64  0           ['bnorm_9[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," conv_10 (Conv2D)               (None, 104, 104, 12  73728       ['leake_9[0][0]']                \n","                                8)                                                                \n","                                                                                                  \n"," bnorm_10 (BatchNormalization)  (None, 104, 104, 12  512         ['conv_10[0][0]']                \n","                                8)                                                                \n","                                                                                                  \n"," leake_10 (LeakyReLU)           (None, 104, 104, 12  0           ['bnorm_10[0][0]']               \n","                                8)                                                                \n","                                                                                                  \n"," Add_11 (Add)                   (None, 104, 104, 12  0           ['Add_8[0][0]',                  \n","                                8)                                'leake_10[0][0]']               \n","                                                                                                  \n"," zero_padding2d_2 (ZeroPadding2  (None, 105, 105, 12  0          ['Add_11[0][0]']                 \n"," D)                             8)                                                                \n","                                                                                                  \n"," conv_12 (Conv2D)               (None, 52, 52, 256)  294912      ['zero_padding2d_2[0][0]']       \n","                                                                                                  \n"," bnorm_12 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_12[0][0]']                \n","                                                                                                  \n"," leake_12 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_12[0][0]']               \n","                                                                                                  \n"," conv_13 (Conv2D)               (None, 52, 52, 128)  32768       ['leake_12[0][0]']               \n","                                                                                                  \n"," bnorm_13 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_13[0][0]']                \n","                                                                                                  \n"," leake_13 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_13[0][0]']               \n","                                                                                                  \n"," conv_14 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_13[0][0]']               \n","                                                                                                  \n"," bnorm_14 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_14[0][0]']                \n","                                                                                                  \n"," leake_14 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_14[0][0]']               \n","                                                                                                  \n"," Add_15 (Add)                   (None, 52, 52, 256)  0           ['leake_12[0][0]',               \n","                                                                  'leake_14[0][0]']               \n","                                                                                                  \n"," conv_16 (Conv2D)               (None, 52, 52, 128)  32768       ['Add_15[0][0]']                 \n","                                                                                                  \n"," bnorm_16 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_16[0][0]']                \n","                                                                                                  \n"," leake_16 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_16[0][0]']               \n","                                                                                                  \n"," conv_17 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_16[0][0]']               \n","                                                                                                  \n"," bnorm_17 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_17[0][0]']                \n","                                                                                                  \n"," leake_17 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_17[0][0]']               \n","                                                                                                  \n"," Add_18 (Add)                   (None, 52, 52, 256)  0           ['Add_15[0][0]',                 \n","                                                                  'leake_17[0][0]']               \n","                                                                                                  \n"," conv_19 (Conv2D)               (None, 52, 52, 128)  32768       ['Add_18[0][0]']                 \n","                                                                                                  \n"," bnorm_19 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_19[0][0]']                \n","                                                                                                  \n"," leake_19 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_19[0][0]']               \n","                                                                                                  \n"," conv_20 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_19[0][0]']               \n","                                                                                                  \n"," bnorm_20 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_20[0][0]']                \n","                                                                                                  \n"," leake_20 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_20[0][0]']               \n","                                                                                                  \n"," Add_21 (Add)                   (None, 52, 52, 256)  0           ['Add_18[0][0]',                 \n","                                                                  'leake_20[0][0]']               \n","                                                                                                  \n"," conv_22 (Conv2D)               (None, 52, 52, 128)  32768       ['Add_21[0][0]']                 \n","                                                                                                  \n"," bnorm_22 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_22[0][0]']                \n","                                                                                                  \n"," leake_22 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_22[0][0]']               \n","                                                                                                  \n"," conv_23 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_22[0][0]']               \n","                                                                                                  \n"," bnorm_23 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_23[0][0]']                \n","                                                                                                  \n"," leake_23 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_23[0][0]']               \n","                                                                                                  \n"," Add_24 (Add)                   (None, 52, 52, 256)  0           ['Add_21[0][0]',                 \n","                                                                  'leake_23[0][0]']               \n","                                                                                                  \n"," conv_25 (Conv2D)               (None, 52, 52, 128)  32768       ['Add_24[0][0]']                 \n","                                                                                                  \n"," bnorm_25 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_25[0][0]']                \n","                                                                                                  \n"," leake_25 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_25[0][0]']               \n","                                                                                                  \n"," conv_26 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_25[0][0]']               \n","                                                                                                  \n"," bnorm_26 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_26[0][0]']                \n","                                                                                                  \n"," leake_26 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_26[0][0]']               \n","                                                                                                  \n"," Add_27 (Add)                   (None, 52, 52, 256)  0           ['Add_24[0][0]',                 \n","                                                                  'leake_26[0][0]']               \n","                                                                                                  \n"," conv_28 (Conv2D)               (None, 52, 52, 128)  32768       ['Add_27[0][0]']                 \n","                                                                                                  \n"," bnorm_28 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_28[0][0]']                \n","                                                                                                  \n"," leake_28 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_28[0][0]']               \n","                                                                                                  \n"," conv_29 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_28[0][0]']               \n","                                                                                                  \n"," bnorm_29 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_29[0][0]']                \n","                                                                                                  \n"," leake_29 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_29[0][0]']               \n","                                                                                                  \n"," Add_30 (Add)                   (None, 52, 52, 256)  0           ['Add_27[0][0]',                 \n","                                                                  'leake_29[0][0]']               \n","                                                                                                  \n"," conv_31 (Conv2D)               (None, 52, 52, 128)  32768       ['Add_30[0][0]']                 \n","                                                                                                  \n"," bnorm_31 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_31[0][0]']                \n","                                                                                                  \n"," leake_31 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_31[0][0]']               \n","                                                                                                  \n"," conv_32 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_31[0][0]']               \n","                                                                                                  \n"," bnorm_32 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_32[0][0]']                \n","                                                                                                  \n"," leake_32 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_32[0][0]']               \n","                                                                                                  \n"," Add_33 (Add)                   (None, 52, 52, 256)  0           ['Add_30[0][0]',                 \n","                                                                  'leake_32[0][0]']               \n","                                                                                                  \n"," conv_34 (Conv2D)               (None, 52, 52, 128)  32768       ['Add_33[0][0]']                 \n","                                                                                                  \n"," bnorm_34 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_34[0][0]']                \n","                                                                                                  \n"," leake_34 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_34[0][0]']               \n","                                                                                                  \n"," conv_35 (Conv2D)               (None, 52, 52, 256)  294912      ['leake_34[0][0]']               \n","                                                                                                  \n"," bnorm_35 (BatchNormalization)  (None, 52, 52, 256)  1024        ['conv_35[0][0]']                \n","                                                                                                  \n"," leake_35 (LeakyReLU)           (None, 52, 52, 256)  0           ['bnorm_35[0][0]']               \n","                                                                                                  \n"," Add_36 (Add)                   (None, 52, 52, 256)  0           ['Add_33[0][0]',                 \n","                                                                  'leake_35[0][0]']               \n","                                                                                                  \n"," zero_padding2d_3 (ZeroPadding2  (None, 53, 53, 256)  0          ['Add_36[0][0]']                 \n"," D)                                                                                               \n","                                                                                                  \n"," conv_37 (Conv2D)               (None, 26, 26, 512)  1179648     ['zero_padding2d_3[0][0]']       \n","                                                                                                  \n"," bnorm_37 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_37[0][0]']                \n","                                                                                                  \n"," leake_37 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_37[0][0]']               \n","                                                                                                  \n"," conv_38 (Conv2D)               (None, 26, 26, 256)  131072      ['leake_37[0][0]']               \n","                                                                                                  \n"," bnorm_38 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_38[0][0]']                \n","                                                                                                  \n"," leake_38 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_38[0][0]']               \n","                                                                                                  \n"," conv_39 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_38[0][0]']               \n","                                                                                                  \n"," bnorm_39 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_39[0][0]']                \n","                                                                                                  \n"," leake_39 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_39[0][0]']               \n","                                                                                                  \n"," Add_40 (Add)                   (None, 26, 26, 512)  0           ['leake_37[0][0]',               \n","                                                                  'leake_39[0][0]']               \n","                                                                                                  \n"," conv_41 (Conv2D)               (None, 26, 26, 256)  131072      ['Add_40[0][0]']                 \n","                                                                                                  \n"," bnorm_41 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_41[0][0]']                \n","                                                                                                  \n"," leake_41 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_41[0][0]']               \n","                                                                                                  \n"," conv_42 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_41[0][0]']               \n","                                                                                                  \n"," bnorm_42 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_42[0][0]']                \n","                                                                                                  \n"," leake_42 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_42[0][0]']               \n","                                                                                                  \n"," Add_43 (Add)                   (None, 26, 26, 512)  0           ['Add_40[0][0]',                 \n","                                                                  'leake_42[0][0]']               \n","                                                                                                  \n"," conv_44 (Conv2D)               (None, 26, 26, 256)  131072      ['Add_43[0][0]']                 \n","                                                                                                  \n"," bnorm_44 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_44[0][0]']                \n","                                                                                                  \n"," leake_44 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_44[0][0]']               \n","                                                                                                  \n"," conv_45 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_44[0][0]']               \n","                                                                                                  \n"," bnorm_45 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_45[0][0]']                \n","                                                                                                  \n"," leake_45 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_45[0][0]']               \n","                                                                                                  \n"," Add_46 (Add)                   (None, 26, 26, 512)  0           ['Add_43[0][0]',                 \n","                                                                  'leake_45[0][0]']               \n","                                                                                                  \n"," conv_47 (Conv2D)               (None, 26, 26, 256)  131072      ['Add_46[0][0]']                 \n","                                                                                                  \n"," bnorm_47 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_47[0][0]']                \n","                                                                                                  \n"," leake_47 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_47[0][0]']               \n","                                                                                                  \n"," conv_48 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_47[0][0]']               \n","                                                                                                  \n"," bnorm_48 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_48[0][0]']                \n","                                                                                                  \n"," leake_48 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_48[0][0]']               \n","                                                                                                  \n"," Add_49 (Add)                   (None, 26, 26, 512)  0           ['Add_46[0][0]',                 \n","                                                                  'leake_48[0][0]']               \n","                                                                                                  \n"," conv_50 (Conv2D)               (None, 26, 26, 256)  131072      ['Add_49[0][0]']                 \n","                                                                                                  \n"," bnorm_50 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_50[0][0]']                \n","                                                                                                  \n"," leake_50 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_50[0][0]']               \n","                                                                                                  \n"," conv_51 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_50[0][0]']               \n","                                                                                                  \n"," bnorm_51 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_51[0][0]']                \n","                                                                                                  \n"," leake_51 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_51[0][0]']               \n","                                                                                                  \n"," Add_52 (Add)                   (None, 26, 26, 512)  0           ['Add_49[0][0]',                 \n","                                                                  'leake_51[0][0]']               \n","                                                                                                  \n"," conv_53 (Conv2D)               (None, 26, 26, 256)  131072      ['Add_52[0][0]']                 \n","                                                                                                  \n"," bnorm_53 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_53[0][0]']                \n","                                                                                                  \n"," leake_53 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_53[0][0]']               \n","                                                                                                  \n"," conv_54 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_53[0][0]']               \n","                                                                                                  \n"," bnorm_54 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_54[0][0]']                \n","                                                                                                  \n"," leake_54 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_54[0][0]']               \n","                                                                                                  \n"," Add_55 (Add)                   (None, 26, 26, 512)  0           ['Add_52[0][0]',                 \n","                                                                  'leake_54[0][0]']               \n","                                                                                                  \n"," conv_56 (Conv2D)               (None, 26, 26, 256)  131072      ['Add_55[0][0]']                 \n","                                                                                                  \n"," bnorm_56 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_56[0][0]']                \n","                                                                                                  \n"," leake_56 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_56[0][0]']               \n","                                                                                                  \n"," conv_57 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_56[0][0]']               \n","                                                                                                  \n"," bnorm_57 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_57[0][0]']                \n","                                                                                                  \n"," leake_57 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_57[0][0]']               \n","                                                                                                  \n"," Add_58 (Add)                   (None, 26, 26, 512)  0           ['Add_55[0][0]',                 \n","                                                                  'leake_57[0][0]']               \n","                                                                                                  \n"," conv_59 (Conv2D)               (None, 26, 26, 256)  131072      ['Add_58[0][0]']                 \n","                                                                                                  \n"," bnorm_59 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_59[0][0]']                \n","                                                                                                  \n"," leake_59 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_59[0][0]']               \n","                                                                                                  \n"," conv_60 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_59[0][0]']               \n","                                                                                                  \n"," bnorm_60 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_60[0][0]']                \n","                                                                                                  \n"," leake_60 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_60[0][0]']               \n","                                                                                                  \n"," Add_61 (Add)                   (None, 26, 26, 512)  0           ['Add_58[0][0]',                 \n","                                                                  'leake_60[0][0]']               \n","                                                                                                  \n"," zero_padding2d_4 (ZeroPadding2  (None, 27, 27, 512)  0          ['Add_61[0][0]']                 \n"," D)                                                                                               \n","                                                                                                  \n"," conv_62 (Conv2D)               (None, 13, 13, 1024  4718592     ['zero_padding2d_4[0][0]']       \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_62 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_62[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," leake_62 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_62[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," conv_63 (Conv2D)               (None, 13, 13, 512)  524288      ['leake_62[0][0]']               \n","                                                                                                  \n"," bnorm_63 (BatchNormalization)  (None, 13, 13, 512)  2048        ['conv_63[0][0]']                \n","                                                                                                  \n"," leake_63 (LeakyReLU)           (None, 13, 13, 512)  0           ['bnorm_63[0][0]']               \n","                                                                                                  \n"," conv_64 (Conv2D)               (None, 13, 13, 1024  4718592     ['leake_63[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_64 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_64[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," leake_64 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_64[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," Add_65 (Add)                   (None, 13, 13, 1024  0           ['leake_62[0][0]',               \n","                                )                                 'leake_64[0][0]']               \n","                                                                                                  \n"," conv_66 (Conv2D)               (None, 13, 13, 512)  524288      ['Add_65[0][0]']                 \n","                                                                                                  \n"," bnorm_66 (BatchNormalization)  (None, 13, 13, 512)  2048        ['conv_66[0][0]']                \n","                                                                                                  \n"," leake_66 (LeakyReLU)           (None, 13, 13, 512)  0           ['bnorm_66[0][0]']               \n","                                                                                                  \n"," conv_67 (Conv2D)               (None, 13, 13, 1024  4718592     ['leake_66[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_67 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_67[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," leake_67 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_67[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," Add_68 (Add)                   (None, 13, 13, 1024  0           ['Add_65[0][0]',                 \n","                                )                                 'leake_67[0][0]']               \n","                                                                                                  \n"," conv_69 (Conv2D)               (None, 13, 13, 512)  524288      ['Add_68[0][0]']                 \n","                                                                                                  \n"," bnorm_69 (BatchNormalization)  (None, 13, 13, 512)  2048        ['conv_69[0][0]']                \n","                                                                                                  \n"," leake_69 (LeakyReLU)           (None, 13, 13, 512)  0           ['bnorm_69[0][0]']               \n","                                                                                                  \n"," conv_70 (Conv2D)               (None, 13, 13, 1024  4718592     ['leake_69[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_70 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_70[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," leake_70 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_70[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," Add_71 (Add)                   (None, 13, 13, 1024  0           ['Add_68[0][0]',                 \n","                                )                                 'leake_70[0][0]']               \n","                                                                                                  \n"," conv_72 (Conv2D)               (None, 13, 13, 512)  524288      ['Add_71[0][0]']                 \n","                                                                                                  \n"," bnorm_72 (BatchNormalization)  (None, 13, 13, 512)  2048        ['conv_72[0][0]']                \n","                                                                                                  \n"," leake_72 (LeakyReLU)           (None, 13, 13, 512)  0           ['bnorm_72[0][0]']               \n","                                                                                                  \n"," conv_73 (Conv2D)               (None, 13, 13, 1024  4718592     ['leake_72[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_73 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_73[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," leake_73 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_73[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," Add_74 (Add)                   (None, 13, 13, 1024  0           ['Add_71[0][0]',                 \n","                                )                                 'leake_73[0][0]']               \n","                                                                                                  \n"," conv_75 (Conv2D)               (None, 13, 13, 512)  524288      ['Add_74[0][0]']                 \n","                                                                                                  \n"," bnorm_75 (BatchNormalization)  (None, 13, 13, 512)  2048        ['conv_75[0][0]']                \n","                                                                                                  \n"," leake_75 (LeakyReLU)           (None, 13, 13, 512)  0           ['bnorm_75[0][0]']               \n","                                                                                                  \n"," conv_76 (Conv2D)               (None, 13, 13, 1024  4718592     ['leake_75[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_76 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_76[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," leake_76 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_76[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," conv_77 (Conv2D)               (None, 13, 13, 512)  524288      ['leake_76[0][0]']               \n","                                                                                                  \n"," bnorm_77 (BatchNormalization)  (None, 13, 13, 512)  2048        ['conv_77[0][0]']                \n","                                                                                                  \n"," leake_77 (LeakyReLU)           (None, 13, 13, 512)  0           ['bnorm_77[0][0]']               \n","                                                                                                  \n"," conv_78 (Conv2D)               (None, 13, 13, 1024  4718592     ['leake_77[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_78 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_78[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," leake_78 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_78[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," conv_79 (Conv2D)               (None, 13, 13, 512)  524288      ['leake_78[0][0]']               \n","                                                                                                  \n"," bnorm_79 (BatchNormalization)  (None, 13, 13, 512)  2048        ['conv_79[0][0]']                \n","                                                                                                  \n"," leake_79 (LeakyReLU)           (None, 13, 13, 512)  0           ['bnorm_79[0][0]']               \n","                                                                                                  \n"," conv_84 (Conv2D)               (None, 13, 13, 256)  131072      ['leake_79[0][0]']               \n","                                                                                                  \n"," bnorm_84 (BatchNormalization)  (None, 13, 13, 256)  1024        ['conv_84[0][0]']                \n","                                                                                                  \n"," leake_84 (LeakyReLU)           (None, 13, 13, 256)  0           ['bnorm_84[0][0]']               \n","                                                                                                  \n"," UpSampling_85 (UpSampling2D)   (None, 26, 26, 256)  0           ['leake_84[0][0]']               \n","                                                                                                  \n"," Concatenate_86 (Concatenate)   (None, 26, 26, 768)  0           ['UpSampling_85[0][0]',          \n","                                                                  'Add_61[0][0]']                 \n","                                                                                                  \n"," conv_87 (Conv2D)               (None, 26, 26, 256)  196608      ['Concatenate_86[0][0]']         \n","                                                                                                  \n"," bnorm_87 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_87[0][0]']                \n","                                                                                                  \n"," leake_87 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_87[0][0]']               \n","                                                                                                  \n"," conv_88 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_87[0][0]']               \n","                                                                                                  \n"," bnorm_88 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_88[0][0]']                \n","                                                                                                  \n"," leake_88 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_88[0][0]']               \n","                                                                                                  \n"," conv_89 (Conv2D)               (None, 26, 26, 256)  131072      ['leake_88[0][0]']               \n","                                                                                                  \n"," bnorm_89 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_89[0][0]']                \n","                                                                                                  \n"," leake_89 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_89[0][0]']               \n","                                                                                                  \n"," conv_90 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_89[0][0]']               \n","                                                                                                  \n"," bnorm_90 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_90[0][0]']                \n","                                                                                                  \n"," leake_90 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_90[0][0]']               \n","                                                                                                  \n"," conv_91 (Conv2D)               (None, 26, 26, 256)  131072      ['leake_90[0][0]']               \n","                                                                                                  \n"," bnorm_91 (BatchNormalization)  (None, 26, 26, 256)  1024        ['conv_91[0][0]']                \n","                                                                                                  \n"," leake_91 (LeakyReLU)           (None, 26, 26, 256)  0           ['bnorm_91[0][0]']               \n","                                                                                                  \n"," conv_96 (Conv2D)               (None, 26, 26, 128)  32768       ['leake_91[0][0]']               \n","                                                                                                  \n"," bnorm_96 (BatchNormalization)  (None, 26, 26, 128)  512         ['conv_96[0][0]']                \n","                                                                                                  \n"," leake_96 (LeakyReLU)           (None, 26, 26, 128)  0           ['bnorm_96[0][0]']               \n","                                                                                                  \n"," UpSampling_97 (UpSampling2D)   (None, 52, 52, 128)  0           ['leake_96[0][0]']               \n","                                                                                                  \n"," Concatenate_98 (Concatenate)   (None, 52, 52, 384)  0           ['UpSampling_97[0][0]',          \n","                                                                  'Add_36[0][0]']                 \n","                                                                                                  \n"," conv_99 (Conv2D)               (None, 52, 52, 128)  49152       ['Concatenate_98[0][0]']         \n","                                                                                                  \n"," bnorm_99 (BatchNormalization)  (None, 52, 52, 128)  512         ['conv_99[0][0]']                \n","                                                                                                  \n"," leake_99 (LeakyReLU)           (None, 52, 52, 128)  0           ['bnorm_99[0][0]']               \n","                                                                                                  \n"," conv_100 (Conv2D)              (None, 52, 52, 256)  294912      ['leake_99[0][0]']               \n","                                                                                                  \n"," bnorm_100 (BatchNormalization)  (None, 52, 52, 256)  1024       ['conv_100[0][0]']               \n","                                                                                                  \n"," leake_100 (LeakyReLU)          (None, 52, 52, 256)  0           ['bnorm_100[0][0]']              \n","                                                                                                  \n"," conv_101 (Conv2D)              (None, 52, 52, 128)  32768       ['leake_100[0][0]']              \n","                                                                                                  \n"," bnorm_101 (BatchNormalization)  (None, 52, 52, 128)  512        ['conv_101[0][0]']               \n","                                                                                                  \n"," leake_101 (LeakyReLU)          (None, 52, 52, 128)  0           ['bnorm_101[0][0]']              \n","                                                                                                  \n"," conv_102 (Conv2D)              (None, 52, 52, 256)  294912      ['leake_101[0][0]']              \n","                                                                                                  \n"," bnorm_102 (BatchNormalization)  (None, 52, 52, 256)  1024       ['conv_102[0][0]']               \n","                                                                                                  \n"," leake_102 (LeakyReLU)          (None, 52, 52, 256)  0           ['bnorm_102[0][0]']              \n","                                                                                                  \n"," conv_103 (Conv2D)              (None, 52, 52, 128)  32768       ['leake_102[0][0]']              \n","                                                                                                  \n"," bnorm_103 (BatchNormalization)  (None, 52, 52, 128)  512        ['conv_103[0][0]']               \n","                                                                                                  \n"," leake_103 (LeakyReLU)          (None, 52, 52, 128)  0           ['bnorm_103[0][0]']              \n","                                                                                                  \n"," conv_80 (Conv2D)               (None, 13, 13, 1024  4718592     ['leake_79[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," conv_92 (Conv2D)               (None, 26, 26, 512)  1179648     ['leake_91[0][0]']               \n","                                                                                                  \n"," conv_104 (Conv2D)              (None, 52, 52, 256)  294912      ['leake_103[0][0]']              \n","                                                                                                  \n"," bnorm_80 (BatchNormalization)  (None, 13, 13, 1024  4096        ['conv_80[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," bnorm_92 (BatchNormalization)  (None, 26, 26, 512)  2048        ['conv_92[0][0]']                \n","                                                                                                  \n"," bnorm_104 (BatchNormalization)  (None, 52, 52, 256)  1024       ['conv_104[0][0]']               \n","                                                                                                  \n"," leake_80 (LeakyReLU)           (None, 13, 13, 1024  0           ['bnorm_80[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," leake_92 (LeakyReLU)           (None, 26, 26, 512)  0           ['bnorm_92[0][0]']               \n","                                                                                                  \n"," leake_104 (LeakyReLU)          (None, 52, 52, 256)  0           ['bnorm_104[0][0]']              \n","                                                                                                  \n"," conv_81 (Conv2D)               (None, 13, 13, 54)   55350       ['leake_80[0][0]']               \n","                                                                                                  \n"," conv_93 (Conv2D)               (None, 26, 26, 54)   27702       ['leake_92[0][0]']               \n","                                                                                                  \n"," conv_105 (Conv2D)              (None, 52, 52, 54)   13878       ['leake_104[0][0]']              \n","                                                                                                  \n","==================================================================================================\n","Total params: 61,640,962\n","Trainable params: 61,588,354\n","Non-trainable params: 52,608\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["## Weights\n"],"metadata":{"id":"NyZzeUyZhNch"}},{"cell_type":"code","source":["def __init__(self, weight_file):\n","    \n","    ''' Функция декодирования выхода сети \n","        \n","        Args:\n","            weight_file - файл с весами модели\n","        \n","        Return:\n","            -\n","        '''\n","\n","    with open(weight_file, 'rb') as w_f:\n","        major,\t= struct.unpack('i', w_f.read(4))\n","        minor,\t= struct.unpack('i', w_f.read(4))\n","        revision, = struct.unpack('i', w_f.read(4))\n","        \n","        if (major*10 + minor) >= 2 and major < 1000 and minor < 1000:\n","            w_f.read(8)\n","        else:\n","            w_f.read(4)\n","        transpose = (major > 1000) or (minor > 1000)\n","        binary = w_f.read()\n","    \n","    self.offset = 0\n","    \n","    self.all_weights = np.frombuffer(binary, dtype='float32')"],"metadata":{"id":"rYkHKy79hS2q","executionInfo":{"status":"ok","timestamp":1663527714298,"user_tz":-180,"elapsed":9,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def read_bytes(self, size):\n","\n","    '''\n","    Функция позиционирования\n","    \n","    Args:\n","        self\n","        size - размер текущего блока\n","    \n","    Return:\n","        размер блока, суммированный со смещением\n","\n","    '''\n","    self.offset = self.offset + size\n","\n","    return self.all_weights[self.offset-size:self.offset]"],"metadata":{"id":"J49_CTachbgh","executionInfo":{"status":"ok","timestamp":1663527714300,"user_tz":-180,"elapsed":10,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def load_weights(self, model):\n","\n","    '''\n","    Функция загрузки весов\n","    \n","    Args:\n","        self\n","        model - модель\n","    \n","    Return:\n","        -\n","\n","    '''    \n","    for i in range(106):\n","        try:\n","            conv_layer = model.get_layer('conv_' + str(i))\n","            print(\"loading weights of convolution #\" + str(i))\n","            \n","            if i not in [81, 93, 105]:\n","                norm_layer = model.get_layer('bnorm_' + str(i))\n","                size = np.prod(norm_layer.get_weights()[0].shape)\n","                beta  = self.read_bytes(size) # bias\n","                gamma = self.read_bytes(size) # scale\n","                mean  = self.read_bytes(size) # mean\n","                var   = self.read_bytes(size) # variance\n","                weights = norm_layer.set_weights([gamma, beta, mean, var])\n","            \n","            if len(conv_layer.get_weights()) > 1:\n","                bias   = self.read_bytes(np.prod(conv_layer.get_weights()[1].shape))\n","                kernel = self.read_bytes(np.prod(conv_layer.get_weights()[0].shape))\n","                kernel = kernel.reshape(list(reversed(conv_layer.get_weights()[0].shape)))\n","                kernel = kernel.transpose([2,3,1,0])\n","                conv_layer.set_weights([kernel, bias])\n","            \n","            else:\n","                kernel = self.read_bytes(np.prod(conv_layer.get_weights()[0].shape))\n","                kernel = kernel.reshape(list(reversed(conv_layer.get_weights()[0].shape)))\n","                kernel = kernel.transpose([2,3,1,0])\n","                conv_layer.set_weights([kernel])\n","        \n","        except ValueError:\n","            print(\"no convolution #\" + str(i))"],"metadata":{"id":"R08ViJmZhgPv","executionInfo":{"status":"ok","timestamp":1663527714301,"user_tz":-180,"elapsed":10,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["class WeightReader:\n","    \n","    def __init__(self, weight_file):\n","        with open(weight_file, 'rb') as w_f:\n","            major,\t= struct.unpack('i', w_f.read(4))\n","            minor,\t= struct.unpack('i', w_f.read(4))\n","            revision, = struct.unpack('i', w_f.read(4))\n","            if (major*10 + minor) >= 2 and major < 1000 and minor < 1000:\n","                w_f.read(8)\n","            else:\n","                w_f.read(4)\n","            transpose = (major > 1000) or (minor > 1000)\n","            binary = w_f.read()\n","        self.offset = 0\n","        self.all_weights = np.frombuffer(binary, dtype='float32')\n"," \n","    def read_bytes(self, size):\n","        self.offset = self.offset + size\n","        return self.all_weights[self.offset-size:self.offset]\n","\n","    def load_weights(self, model):\n","        for i in range(106):\n","            try:\n","                conv_layer = model.get_layer('conv_' + str(i))\n","                print(\"loading weights of convolution #\" + str(i))\n","                if i not in [81, 93, 105]:\n","                    norm_layer = model.get_layer('bnorm_' + str(i))\n","                    size = np.prod(norm_layer.get_weights()[0].shape)\n","                    beta  = self.read_bytes(size) # bias\n","                    gamma = self.read_bytes(size) # scale\n","                    mean  = self.read_bytes(size) # mean\n","                    var   = self.read_bytes(size) # variance\n","                    weights = norm_layer.set_weights([gamma, beta, mean, var])\n","                if len(conv_layer.get_weights()) > 1:\n","                    bias   = self.read_bytes(np.prod(conv_layer.get_weights()[1].shape))\n","                    kernel = self.read_bytes(np.prod(conv_layer.get_weights()[0].shape))\n","                    kernel = kernel.reshape(list(reversed(conv_layer.get_weights()[0].shape)))\n","                    kernel = kernel.transpose([2,3,1,0])\n","                    conv_layer.set_weights([kernel, bias])\n","                else:\n","                    kernel = self.read_bytes(np.prod(conv_layer.get_weights()[0].shape))\n","                    kernel = kernel.reshape(list(reversed(conv_layer.get_weights()[0].shape)))\n","                    kernel = kernel.transpose([2,3,1,0])\n","                    conv_layer.set_weights([kernel])\n","            except ValueError:\n","                print(\"no convolution #\" + str(i))\n","\n","    def reset(self):\n","        self.offset = 0\n"],"metadata":{"id":"3zgcbH7ShjHx","executionInfo":{"status":"ok","timestamp":1663527714301,"user_tz":-180,"elapsed":10,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Загружаем веса модели в конвертер весов\n","\n","weight_reader = WeightReader(gdown.download('https://storage.yandexcloud.net/aiueducation/Content/advanced/l9/yolov3.weights', None, quiet=True))"],"metadata":{"id":"k4DZZbGdh6wd","executionInfo":{"status":"ok","timestamp":1663527731853,"user_tz":-180,"elapsed":17561,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Устанавливаем веса в слои модели \n","\n","weight_reader.load_weights(model)"],"metadata":{"id":"whxHVkE8hjQk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663527733236,"user_tz":-180,"elapsed":1389,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"b72e5091-c070-444a-cd04-a0e830c5e5fa"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["loading weights of convolution #0\n","loading weights of convolution #1\n","loading weights of convolution #2\n","loading weights of convolution #3\n","no convolution #4\n","loading weights of convolution #5\n","loading weights of convolution #6\n","loading weights of convolution #7\n","no convolution #8\n","loading weights of convolution #9\n","loading weights of convolution #10\n","no convolution #11\n","loading weights of convolution #12\n","loading weights of convolution #13\n","loading weights of convolution #14\n","no convolution #15\n","loading weights of convolution #16\n","loading weights of convolution #17\n","no convolution #18\n","loading weights of convolution #19\n","loading weights of convolution #20\n","no convolution #21\n","loading weights of convolution #22\n","loading weights of convolution #23\n","no convolution #24\n","loading weights of convolution #25\n","loading weights of convolution #26\n","no convolution #27\n","loading weights of convolution #28\n","loading weights of convolution #29\n","no convolution #30\n","loading weights of convolution #31\n","loading weights of convolution #32\n","no convolution #33\n","loading weights of convolution #34\n","loading weights of convolution #35\n","no convolution #36\n","loading weights of convolution #37\n","loading weights of convolution #38\n","loading weights of convolution #39\n","no convolution #40\n","loading weights of convolution #41\n","loading weights of convolution #42\n","no convolution #43\n","loading weights of convolution #44\n","loading weights of convolution #45\n","no convolution #46\n","loading weights of convolution #47\n","loading weights of convolution #48\n","no convolution #49\n","loading weights of convolution #50\n","loading weights of convolution #51\n","no convolution #52\n","loading weights of convolution #53\n","loading weights of convolution #54\n","no convolution #55\n","loading weights of convolution #56\n","loading weights of convolution #57\n","no convolution #58\n","loading weights of convolution #59\n","loading weights of convolution #60\n","no convolution #61\n","loading weights of convolution #62\n","loading weights of convolution #63\n","loading weights of convolution #64\n","no convolution #65\n","loading weights of convolution #66\n","loading weights of convolution #67\n","no convolution #68\n","loading weights of convolution #69\n","loading weights of convolution #70\n","no convolution #71\n","loading weights of convolution #72\n","loading weights of convolution #73\n","no convolution #74\n","loading weights of convolution #75\n","loading weights of convolution #76\n","loading weights of convolution #77\n","loading weights of convolution #78\n","loading weights of convolution #79\n","loading weights of convolution #80\n","loading weights of convolution #81\n","no convolution #82\n","no convolution #83\n","loading weights of convolution #84\n","no convolution #85\n","no convolution #86\n","loading weights of convolution #87\n","loading weights of convolution #88\n","loading weights of convolution #89\n","loading weights of convolution #90\n","loading weights of convolution #91\n","loading weights of convolution #92\n","loading weights of convolution #93\n","no convolution #94\n","no convolution #95\n","loading weights of convolution #96\n","no convolution #97\n","no convolution #98\n","loading weights of convolution #99\n","loading weights of convolution #100\n","loading weights of convolution #101\n","loading weights of convolution #102\n","loading weights of convolution #103\n","loading weights of convolution #104\n","loading weights of convolution #105\n"]}]},{"cell_type":"code","source":["# сохраняем модель в файл, запишите ваш путь\n","\n","model.save('/content/drive/yolov3.h5')"],"metadata":{"id":"v6Iz1sIUiC9L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663527733912,"user_tz":-180,"elapsed":678,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"d5fa0caf-b49f-4f2a-e877-c2b75fb42bac"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]}]},{"cell_type":"markdown","source":["## Bounding boxes\n"],"metadata":{"id":"poixnw58idL8"}},{"cell_type":"code","source":["class BoundBox:\n","\n","    def __init__(self, xmin, ymin, xmax, ymax, objness = None, classes = None):\n","        self.xmin = xmin\n","        self.ymin = ymin\n","        self.xmax = xmax\n","        self.ymax = ymax\n","        self.objness = objness\n","        self.classes = classes\n","        self.label = -1\n","        self.score = -1\n","    \n","    def get_label(self):\n","        \n","        ''' # Функция для получения значения метки'''\n","        if self.label == -1:\n","            self.label = np.argmax(self.classes)\n","\n","        return self.label\n","   \n","    def get_score(self):\n","        \n","        ''' Функция получения вероятности текущей метки'''        \n","        if self.score == -1:\n","            self.score = self.classes[self.get_label()]\n"," \n","        return self.score"],"metadata":{"id":"gKgcuaP5ihKE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def decode_netout(netout, anchors, obj_thresh, net_h, net_w):\n","    \n","    ''' Функция декодирования выхода сети \n","        Args:\n","            netout - \n","            anchors - \n","            obj_thresh - \n","            net_h - \n","            net_w -\n","        \n","        Return:\n","            boxes -\n","        '''\n","        \n","    grid_h, grid_w = netout.shape[:2]\n","    nb_box = 3\n","    netout = netout.reshape((grid_h, grid_w, nb_box, -1))\n","    nb_class = netout.shape[-1] - 5\n","    boxes = []\n","    netout[..., :2]  = _sigmoid(netout[..., :2])\n","    netout[..., 4:]  = _sigmoid(netout[..., 4:])\n","    netout[..., 5:]  = netout[..., 4][..., np.newaxis] * netout[..., 5:]\n","    netout[..., 5:] *= netout[..., 5:] > obj_thresh\n"," \n","    for i in range(grid_h*grid_w):\n","        row = i / grid_w\n","        col = i % grid_w\n","        \n","        for b in range(nb_box):\n","            # 5-й элемент объектность (4-й если считать с нуля). Поулчаем вероятность нахождения объекта\n","            objectness = netout[int(row)][int(col)][b][4]\n","            \n","            if(objectness.all() <= obj_thresh): continue\n","            # первые 4 элемента - это x, y, w и h \n","            x, y, w, h = netout[int(row)][int(col)][b][:4]\n","            x = (col + x) / grid_w # центральное подожение рамки относительно ширины сетки (якорного поля)\n","            y = (row + y) / grid_h # центральное подожение рамки относительно высоты сетки (якорного поля)\n","            w = anchors[2 * b + 0] * np.exp(w) / net_w # ширина рамки bbox \n","            h = anchors[2 * b + 1] * np.exp(h) / net_h # высота рамки bbox\n","           \n","            # последине элементы - вероятности классов текущего объекта\n","            classes = netout[int(row)][col][b][5:]\n","            box = BoundBox(x-w/2, y-h/2, x+w/2, y+h/2, objectness, classes)\n","            boxes.append(box)\n","    \n","    return boxes"],"metadata":{"id":"QaOQkBtqiw4t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def correct_yolo_boxes(boxes, image_h, image_w, net_h, net_w):\n","    \n","    ''' Функция ???\n","        \n","        Args:\n","            boxes -\n","            image_h -\n","            image_w -\n","            net_h -\n","            net_w -\n","        \n","        Return:\n","            -\n","        '''    \n","    new_w, new_h = net_w, net_h\n","    \n","    for i in range(len(boxes)):\n","        x_offset, x_scale = (net_w - new_w)/2./net_w, float(new_w)/net_w\n","        y_offset, y_scale = (net_h - new_h)/2./net_h, float(new_h)/net_h\n","        boxes[i].xmin = int((boxes[i].xmin - x_offset) / x_scale * image_w)\n","        boxes[i].xmax = int((boxes[i].xmax - x_offset) / x_scale * image_w)\n","        boxes[i].ymin = int((boxes[i].ymin - y_offset) / y_scale * image_h)\n","        boxes[i].ymax = int((boxes[i].ymax - y_offset) / y_scale * image_h)"],"metadata":{"id":"XTtGdO3ti7hE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_boxes(boxes, labels, thresh):\n","    \n","    ''' Функция получения результатов выше заданного порогового значения\n","\n","        Args:\n","            boxes - рамки\n","            labels - их лейблы\n","            thresh - пороговое значение\n","\n","        Return:\n","            v_boxes - рамки, подходящие под условия\n","            v_labels - их классы\n","            v_scores - значение вероятности\n","        '''      \n","    \n","    v_boxes, v_labels, v_scores = list(), list(), list()\n","    \n","    # проходим в цикле по каждой рамке    \n","    for box in boxes:\n","        # проходим в цикле по каждой вероятной метке класса\n","        \n","        for i in range(len(labels)):\n","            # проверяем превышает ли вероятность метки класса пороговое значение threshold\n","            \n","            if box.classes[i] > thresh:\n","                v_boxes.append(box)\n","                v_labels.append(labels[i])\n","                v_scores.append(box.classes[i]*100)\n","                # для одной рамки может быть назначено несколько классов\n","    \n","    return v_boxes, v_labels, v_scores"],"metadata":{"id":"NNC90X8fi9bM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def draw_boxes(filename, v_boxes, v_labels, v_scores):\n","    \n","    ''' Функция отрисовки результатов\n","\n","        Args:\n","            filename - имя файла\n","            v_boxes -\n","            v_labels -\n","            v_scores - значения вероятностей  \n","\n","        Return:\n","            -\n","        '''     \n","    \n","    # загружаем изображение\n","    data = plt.imread(filename)\n","    \n","    # строим изображение\n","    plt.imshow(data)\n","    \n","    # получаем значения осей для рисования рамок\n","    ax = plt.gca()\n","    \n","    # рисуем каждую рамку (bbox)    \n","    for i in range(len(v_boxes)):\n","        box = v_boxes[i]\n","        # получаем координаты\n","        y1, x1, y2, x2 = box.ymin, box.xmin, box.ymax, box.xmax\n","        # считаем ширину и высоту рамки\n","        width, height = x2 - x1, y2 - y1\n","        # создаем рамку\n","        rect = Rectangle((x1, y1), width, height, fill=False, color='white')\n","        # накладываем рамку на изображение\n","        ax.add_patch(rect)\n","        # выводим текст и значения вероятностей в левом верхнем углу\n","        label = \"%s (%.3f)\" % (v_labels[i], v_scores[i])\n","        plt.text(x1, y1, label, color='white')\n","    \n","    # выводим все изображение\n","    plt.show()"],"metadata":{"id":"p3DX41JZjdqi"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Obj detect"],"metadata":{"id":"iRe1GJ-9jwzL"}},{"cell_type":"code","source":["lass_threshold = 0.5 # определяем \n","\n","# тут должны быть определены только те классы на которых обучалась модель\n","labels = [\"black-knight\", \"white-rook\", \"white-pawn\", \"white-king\",\n","          \"white-bishop\", \"black-rook\", \"black-rook\", \"black-king\",\n","          \"black-bishop\", \"black-queen\", \"white-queen\", \"white-knight\",\n","          \"bishop\"]\n","\n","def object_detection(model, file_path, class_threshold, labels):\n","    \n","    ''' \n","    Функция детектирует искомые объекты на изображениях\n","    \n","    Args:\n","        model - модель \n","        file_path - путь к файлам \n","        class_threshold - порог вероятности для обнаруженных объектов\n","        labels - классы на которых обучалась модель \n","    \n","    Return:\n","        - \n","\n","    '''   \n","    WIDTH, HEIGHT = 416, 416\n","    \n","    # Параметры испльзовавшиеся в наборе данных, на которых YOLOv3 был натренирован.\n","    anchors = [[116, 90, 156,198, 373, 326], [30,61, 62,45, 59, 119], [10,13, 16,30, 33, 23]]\n","\n","    for file in file_path:\n","        \n","        # загружаем изображение\n","        img, image_w, image_h = load_image_pixels(file, (WIDTH, HEIGHT))\n","        \n","        # анализируем фотографию\n","        yhat = model.predict(img)\n","        \n","        for i in range(len(yhat)):\n","          print(np.array(yhat[i]).shape)\n","\n","        # задаем пустой лист для рамок\n","        boxes = list()\n","        for i in range(len(yhat)):\n","            # декодируем выход с нейросети\n","            boxes += decode_netout(yhat[i][0], anchors[i], class_threshold, HEIGHT, WIDTH)\n","            #############################\n","            d = decode_netout(yhat[i][0], anchors[i], class_threshold, HEIGHT, WIDTH)\n","            print(d[i].xmin)\n","            print(d[i].ymin)\n","            count =+1\n","        \n","\n","\n","        # корректируем размеры рамкок соглсно оригинальным размера фотографий   \n","        correct_yolo_boxes(boxes, image_h, image_w, HEIGHT, WIDTH)\n","\n","        # suppress non-maximal boxes\n","        do_nms(boxes, 0.5)\n","\n","        # получаем рамки для обнаруженных объектов\n","        v_boxes, v_labels, v_scores = get_boxes(boxes, labels, class_threshold)\n","\n","        # Вывод информации о найденных объектах\n","        for i in range(len(v_boxes)):\n","\n","            print(v_labels[i], v_scores[i])\n","\n","        # вывод фотографий с отмеченными на них объектами\n","        draw_boxes(file, v_boxes, v_labels, v_scores)"],"metadata":{"id":"1yM0XJs5jygz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Data\n"],"metadata":{"id":"JvmNSMx7l3pj"}},{"cell_type":"code","source":["source_dir = 'Изображения/'"],"metadata":{"id":"OruIFoILl7BR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_file_paths(train_folder_with_tamplate):\n","    ''' \n","    Функция для получения списка файлов в папке с путями к ним \n","    Args:\n","        train_folder_with_tamplate - адрес папки\n","    Return:\n","        список файлов с путями    \n","        '''\n","    \n","    return glob(train_folder_with_tamplate, recursive=True) "],"metadata":{"id":"3JSIIz15l5W0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Получаем список путей ко всем файлам с их именами\n","file_list1 = get_file_paths(source_dir + '/**' + '/*.jpg')\n","\n","print(len(file_list1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TaPE9bOml9ix","executionInfo":{"status":"ok","timestamp":1663521288153,"user_tz":-180,"elapsed":7,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"bcc2f235-57b1-4e31-c90f-e29a1013bece"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["634\n"]}]},{"cell_type":"code","source":["# загружаем изображение\n","data = plt.imread(file_list1[5])\n","plt.figure(1, figsize=(10,10))    \n","\n","# выводим изображение\n","plt.axis('off')\n","plt.imshow(data)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":575},"id":"y55H-3KLmJZK","executionInfo":{"status":"ok","timestamp":1663521301290,"user_tz":-180,"elapsed":1489,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"07a2a0fe-ee8d-4995-c062-7e3d6223dcce"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["object_detection(model, file_list1[10:20], 0.7, labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"nxtklU1vmPLZ","executionInfo":{"status":"error","timestamp":1663522519164,"user_tz":-180,"elapsed":2134,"user":{"displayName":"Vafelka","userId":"11276804272897708630"}},"outputId":"7dbf7d12-49fa-41a5-e7c7-daede42fc3ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 13, 13, 54)\n","(1, 26, 26, 54)\n","(1, 52, 52, 54)\n","-0.07909084713229766\n","-0.041222913907124445\n","nan\n","nan\n","nan\n","nan\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-50-86452fd26fbf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mobject_detection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile_list1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-49-542033d7a970>\u001b[0m in \u001b[0;36mobject_detection\u001b[0;34m(model, file_path, class_threshold, labels)\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m         \u001b[0;31m# корректируем размеры рамкок соглсно оригинальным размера фотографий\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m         \u001b[0mcorrect_yolo_boxes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimage_h\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimage_w\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHEIGHT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mWIDTH\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m         \u001b[0;31m# suppress non-maximal boxes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-25-32cfac837a31>\u001b[0m in \u001b[0;36mcorrect_yolo_boxes\u001b[0;34m(boxes, image_h, image_w, net_h, net_w)\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mx_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_scale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnet_w\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mnew_w\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2.\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnet_w\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_w\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnet_w\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0my_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_scale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnet_h\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mnew_h\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2.\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnet_h\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_h\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnet_h\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0mboxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxmin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxmin\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mx_offset\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mx_scale\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mimage_w\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0mboxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxmax\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mx_offset\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mx_scale\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mimage_w\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mboxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mymin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mboxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mymin\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0my_offset\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0my_scale\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mimage_h\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: cannot convert float NaN to integer"]}]}]}